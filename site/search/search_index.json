{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to  Iridescent's notebook!","text":"<p> \u7ea6 101 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u672c\u7ad9\u662f\u6211\u57fa\u4e8emkdocs\u642d\u5efa\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6211\u5728\u672c\u79d1\u671f\u95f4\u5b66\u4e60\u7684\u7b14\u8bb0\u4e0e\u603b\u7ed3\u3002</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Computer Science<ul> <li>\u7f16\u7a0b\u8bed\u8a00</li> <li>\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840</li> <li>\u6570\u636e\u7ed3\u6784\u57fa\u7840</li> <li>\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840</li> <li>\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5</li> </ul> </li> <li>AI<ul> <li>Stanford:cs231n</li> <li>ZJU:icv</li> </ul> </li> <li>\u6570\u5b66\u57fa\u7840</li> </ul> <p>\u65bd\u5de5\u4e2d</p> <p>\u7edd\u5927\u90e8\u5206note\u90fd\u672a\u5b8c\u6210</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u8bb0\u5f55","text":"<p> \u7ea6 6 \u4e2a\u5b57 </p> <p>2023</p> 2023-10-22\u00b6 <p> CS &gt; \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 &gt; lec2</p> 2023-9-18\u00b6 <p> AI &gt; \u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba(\u8bfe\u7a0b\u7b14\u8bb0)</p> 2023-9-3\u00b6 <p> AI &gt; CS231n (\u7b14\u8bb0)</p>"},{"location":"AI/cv/cs231n/","title":"CS231n","text":"<p> \u7ea6 61 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5927\u4e00\u6691\u5047\u81ea\u5b66 Stanford cs231n:Deep Learning for Computer Vision\u7684\u7b14\u8bb0</p> <p>Course website:http://cs231n.stanford.edu/</p> <p>Vedios:https://www.bilibili.com/video/BV1nJ411z7fe</p> <p>B\u7ad9\u4e0a\u8bfe\u7a0b\u89c6\u9891\u662f2017\u7248\u672c\u7684\uff0c\u4f46\u662f\u5927\u81f4\u5185\u5bb9\u548cSpring 2023\u662f\u4e00\u81f4\u7684\uff0c\u53ef\u4ee5\u7ed3\u5408Stanford\u7684note\u548cslides\u5b66\u4e60</p>"},{"location":"AI/cv/cs231n/lec2/","title":"Lecture 2: Image Classification with Linear Classifiers","text":"<p> \u7ea6 2216 \u4e2a\u5b57  33 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec2/#image-classification","title":"Image Classification","text":"<p>This is one of the core problems in Computer Vision that, despite its simplicity, has a large variety of practical applications. Moreover, many other seemingly distinct Computer Vision tasks (such as object detection, segmentation) can be reduced to image classification.</p> <p></p> <p>The task in Image Classification is to predict a single label(or a distribution over labels as shown here to indicate our confidence) for a given image. </p> <p>Images are 3-dimensional arrays of integers from 0 to 255, of size Width x Height x 3. The 3 represents the three color channels Red, Green, Blue.</p>"},{"location":"AI/cv/cs231n/lec2/#challenges","title":"Challenges","text":"<ul> <li>Viewpoint cariation. A single instance of an object can be oriented in many ways with respect to the camera.</li> <li>Scale variation. Visual classes often exhibit variation in their size (size in the real world, not only in terms of their extent in the image).</li> <li>Deformation. Many objects of interest are not rigid bodies and can be deformed in extreme ways.</li> <li>Occlusion. The objects of interest can be occluded. Sometimes only a small portion of an object (as little as few pixels) could be visible.</li> <li>Illumination conditions. </li> <li>Background clutter. The objects of interest may blend into their environment, making them hard to identify</li> <li>Intra-class variation. The classes of interest can often be relatively broad, such as chair. There are many different types of these objects, each with their own appearance.</li> </ul> <p>A good image classification model must be invariant to the cross product of all these variations, while simultaneously retaining sensitivity to the inter-class variations.</p>"},{"location":"AI/cv/cs231n/lec2/#data-driven-approach","title":"Data-driven approach","text":"<p>Instead of trying to specify what every one of the categories of interest look like directly in code, we\u2019re going to provide the computer with many examples of each class and then develop learning algorithms that look at these examples and learn about the visual appearance of each class.</p>"},{"location":"AI/cv/cs231n/lec2/#the-image-classification-pipeline","title":"The image classification pipeline","text":"<ul> <li>Input: consists of a set of \\(N\\) images, each labeled with one of \\(K\\) different classes.(training set)</li> <li>Learning: training a classifier</li> <li>Evaluation: by asking it to predict labels for a new set of images that it has never seen before.</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#nearest-neighbour-classifier","title":"Nearest Neighbour Classifier","text":"<p>example image dataset: CIFAR-10: consists of 60,000 tiny images that are 32 pixels high and wide. Each image is labeled with one of 10 classes (for example \u201cairplane, automobile, bird, etc\u201d). These 60,000 images are partitioned into a training set of 50,000 images and a test set of 10,000 images</p> <p></p> <p>The nearest neighbour classifier will take a test image, compare it to every single one of the training image,  and predict the label of the closest training image.</p>"},{"location":"AI/cv/cs231n/lec2/#l1-distance","title":"L1 distance","text":"<ul> <li>compare the images pixel by pixel and add up all the differences.</li> <li>\\(d_1(I_1,I_2)=\\sum_p \\vert I_1^p-I_2^p\\vert\\)</li> </ul> <pre><code>import numpy as np\nclass NearestNeighbor(object):\ndef __init__(self):\npass\ndef train(self, X, y):\n\"\"\" X is N x D where each row is an example. Y is 1-dimension of size N \"\"\"\n# the nearest neighbor classifier simply remembers all the training data\nself.Xtr = X\nself.ytr = y\ndef predict(self, X):\n\"\"\" X is N x D where each row is an example we wish to predict label for \"\"\"\nnum_test = X.shape[0]\n# lets make sure that the output type matches the input type\nYpred = np.zeros(num_test, dtype = self.ytr.dtype)\n# loop over all test rows\nfor i in range(num_test):\n# find the nearest training image to the i'th test image\n# using the L1 distance (sum of absolute value differences)\ndistances = np.sum(np.abs(self.Xtr - X[i,:]), axis = 1)\nmin_index = np.argmin(distances) # get the index with smallest distance\nYpred[i] = self.ytr[min_index] # predict the label of the nearest example\nreturn Ypred\n</code></pre> <ul> <li>However, this classifier only achieves 38.6% on CIFAR-10.</li> </ul> <p>Note</p> <p>Train O(1),predict O(N) But we want classifiers that are fast at prediction; slow for training is ok.</p>"},{"location":"AI/cv/cs231n/lec2/#the-choice-of-distance","title":"The choice of distance","text":"<ul> <li>L2 distance: \\(d_2(I_1,I_2)=\\sqrt {\\sum_p{(I_1^p-I_2^p)}^2}\\), 35.4% accuracy</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#k-nearest-neighbor-classifier","title":"K-Nearest Neighbor Classifier","text":"<p>Instead of finding the single closest image in the training set, we will find the top k closest images, and have them vote on the label of the test image.</p> <p></p> <p>Intuitively, higher values of k have a smoothing effect that makes the classifier more resistant to outliers.</p>"},{"location":"AI/cv/cs231n/lec2/#pros-and-cons-of-nearest-neighbour-classifier","title":"Pros and Cons of Nearest Neighbour classifier","text":"<ul> <li>\u4f18\u70b9\uff1a\u8bad\u7ec3\u4e0d\u82b1\u8d39\u65f6\u95f4</li> <li>\u7f3a\u70b9\uff1a\u4e0d\u9002\u7528\u4e8e\u9ad8\u7ef4\u6570\u636e\uff0c\u57fa\u4e8e\u50cf\u7d20\u8ddd\u79bb\u7684\u6bd4\u8f83\u9020\u6210\u7ef4\u6570\u707e\u96be</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#setting-hyperparameters","title":"Setting Hyperparameters","text":"<p>Which number of k works best?</p> <p></p> <p></p> <p>Note</p> <p>Evaluate on the test set only a single time, at the very end.</p>"},{"location":"AI/cv/cs231n/lec2/#linear-classification","title":"Linear Classification","text":"<p>\u7531\u4e8eKNN\u5b58\u5728\u4e0d\u8db3\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u5f3a\u5927\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\uff0c\u5e76\u4e14\u8be5\u65b9\u6cd5\u53ef\u4ee5\u81ea\u7136\u5ef6\u7533\u5230\u795e\u7ecf\u7f51\u7edc\u4e0a\u3002</p> <p>\u8be5\u65b9\u6cd5\u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u4e2a\u662fscore function(\u8bc4\u5206\u51fd\u6570)\uff0c\u5b83\u662f\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5230\u7c7b\u522b\u5206\u503c\u7684\u6620\u5c04\u3002\u53e6\u4e00\u4e2a\u662floss function \uff08\u635f\u5931\u51fd\u6570\uff09\uff0c\u5b83\u662f\u7528\u6765\u91cf\u5316\u9884\u6d4b\u5f97\u5206\u4e0e\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u7684\u4e00\u81f4\u6027\u3002\u8be5\u65b9\u6cd5\u6700\u7ec8\u53ef\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#parameterized-mapping-from-images-to-label-scores","title":"Parameterized mapping from images to label scores","text":"<p>score function \u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u6620\u5c04\u4e3a\u5404\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u5f97\u5206\u9ad8\u4ee3\u8868\u56fe\u50cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u7684\u6982\u7387\u5927\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4ece\u4e00\u4e2a\u4f8b\u5b50\u51fa\u53d1\uff1a \u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b\u5f88\u591a\u56fe\u50cf\u7684\u8bad\u7ec3\u96c6\\(x_i \\in \\mathbb{R}^D\\), \u6bcf\u4e2a\u56fe\u50cf\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\\(y_i\\), \u5373\u6211\u4eec\u6709\\(N\\)\u4e2a\u56fe\u50cf\uff0c\u6bcf\u4e2a\u56fe\u50cf\u7684\u7ef4\u5ea6\u662f\\(D\\)\uff08\u5c06\u56fe\u50cf\u62c9\u957f\uff0c\u53ef\u4ee5\u628a\u56fe\u50cf\u770b\u4f5c\u9ad8\u7ef4\u7a7a\u95f4\u7684\u4e00\u4e2a\u70b9\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u5c31\u662f\u4e00\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u70b9\u5e26\u6709\u4e00\u4e2a\u5206\u7c7b\u6807\u7b7e\uff09, \u5171\u6709\\(K\\)\u79cd\u4e0d\u540c\u7684\u5206\u7c7b\u3002\u5b9a\u4e49\\(f:\\mathbb{R}^D \\rightarrow \\mathbb{R}^K\\)</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#linear-classifier","title":"Linear classifier","text":"<p>\u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u51fd\u6570\u5f00\u59cb\uff0c\u4e00\u4e2a\u7ebf\u6027\u6620\u5c04\uff1a $$ f(x_i,W,b)=Wx_i +b $$ \u5176\u4e2d\\(x_i\\)\u7684\u5927\u5c0f\u662f\\(D\\times 1\\), \\(W\\)\u7684\u5927\u5c0f\u662f\\(K\\times D\\) ,\\(b\\)\u662f\\(K\\times 1\\)</p> <p>\\(W\\) \u88ab\u79f0\u4e3aweights(\u6743\u91cd)\uff0c\\(b\\) \u5f71\u54cd\u8f93\u51fa\u7684\u6570\u503c\u4f46\u662f\u5e76\u4e0d\u548c\u539f\u59cb\u6570\u636e\u4ea7\u751f\u5173\u8054\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4fee\u6b63\u91cf\uff0c\u88ab\u79f0\u4e3abias vector\uff08\u504f\u5dee\u5411\u91cf\uff09</p> <p>\u800c\u5bf9\u4e8e\\(W\\)\u77e9\u9635\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6bcf\u4e2a\u7c7b\u7684\u5206\u7c7b\u5668\u5c31\u662f\\(W\\)\u7684\u4e00\u4e2a\u884c\u5411\u91cf\u3002\u4ee5\u8239\u7684\u5206\u7c7b\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u60f3\u8c61\u8239\u88ab\u5927\u91cf\u84dd\u8272\u5305\u56f4\u3002\u90a3\u4e48\u8239\u5206\u7c7b\u5668\u5728\u84dd\u8272\u901a\u9053\u4e0a\u5c31\u6709\u8f83\u591a\u7684\u6b63\u6743\u91cd\uff0c\u800c\u5728\u7eff\u8272\u7ea2\u8272\u901a\u9053\u4e0a\u8d1f\u6743\u91cd\u8f83\u591a\u3002</p> <p>\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5047\u8bbeinput image\u53ea\u6709\u56db\u4e2a\u50cf\u7d20\uff08\u4e0d\u8003\u8651RGB\u901a\u9053\uff09\uff0c\u6709\u4e09\u4e2a\u5206\u7c7b\uff08\u7ea2\u7eff\u84dd\u5206\u522b\u4ee3\u7801\u732b\u72d7\u8239\uff0c\u4e0d\u662fRGB\u7684\u610f\u601d\uff01\uff09\u3002\u9996\u5148\u5c06\u56fe\u50cf\u50cf\u7d20\u62c9\u957f\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\uff0c\u4e0e\\(W\\)\u8fdb\u884c\u77e9\u9635\u4e58\uff0c\u7136\u540e\u5f97\u5230\u5404\u4e2a\u5206\u7c7b\u7684\u5206\u503c\u3002</p> <p>Warning</p> <p>\u8be5\u4f8b\u4ec5\u4f9b\u7406\u89e3\u5206\u7c7b\u5668\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u5b83\u7684\u77e9\u9635W is bad.\u53ef\u4ee5\u770b\u51fa\u6765\u8be5\u5206\u7c7b\u5668\u732b\u7684\u5206\u503c\u975e\u5e38\u4f4e\uff0c\u7b97\u6cd5\u5012\u89c9\u5f97\u8fd9\u4e2a\u56fe\u50cf\u662f\u4e00\u53ea\u72d7\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#_1","title":"\u51e0\u4f55\u89e3\u91ca","text":"<p>\u53e6\u4e00\u4e2a\u5bf9linear classifier\u76f4\u89c2\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u56fe\u50cf\u62c9\u957f\u540e\u90fd\u662f\u4e8c\u7ef4\u7684\uff08\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u53ef\u89c6\u5316\u771f\u5b9e\u56fe\u50cf\u90a3\u4e48\u9ad8\u7ef4\u7a7a\u95f4\u7684\u7ebf\u6027\u51fd\u6570\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u901a\u8fc7\u8be5\u56fe\u6211\u4eec\u518d\u6b21\u7406\u89e3\u4e00\u4e0b \\(W\\) \u548c \\(b\\) \u7684\u4f5c\u7528\uff1a\\(W\\)\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5206\u7c7b\u5668\u3002\u5982\u679c\u6539\u53d8\u5176\u4e2d\u4e00\u884c\u7684\u6570\u5b57\uff0c\u5206\u7c7b\u5668\u5728\u7a7a\u95f4\u4e2d\u5bf9\u5e94\u7684\u76f4\u7ebf\u5c31\u5f00\u59cb\u65cb\u8f6c\uff0c\u800c\\(b\\)\u5141\u8bb8\u76f4\u7ebf\u5e73\u79fb\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\\(b\\), \u90a3\u4e48\u65e0\u8bba\u6743\u91cd\u5982\u4f55\uff0c\u5728\\(x_i=0\\)\u65f6\u5206\u503c\u59cb\u7ec8\u4e3a\\(0\\),\u8fd9\u6837\u6240\u6709\u76f4\u7ebf\u90fd\u8981\u7a7f\u8fc7\u539f\u70b9\u3002\u8fd9\u662f\u6211\u4eec\u5728\\(Wx\\)\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u504f\u5dee\u5411\u91cf\u7684\u53e6\u4e00\u79cd\u89e3\u91ca\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#_2","title":"\u5c06\u7ebf\u6027\u5206\u7c7b\u5668\u770b\u4f5c\u6a21\u677f\u5339\u914d","text":"<p>\u5173\u4e8e\\(W\\) \u7684\u53e6\u4e00\u79cd\u89e3\u91ca\u662f\u5b83\u7684\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5206\u7c7b\u7684\u6a21\u677f\u3002\u6bcf\u5f20\u56fe\u50cf\u7684\u4e0d\u540c\u7c7b\u522b\u5f97\u5206\uff0c\u662f\u4f7f\u7528\u5185\u79ef\u6765\u6bd4\u8f83\u56fe\u50cf\u548c\u6a21\u677f\uff0c\u6700\u540e\u5f97\u5230\u7684\u76f8\u4f3c\u5ea6\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u5c31\u662f\u5728\u5229\u7528\u5b66\u4e60\u5230\u7684\u6a21\u677f\uff0c\u9488\u5bf9\u56fe\u50cf\u505a\u6a21\u677f\u5339\u914d\u3002\u800c\u8054\u7cfb\u5230\u4e4b\u524d\u7684kNN\u7b97\u6cd5\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3alinear classifier\u662f\u5728\u9ad8\u6548\u4f7f\u7528kNN\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u6240\u6709\u8bad\u7ec3\u96c6\u7684\u56fe\u50cf\u6765\u6bd4\u8f83\uff0c\u800c\u662f\u4f7f\u7528\u6a21\u677f\u56fe\u7247\u6765\u5224\u65ad\uff0c\u800c\u4e14\u6ca1\u6709\u4f7f\u7528\\(L_1.L_2\\)\u8ddd\u79bb\u8ba1\u7b97\uff0c\u800c\u662f\u4f7f\u7528\u5185\u79ef\u6765\u8ba1\u7b97\u76f8\u5173\u6027\u3002</p> <p>Note</p> <p>\u5185\u79ef\u7ecf\u5e38\u5728\u76f8\u5173\u6027\u7684\u8ba1\u7b97\u4e2d\u88ab\u4f7f\u7528</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#loss-function","title":"Loss function","text":"<p>The loss function quantifies our unhappiness with predictions on the training set</p> <p>\u5728\u4e0a\u4e2aunit\u4e3e\u7684\u4f8b\u5b50\u4e2d\uff0c\\(W\\)\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u6743\u91cd\u77e9\u9635\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u5c31\u662f\u8c03\u6574\u6743\u91cd\u77e9\u9635\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u8bc4\u5206\u51fd\u6570\u7684\u7ed3\u679c\u4e0e\u8bad\u7ec3\u96c6\u4e2d\u56fe\u50cf\u7684\u771f\u5b9e\u7c7b\u522b\u4e00\u81f4\u3002\u6240\u4ee5\u5f15\u5165\u635f\u5931\u51fd\u6570\u7684\u6982\u5ff5\u3002</p> <p>\u5f53\u8bc4\u5206\u51fd\u6570\u8f93\u51fa\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u5dee\u5f02\u8d8a\u5927\uff0c\u635f\u5931\u51fd\u6570\u8f93\u51fa\u8d8a\u5927\uff0c\u53cd\u4e4b\u8d8a\u5c0f\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#multiclass-support-vector-machine-loss","title":"Multiclass Support Vector Machine Loss","text":"<p>Key idea: SVM\u7684loss function \u60f3\u8981SVM\u5728\u6b63\u786e\u5206\u7c7b\u4e0a\u7684\u5f97\u5206\u59cb\u7ec8\u6bd4\u4e0d\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u9ad8\u51fa\u4e00\u4e2a\u8fb9\u754c\u503c \\(\\Delta\\)</p> <p>\u9996\u5148\u5c06score\u7b80\u5199\u4e3a\\(s\\), \u5373\\(s_j=f(x_i,W)_j\\). \u5219\u9488\u5bf9\u7b2c\\(i\\)\u4e2a\u6570\u636e\u7684svm\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a $$ L_i = \\sum_{j \\neq y_i}max(0,s_j-s_{y_i}+\\Delta) $$ \u4e0b\u56fe\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u7684\u8fb9\u754c\u503c\u8bbe\u7f6e\u4e3a1</p> <p></p> <p>\u5173\u4e8e0\u7684\u9608\u503c\uff1a\\(max(0, )\\)\u51fd\u6570\u88ab\u79f0\u4f5c\u6298\u53f6\u635f\u5931\u51fd\u6570\uff08hinge loss)</p>"},{"location":"AI/cv/cs231n/lec2/#softmaxmultinomial-logistic-regression","title":"Softmax((Multinomial Logistic Regression)","text":"<p>\u4e0eSVM\u4e0d\u540c\uff0cSoftmax\u7684\u8f93\u51fa\u4e3a\u5f52\u4e00\u5316\u7684\u6982\u7387\u5206\u5e03\uff0c\u66f4\u52a0\u76f4\u89c2\u3002</p> <p>\\(s=f(x_i,W), P(Y=k|X=x_i)=\\frac{e^{s_k}}{\\sum_j{e^{s_j}}}\\)</p> <p>\u4f7f\u7528\\(f_j\\)\u8868\u793a\u8bc4\u5206\u5411\u91cf\\(f\\)\u4e2d\u7684\u7b2c\\(j\\)\u4e2a\u5143\u7d20\uff0c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a\uff1a $$ L_i=-log(\\frac{e^{f_j}}{\\sum_j{e^{f_j}}}) $$</p>"},{"location":"AI/cv/cs231n/lec2/#_3","title":"\u4fe1\u606f\u7406\u8bba\u89c6\u89d2","text":"<p>\u771f\u5b9e\u5206\u5e03 \\(p\\) \u548c\u4f30\u8ba1\u5206\u5e03 \\(q\\) \u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\uff1a  $$ H(p,q)=-\\sum_x p(x)log(q(x)) $$ \u56e0\u6b64\uff0csoftmax\u5206\u7c7b\u5668\u6240\u4f5c\u7684\u5c31\u662f\u6700\u5c0f\u5316\u5728\u4f30\u8ba1\u5206\u5e03 \\(\\frac{e^{f_{y_i}}}{\\sum_j e^{f_j}}\\) \u548c\u771f\u5b9e\u5206\u5e03\u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\u3002\u771f\u5b9e\u5206\u5e03\u5c31\u662f\u6240\u6709\u6982\u7387\u5bc6\u5ea6\u90fd\u5206\u5e03\u5728\u6b63\u786e\u7684\u7c7b\u522b\u4e0a\uff08\u6bd4\u5982\\(p=[0,\u2026,1,\u2026,0]\\)\u4e2d\\(y_i\\)\u7684\u6982\u7387\u662f\\(1\\), \u4ee3\u8868\u771f\u5b9e\u7c7b\u522b\uff0c\u5176\u4ed6\u5168\u4e3a\\(0\\))</p>"},{"location":"AI/cv/cs231n/lec2/#practical-issues","title":"Practical issues","text":"<p>\u4ee3\u7801\u5b9e\u73b0softmax\u51fd\u6570\u8ba1\u7b97\u65f6\uff0c\u56e0\u4e3a\u5b58\u5728\u6307\u6570\u51fd\u6570\uff0c\u9664\u4ee5\u5927\u6570\u503c\u53ef\u80fd\u9020\u6210\u6570\u503c\u8ba1\u7b97\u7684\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5f52\u4e00\u5316\u6280\u5de7 $$ \\frac{e^{f_{y_i}}}{\\sum_j{e^{f_j}}}=\\frac{Ce^{f_{y_i}}}{C\\sum_j{e^{f_j}}}=\\frac{e^{f_{y_i}+logC}}{\\sum_j{e^{f_j}+logC}} $$ \u5176\u4e2d\\(C\\)\u7684\u503c\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\uff0c\u901a\u5e38\u5c06\\(C\\)\u8bbe\u5b9a\u4e3a\\(logC=-max_jf_j\\)\uff0c \u5373\u5c06\\(f\\)\u4e2d\u7684\u6570\u503c\u5e73\u79fb\u4f7f\u5f97\u6700\u5927\u503c\u4e3a\\(0\\), \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50</p> <pre><code>f = np.array([123, 456, 789]) # example with 3 classes and each having large scores\np = np.exp(f) / np.sum(np.exp(f)) # Bad: Numeric problem, potential blowup\n# instead: first shift the values of f so that the highest number is 0:\nf -= np.max(f) # f becomes [-666, -333, 0]\np = np.exp(f) / np.sum(np.exp(f)) # safe to do, gives the correct answer\n</code></pre>"},{"location":"AI/cv/cs231n/lec3/","title":"Lecture 3: Regularization and Optimization","text":"<p> \u7ea6 904 \u4e2a\u5b57  11 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec3/#regularization","title":"Regularization","text":"<p>\u8003\u8651\u4e0a\u4e00\u8282\u635f\u5931\u51fd\u6570\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u4e00\u4e2a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u6743\u91cd\u96c6\\(W\\)\u80fd\u591f\u6b63\u786e\u5206\u7c7b\u6bcf\u4e2a\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u4e2a\\(W\\)\u5e76\u4e0d\u552f\u4e00\u3002\u4f8b\u5982\uff0c\\(W\\)\u53ef\u4ee5\u4f7f\u5f97\\(L=0\\), \u90a3\u4e48\\(2W\\)\u540c\u6837\u4e5f\u53ef\u4ee5\u505a\u5230\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u8981\u600e\u4e48\u9009\u62e9\uff1f</p> <p>\u8fd9\u65f6\u5019\u5c31\u8981\u5f15\u5165\u6b63\u5219\u5316\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u635f\u5931\u51fd\u6570\u540e\u52a0\u4e00\u4e2a\u6b63\u5219\u5316penalty\u90e8\u5206\uff1a $$ L(W)=\\frac{1}{N}\\sum_{i=1}^{N}L_i(f(x_i,W),y_i)+\\lambda R(W) $$</p>"},{"location":"AI/cv/cs231n/lec3/#regularization-intuition","title":"Regularization intuition","text":"<p>\u4e00\u4e2a\u76f4\u89c2\u7684\u4f8b\u5b50\u5982\u4e0a\u56fe\uff0c\u84dd\u8272\u7684\u70b9\u4ee3\u7801\u8bad\u7ec3\u96c6\u7684\u6570\u636e\uff0c\u6211\u4eec\u60f3\u5f97\u5230\u7684\u4e0d\u662f\u4e00\u4e2a\u80fd\u591f\u975e\u5e38\u597d\u7684\u62df\u5408\u73b0\u6709\u6570\u636e\u7684\\(W\\)\uff08\u5982\u56fe\u4e2d\u7684\\(f_1\\)),\u800c\u662f\u53ef\u4ee5\u5bf9\u964c\u751f\u6570\u636e\u5177\u6709\u540c\u6837\u597d\u7684\u6548\u679c\uff08\\(f_2\\))\u3002\u6240\u4ee5\u6b63\u5219\u5316\u8d77\u5230\u7684\u4f5c\u7528\u662f\u9632\u6b62\u6570\u636e\u8fc7\u62df\u5408\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#simple-examples","title":"Simple examples","text":"<ul> <li>L2 regularization: \\(R(W)=\\sum_k\\sum_lW_{k,l}^2\\), likes to spread out weights</li> <li>L1 regularization: \\(R(W)=\\sum_k\\sum_l \\vert W_{k,l}\\vert\\) , prefer sparse weights</li> <li>Elastic net(L1+L2): \\(R(W)=\\sum_k\\sum_l \\beta W_{k,l}^2+\\vert W_{k,l}\\vert\\)</li> </ul>"},{"location":"AI/cv/cs231n/lec3/#optimization","title":"Optimization","text":"<p>\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u91cf\u5316\u67d0\u4e2a\u6743\u91cd\u77e9\u9635\u7684\u8d28\u91cf\uff0c\u800c\u6700\u4f18\u5316\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u80fd\u591f\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u503c\u7684\\(W\\), \u6211\u4eec\u73b0\u5728\u5c31\u671d\u7740\u8fd9\u4e2a\u76ee\u6807\uff0c\u5f15\u5165\u4f18\u5316\u7684\u65b9\u6cd5\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#_1","title":"\u4e24\u4e2a\u76f4\u89c2\u4f46\u4e0d\u592a\u597d\u7684\u60f3\u6cd5","text":"<ul> <li> <p>\u968f\u673a\u641c\u7d22\uff1a\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u662f\u4e2avery bad idea</p> </li> <li> <p>\u968f\u673a\u672c\u5730\u641c\u7d22\uff1a\u4ece\u4e00\u4e2a\u968f\u673a\\(W\\)\u5f00\u59cb\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6270\u52a8 \\(\\delta W\\), \u53ea\u6709\u5f53 \\(W+\\delta W\\)\u7684\u635f\u5931\u503c\u53d8\u4f4e\uff0c\u6211\u4eec\u624d\u4f1a\u66f4\u65b0\u3002\u867d\u7136\u6bd4\u968f\u673a\u641c\u7d22\u597d\u4e00\u4e9b\uff0c\u4f46\u662f\u4f9d\u7136\u5f88\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90</p> </li> </ul>"},{"location":"AI/cv/cs231n/lec3/#_2","title":"\u8ddf\u968f\u68af\u5ea6","text":"<p>\u5728\u4e00\u7ef4\u7a7a\u95f4\uff0c\u51fd\u6570\u7684\u5bfc\u6570\u4e3a\uff1a\\(\\frac{df(x)}{dx}=lim_{h \\rightarrow 0}\\frac{f(x+h)-f(x)}{h}\\)</p> <p>\u5728\u8f93\u5165\u7a7a\u95f4\u4e2d\uff0c\u68af\u5ea6\u662f\u5404\u4e2a\u7ef4\u5ea6\u7684\u659c\u7387\u7ec4\u6210\u7684\u5411\u91cf</p>"},{"location":"AI/cv/cs231n/lec3/#_3","title":"\u8ba1\u7b97\u68af\u5ea6\uff1a\u6570\u503c\u68af\u5ea6\u6cd5","text":"<p>\u5229\u7528\u516c\u5f0f\\(\\frac{df(x)}{dx}=lim_{h \\rightarrow 0}\\frac{f(x+h)-f(x)}{h}\\)\u8ba1\u7b97</p>"},{"location":"AI/cv/cs231n/lec3/#_4","title":"\u8ba1\u7b97\u68af\u5ea6\uff1a\u5fae\u5206\u5206\u6790\u6cd5","text":"<p>\\(\\nabla_w L\\)</p>"},{"location":"AI/cv/cs231n/lec3/#_5","title":"\u68af\u5ea6\u4e0b\u964d","text":""},{"location":"AI/cv/cs231n/lec3/#vanilla-gradient-descent","title":"Vanilla Gradient Descent\uff08\u666e\u901a\u68af\u5ea6\u4e0b\u964d\uff09","text":"<pre><code># Vanilla Gradient Descent\nwhile True:\nweights_grad = evaluate_gradient(loss_fun, data, weights)\nweights += - step_size * weights_grad # perform parameter update\n</code></pre> <p>\u5176\u4e2d<code>step_size</code>\u4e5f\u53eb\u5b66\u4e60\u7387\uff0c\u662f\u6700\u91cd\u8981\u7684\u8d85\u53c2\u4e4b\u4e00\u3002\u82e5\u5b66\u4e60\u7387\u8fc7\u4f4e\uff0c\u867d\u7136\u68af\u5ea6\u4e0b\u964d\u7a33\u5b9a\u4f46\u8017\u65f6\u957f\uff1b\u5982\u679c\u5b66\u4e60\u7387\u8fc7\u9ad8\uff0c\u6709\u53ef\u80fd\u8d8a\u8fc7\u5c40\u90e8\u6700\u4f18\u70b9\u5bfc\u81f4\u66f4\u9ad8\u7684\u635f\u5931\u503c\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#mini-batch-gradient-descent","title":"Mini-batch gradient descent\uff08\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\uff09","text":"<p>\u5728\u5927\u89c4\u6a21\u7684\u5e94\u7528\u4e2d\uff0c\u8bad\u7ec3\u6570\u636e\u53ef\u4ee5\u8fbe\u5230\u767e\u4e07\u7ea7\u91cf\u7ea7\u3002\u5982\u679c\u50cf\u8fd9\u6837\u8ba1\u7b97\u6574\u4e2a\u8bad\u7ec3\u96c6\uff0c\u6765\u83b7\u5f97\u4ec5\u4ec5\u4e00\u4e2a\u53c2\u6570\u7684\u66f4\u65b0\u5c31\u6bd4\u8f83\u6d6a\u8d39\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u8ba1\u7b97\u8bad\u7ec3\u96c6\u4e2d\u7684*\u5c0f\u6279\u91cf\u6570\u636e\u3002</p> <pre><code># Vanilla Minibatch Gradient Descent\nwhile True:\ndata_batch = sample_training_data(data, 256) # sample 256 examples\nweights_grad = evaluate_gradient(loss_fun, data_batch, weights)\nweights += - step_size * weights_grad # perform parameter update\n</code></pre> <p>\u8fd9\u4e2a\u65b9\u6cd5\u4e4b\u6240\u4ee5\u6548\u679c\u4e0d\u9519\uff0c\u662f\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\u90fd\u662f\u76f8\u5173\u7684\u3002\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u6781\u7aef\u60c5\u51b5\uff1a\u5728ILSVRC\u4e2d\u7684120\u4e07\u4e2a\u56fe\u50cf\u662f1000\u5f20\u4e0d\u540c\u56fe\u7247\u7684\u590d\u5236\uff08\u6bcf\u4e2a\u7c7b\u522b1\u5f20\u56fe\u7247\uff0c\u6bcf\u5f20\u56fe\u7247\u67091200\u5f20\u590d\u5236\uff09\u3002\u90a3\u4e48\u663e\u7136\u8ba1\u7b97\u8fd91200\u5f20\u590d\u5236\u56fe\u50cf\u7684\u68af\u5ea6\u5c31\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\u5bf9\u6bd4120\u4e07\u5f20\u56fe\u7247\u7684\u6570\u636e\u635f\u5931\u7684\u5747\u503c\u4e0e\u53ea\u8ba1\u7b971000\u5f20\u7684\u5b50\u96c6\u7684\u6570\u636e\u635f\u5931\u5747\u503c\u65f6\uff0c\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u6570\u636e\u96c6\u80af\u5b9a\u4e0d\u4f1a\u5305\u542b\u91cd\u590d\u56fe\u50cf\uff0c\u90a3\u4e48\u5c0f\u6279\u91cf\u6570\u636e\u7684\u68af\u5ea6\u5c31\u662f\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u68af\u5ea6\u7684\u4e00\u4e2a\u8fd1\u4f3c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u8df5\u4e2d\u901a\u8fc7\u8ba1\u7b97\u5c0f\u6279\u91cf\u6570\u636e\u7684\u68af\u5ea6\u53ef\u4ee5\u5b9e\u73b0\u66f4\u5feb\u901f\u5730\u6536\u655b\uff0c\u5e76\u4ee5\u6b64\u6765\u8fdb\u884c\u66f4\u9891\u7e41\u7684\u53c2\u6570\u66f4\u65b0\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#summary","title":"Summary","text":""},{"location":"AI/cv/cs231n/lec4/","title":"Lec 4: Neural Networks and Backpropagation","text":"<p> \u7ea6 2174 \u4e2a\u5b57  37 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec4/#neural-networks","title":"Neural Networks","text":""},{"location":"AI/cv/cs231n/lec4/#_1","title":"\u7531\u751f\u7269\u7cfb\u7edf\u7684\u795e\u7ecf\u5143\u5230\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"AI/cv/cs231n/lec4/#_2","title":"\u57fa\u672c\u7ed3\u6784","text":"<p>\u5927\u8111\u7684\u57fa\u672c\u8ba1\u7b97\u5355\u4f4d\u662f\u795e\u7ecf\u5143\uff0c\u4eba\u7c7b\u795e\u7ecf\u7cfb\u7edf\u4e2d\u7684\u5927\u7ea6\\(860\\)\u4ebf\u795e\u7ecf\u5143\u88ab\\(10^{14}-10^{15}\\)\u4e2a\u7a81\u89e6\u8fde\u63a5\u8d77\u6765\u3002\u6bcf\u4e2a\u795e\u7ecf\u5143\u4ece\u6811\u7a81\u83b7\u5f97\u4fe1\u53f7\uff0c\u6cbf\u7740\u8f74\u7a81\u8f93\u51fa\u4fe1\u53f7\uff0c\u8f74\u7a81\u672b\u7aef\u4f1a\u5f62\u6210\u5206\u679d\uff0c\u901a\u8fc7\u7a81\u89e6\u548c\u5176\u5b83\u795e\u7ecf\u5143\u7684\u6811\u7a81\u76f8\u8fde\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#_3","title":"\u5177\u4f53\u8fc7\u7a0b","text":"<ul> <li>\u5728\u795e\u7ecf\u5143\u7684\u8ba1\u7b97\u6a21\u578b\u4e2d\uff0c\u6cbf\u7740\u8f74\u7a81\u4f20\u64ad\u7684\u4fe1\u53f7(\\(x\\))\u5c06\u57fa\u4e8e\u7a81\u89e6\u5f3a\u5ea6(\\(w\\))\uff0c\u4e0e\u5176\u5b83\u795e\u7ecf\u5143\u7684\u6811\u7a81\u8fdb\u884c\u4e58\u6cd5\u4ea4\u4e92\u3002</li> <li>\u7a81\u89e6\u7684\u5f3a\u5ea6(\\(w\\))\u53ef\u5b66\u4e60\uff0c\u5e76\u4e14\u63a7\u5236\u4e00\u4e2a\u795e\u7ecf\u5143\u5bf9\u53e6\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u5f71\u54cd\u5f3a\u5ea6\u4e0e\u65b9\u5411\u3002</li> <li>\u6811\u7a81\u5c06\u4fe1\u53f7\u4f20\u9012\u5230\u7ec6\u80de\u4f53\uff0c\u4fe1\u53f7\u5728\u7ec6\u80de\u4f53\u4e2d\u76f8\u52a0\uff0c\u5982\u679c\u7ed3\u679c\u9ad8\u4e8e\u9608\u503c\uff0c\u90a3\u4e48\u795e\u7ecf\u5143\u5c06\u4f1a\u88ab\u6fc0\u6d3b\uff0c\u5411\u8f74\u7a81\u8f93\u51fa\u4e00\u4e2a\u5cf0\u503c\u4fe1\u53f7\u3002</li> <li>\u5728\u8ba1\u7b97\u6a21\u578b\u4e2d\uff0c\u662f\u6fc0\u6d3b\u4fe1\u53f7\u7684\u9891\u7387\u5728\u4ea4\u6d41\u4fe1\u606f\uff0c\u56e0\u6b64\u5c06\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u7387\u5efa\u6a21\u4e3aactivation function \\(f\\)\uff0c\u5b83\u8868\u8fbe\u8f74\u7a81\u4e0a\u6fc0\u6d3b\u4fe1\u53f7\u7684\u9891\u7387\u3002</li> </ul> <p>Note</p> <p>\u8be5\u751f\u7269\u795e\u7ecf\u5143\u7684\u5efa\u6a21\u662f\u975e\u5e38\u7c97\u7cd9\u7684\uff0c\u751f\u7269\u795e\u7ecf\u5143\u7684\u6811\u7a81\u53ef\u4ee5\u8fdb\u884c\u590d\u6742\u7684\u975e\u7ebf\u6027\u8ba1\u7b97\u3002\u7a81\u89e6\u5e76\u4e0d\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6743\u91cd\uff0c\u5b83\u4eec\u662f\u590d\u6742\u7684\u975e\u7ebf\u6027\u52a8\u6001\u7cfb\u7edf\uff0cetc.\u8be5\u6a21\u578b\u53ea\u662f\u4e3a\u4e86\u5f15\u5165\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u66f4\u4e3a\u91cd\u8981\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u800c\u975e\u4ecb\u7ecd\u795e\u7ecf\u79d1\u5b66\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#_4","title":"\u4f5c\u4e3a\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u5355\u4e2a\u795e\u7ecf\u5143","text":"<p>\u7531\u795e\u7ecf\u5143\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\u7684\u538b\u7f29\uff0c\u53ef\u89c1\u5b83\u6709\u80fd\u529blike or dislike \u8f93\u5165\u7a7a\u95f4\u7684\u67d0\u4e9b\u7ebf\u6027\u533a\u57df\uff08\u6fc0\u6d3b\u51fd\u6570\u503c\u63a5\u8fd11or0\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5408\u9002\u7684\u635f\u5931\u51fd\u6570\uff0c\u4f7f\u5f97\u5355\u4e2a\u795e\u7ecf\u5143\u53d8\u6210\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\u3002</p> <p>Question</p> <p>\u5728SVM/Softmax\u7684\u4f8b\u5b50\u4e2d\uff0c\u6b63\u5219\u5316\u635f\u5931\u4ece\u751f\u7269\u5b66\u89d2\u5ea6\u53ef\u4ee5\u770b\u505a\u9010\u6e10\u9057\u5fd8\uff0c\u56e0\u4e3a\u5b83\u7684\u6548\u679c\u662f\u8ba9\u6240\u6709\u7a81\u89e6\u6743\u91cdw\u5728\u53c2\u6570\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u9010\u6e10\u5411\u77400\u53d8\u5316\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#neural-network","title":"Neural Network","text":"<ul> <li>(Before) Linear score function: \\(f=Wx,x\\in \\mathbb{R}^D,W\\in \\mathbb{R}^{C\\times D}\\)</li> <li>(Now) 2-layer Neural Network: \\(f=W_2max(0,W_1x), x\\in \\mathbb{R}^D,W_1\\in \\mathbb{R}^{H\\times D}, W_2\\in \\mathbb{R}^{C\\times H}\\)</li> </ul> <p>\u201cNeural Network\u201d is a very broad term; these are more accurately called  \u201cfully-connected networks\u201d or sometimes \u201cmulti-layer perceptrons\u201d (MLP)</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u795e\u7ecf\u7f51\u7edc\u5f15\u5165\u4e86\u975e\u7ebf\u6027\u51fd\u6570\uff08\u5728\u8be5\u4f8b\u4e2d\u662fmax\u51fd\u6570\uff09\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0cWhy do we want non-linearity?</p> <p>\u4e0b\u56fe\u7684\u4f8b\u5b50\u662f\u4e2a\u5f88\u597d\u7684\u89e3\u91ca\uff1a\u6211\u4eec\u5f15\u5165\u975e\u7ebf\u6027\u51fd\u6570\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u975e\u7ebf\u6027\u53d8\u6362\uff0c\u4f7f\u5f97\u6ee1\u8db3\u5176\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u8981\u6c42\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#architectures","title":"Architectures","text":"<ul> <li>\u547d\u540d\u89c4\u5219\uff1a\u5f53\u6211\u4eec\u8bf4N\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u628a\u8f93\u5165\u5c42\u7b97\u5165\u3002</li> </ul> <p>\u7528\u6765\u5ea6\u91cf\u795e\u7ecf\u7f51\u7edc\u7684\u5c3a\u5bf8\u7684\u6807\u51c6\u4e3b\u8981\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f\u795e\u7ecf\u5143\u7684\u4e2a\u6570\uff0c\u53e6\u4e00\u4e2a\u662f\u53c2\u6570\u7684\u4e2a\u6570\u3002</p> <ul> <li>\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6709\\(4+2=6\\) \u4e2a\u795e\u7ecf\u5143\uff0c\\(3\\times 4+4\\times 2=20\\)\u4e2a\u6743\u91cd\uff0c\u8fd8\u6709\\(4+2=6\\)\u4e2abias, \u517126\u4e2a\u53ef\u5b66\u4e60\u53c2\u6570\u3002</li> <li>\u7b2c\u4e8c\u4e2a\u7f51\u7edc\u670941\u4e2a\u53ef\u5b66\u4e60\u53c2\u6570\uff08\u53ef\u81ea\u5df1\u8ba1\u7b97\u9a8c\u8bc1\uff09</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#_5","title":"\u795e\u7ecf\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b","text":"<p>\u6211\u4eec\u53ef\u4ee5\u628a\u795e\u7ecf\u7f51\u7edc\u7406\u89e3\u4e3a\u4e00\u4e2a\u51fd\u6570\u65cf\uff0c\u7f51\u7edc\u7684\u6743\u91cd\u5c31\u662f\u6bcf\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u6211\u4eec\u73b0\u5728\u60f3\u77e5\u9053\u7684\u662f\u8be5\u51fd\u6570\u65cf\u7684\u8868\u8fbe\u80fd\u529b\u3002(\u4e0d\u4e25\u8c28\u7684\u7c7b\u6bd4\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5411\u91cf\u7a7a\u95f4\u7684\u57fa\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5c3d\u53ef\u80fd\u6269\u5f20\u6210\u66f4\u5927\u7684\u7a7a\u95f4)</p> <p>\u53ef\u4ee5\u8bc1\u660e\uff0c\u62e5\u6709\u81f3\u5c11\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u4e00\u4e2a\u901a\u7528\u7684\u8fd1\u4f3c\u5668\uff0c\u5373\u7ed9\u5b9a\u4efb\u610f\u8fde\u7eed\u51fd\u6570\\(f(x)\\)\u548c\u4efb\u610f\\(\\epsilon&gt;0\\), \u5747\u5b58\u5728\u4e00\u4e2a\u81f3\u5c11\u542b\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc \\(g(x)\\) \uff08\u7f51\u7edc\u4e2d\u6709\u5408\u7406\u9009\u62e9\u7684\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff09, \u5bf9\u4e8e\\(\\forall x\\), \u4f7f\u5f97 \\(\\vert f(x)-g(x)\\vert &lt; \\epsilon\\).</p> <p>\u5373\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u8fd1\u4f3c\u4efb\u4f55\u8fde\u7eed\u51fd\u6570\uff0c\u4e14\u6df1\u5c42\u7f51\u7edc\u6548\u679c\u6bd4\u5355\u5c42\u7f51\u7edc\u597d\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#setting-the-number-of-layers-and-their-sizes","title":"Setting the number of layers and their sizes","text":"<p>\u5f53\u6211\u4eec\u589e\u52a0\u5c42\u7684\u6570\u91cf\u548c\u5c3a\u5bf8\u65f6\uff0c\u7f51\u7edc\u7684\u5bb9\u91cf\u4e0a\u5347\uff0c\u5373\u795e\u7ecf\u5143\u4eec\u53ef\u4ee5\u5408\u4f5c\u8868\u8fbe\u8bb8\u591a\u590d\u6742\u51fd\u6570\uff0c\u6240\u4ee5\u8868\u8fbe\u51fd\u6570\u7684\u7a7a\u95f4\u589e\u52a0\u3002\u8003\u8651\u4e00\u4e2a\u5206\u7c7b\u95ee\u9898\uff0c\u8bad\u7ec3\u4e09\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u90fd\u53ea\u6709\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u4f46\u6bcf\u5c42\u795e\u7ecf\u5143\u6570\u76ee\u4e0d\u540c\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5177\u6709\u66f4\u591a\u795e\u7ecf\u5143\u7684\u7f51\u7edc\u663e\u7136\u53ef\u4ee5\u5206\u7c7b\u66f4\u590d\u6742\u7684\u6570\u636e\uff0c\u4f46\u662f\u53ef\u80fd\u9020\u6210\u6570\u636e\u7684\u8fc7\u62df\u5408\uff08\u7f51\u7edc\u5bf9\u6570\u636e\u4e2d\u7684\u566a\u58f0\u6709\u5f88\u5f3a\u7684\u62df\u5408\u80fd\u529b\uff0c\u800c\u6ca1\u6709\u91cd\u89c6\u6570\u636e\u95f4\u7684\u6f5c\u5728\u57fa\u672c\u5173\u7cfb\uff09\u3002\u6b63\u5219\u5316\u5f3a\u5ea6\u63a7\u5236\u53ef\u4ee5\u8f83\u597d\u89e3\u51b3\u8be5\u95ee\u9898\uff1a</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#activation-functions","title":"Activation functions","text":"<p>\u4e0b\u56fe\u662f\u5e38\u89c1\u7684\u6fc0\u6d3b\u51fd\u6570\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#sigmoid","title":"Sigmoid","text":"<p>\u5b83\u8f93\u5165\u5b9e\u6570\u503c\u5e76\u5c06\u5176\u201c\u6324\u538b\u201d\u52300\u52301\u8303\u56f4\u5185\uff0c\u7531\u4e8e\u5b83\u5bf9\u4e8e\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u9891\u7387\u6709\u826f\u597d\u7684\u89e3\u91ca\uff0c\u4ece\u4e0d\u5b8c\u5168\u6fc0\u6d3b\u5230\u5047\u5b9a\u6700\u5927\u9891\u7387\u5904\u7684\u5b8c\u5168\u9971\u548c\u6fc0\u6d3b\u3002\u5728\u5386\u53f2\u4e0a\u975e\u5e38\u5e38\u7528\u3002\u4f46\u662f\u5b83\u6709\u4e24\u4e2a\u7f3a\u70b9\uff1a</p> <ul> <li>\u51fd\u6570\u9971\u548c\u4f7f\u68af\u5ea6\u6d88\u5931\u3002\u5f53\u6fc0\u6d3b\u503c\u63a5\u8fd10\u62161\u65f6\uff0c\u51fd\u6570\u7684\u68af\u5ea6\u51e0\u4e4e\u4e3a\u96f6\uff0c\u800c\u53cd\u5411\u4f20\u64ad\u65f6\uff08\u4e0b\u6587\u4f1a\u63d0\u5230\uff09\u5c40\u90e8\u68af\u5ea6\u4f1a\u4e0e\u6574\u4e2a\u635f\u5931\u51fd\u6570\u5bf9\u4e8e\u8be5\u95e8\u5355\u5143\u7684\u68af\u5ea6\u76f8\u4e58\uff0c\u5219\u5bfc\u81f4\u7ed3\u679c\u63a5\u8fd10\uff0c\u90a3\u4e48\u5c31\u51e0\u4e4e\u6ca1\u6709\u4fe1\u53f7\u901a\u8fc7\u795e\u7ecf\u5143\u4f20\u5230\u6570\u636e\uff0c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u5b66\u4e60\u3002</li> <li>\u51fd\u6570\u8f93\u51fa\u4e0d\u662f\u4ee5\u96f6\u4e3a\u4e2d\u5fc3\u3002\u5982\u679c\u8f93\u5165\u795e\u7ecf\u5143\u7684\u6570\u636e\u603b\u662f\u6b63\u6570\uff0c\u90a3\u4e48\\(w\\)\u7684\u68af\u5ea6\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\u8981\u4e48\u5168\u662f\u6b63\u6570\uff0c\u8981\u4e48\u5168\u662f\u8d1f\u6570\uff0c\u5bfc\u81f4\u6743\u91cd\u66f4\u65b0\u51fa\u73b0Z\u5b57\u578b\u4e0b\u964d\u3002</li> </ul> <p></p>"},{"location":"AI/cv/cs231n/lec4/#relurectified-linear-unit","title":"ReLU(Rectified Linear Unit)","text":"<ul> <li>\u4f18\u70b9\uff1a\u5bf9\u4e8e\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6536\u655b\u6709\u5de8\u5927\u7684\u52a0\u901f\u4f5c\u7528</li> <li>\u7f3a\u70b9\uff1a \u5bf9\u4e8e\u5c0f\u4e8e\u96f6\u7684\u6570\u636e\uff0c\u68af\u5ea6\u4e3a\u96f6\uff0c\u5bfc\u81f4\u4e0d\u53ef\u9006\u8f6c\u7684\u6b7b\u4ea1\uff0c\u800cLeaky ReLU\u662f\u4e3a\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5c1d\u8bd5\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#maxout","title":"Maxout","text":"<p>Maxout\u662f\u5bf9ReLU\u548cLeaky ReLU\u7684\u4e00\u822c\u5316\u5f52\u7eb3\uff0c\u8fd9\u91cc\u62e5\u6709ReLU\u7684\u6240\u6709\u4f18\u70b9\u800c\u4e14\u4e0d\u5177\u5907\u7f3a\u70b9\uff0c\u4f46\u662f\u6574\u4f53\u53c2\u6570\u6570\u91cf\u6fc0\u589e\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#backpropagation","title":"Backpropagation(\u53cd\u5411\u4f20\u64ad)","text":"<p>\u6838\u5fc3\u95ee\u9898\uff1a\u7ed9\u5b9a\u51fd\u6570\\(f(x)\\), \u9700\u8981\u8ba1\u7b97\\(f\\)\u5173\u4e8e\\(x\\)\u7684\u68af\u5ea6\uff0c\u5373\\(\\nabla f(x)\\)</p> <ul> <li>bad idea: derive \\(\\nabla_wL\\) on paper: very tedious</li> <li>better idea: computational graphs + backpropagation</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#_6","title":"\u7b80\u5355\u7684\u8868\u8fbe\u5f0f","text":"<p>\u6211\u4eec\u4ee5\\(f(x,y,z)=(x+y)z\\)\u4e3a\u4f8b\uff0c\u76f4\u89c2\u7406\u89e3\u4e00\u4e0b\u53cd\u5411\u4f20\u64ad\u7684\u601d\u60f3</p> <p>Note</p> <p>\u5bf9\u4e8e\u8be5\u51fd\u6570\uff0c\u663e\u7136\u53ef\u4ee5\u8fdb\u884c\u76f4\u63a5\u5fae\u5206\u3002\u4f46\u76f4\u63a5\u5fae\u5206\u5728\u51fd\u6570\u5f88\u590d\u6742\u65f6\u9700\u8981\u6781\u5927\u7684\u8ba1\u7b97\u91cf\uff0c\u53cd\u5411\u4f20\u64ad\u5219\u6781\u5927\u7b80\u5316\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <p>\u9996\u5148\u5c06\u516c\u5f0f\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\\(q=x+y, f=qz\\), \u53ef\u4ee5\u5f97\u5230 \\(\\frac{\\partial f}{\\partial q}=z, \\frac{\\partial q}{\\partial x}=1\\), \u5e76\u4e14\u7531\u94fe\u5f0f\u6cd5\u5219\uff1a\\(\\frac{\\partial f}{\\partial x}=\\frac{\\partial f}{\\partial q}\\frac{\\partial q}{\\partial x}\\), \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\u3002\u800c\u6574\u4e2a\u8ba1\u7b97\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u5c06\u8f93\u5165\u503c\u6839\u636e\u516c\u5f0f\u524d\u5411\u4f20\u64ad\uff0c\u5f97\u5230\u6700\u7ec8\\(f\\)\u51fd\u6570\u7684\u503c\u3002\u7136\u540e\u7531\\(\\frac{\\partial f}{\\partial f}=1\\)\u5f00\u59cb\u9010\u6b65\u8fd4\u56de\uff0c\u5206\u522b\u8ba1\u7b97\u672c\u5730\u7684\u68af\u5ea6\u503c\uff0c\u76f4\u81f3\u5f97\u5230\u7ed3\u679c\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7684\u793a\u4f8b\u4ee3\u7801\u548c\u8ba1\u7b97\u6d41\u56fe\uff08\u524d\u5411\u4f20\u64ad\u4ece\u8f93\u5165\u8ba1\u7b97\u5230\u8f93\u51fa\uff08\u7eff\u8272\uff09\uff0c\u53cd\u5411\u4f20\u64ad\u4ece\u8f93\u51fa\u8ba1\u7b97\u5230\u8f93\u5165\uff08\u7ea2\u8272\uff09\uff09\u3002</p> <pre><code># set some inputs\nx = -2; y = 5; z = -4\n# perform the forward pass\nq = x + y # q becomes 3\nf = q * z # f becomes -12\n# perform the backward pass (backpropagation) in reverse order:\n# first backprop through f = q * z\ndfdz = q # df/dz = q, so gradient on z becomes 3\ndfdq = z # df/dq = z, so gradient on q becomes -4\ndqdx = 1.0\ndqdy = 1.0\n# now backprop through q = x + y\ndfdx = dfdq * dqdx  # The multiplication here is the chain rule!\ndfdy = dfdq * dqdy  \n</code></pre> <p></p> <p>\u5728\u6574\u4e2a\u8ba1\u7b97\u7ebf\u8def\u56fe\u4e2d\uff0c\u6bcf\u4e2a\u95e8\u5355\u5143\u90fd\u4f1a\u5f97\u5230\u8f93\u5165\u5e76\u7acb\u5373\u8ba1\u7b97\uff1a</p> <ul> <li>\u8be5\u5355\u5143\u7684\u5c40\u90e8\u68af\u5ea6</li> <li>\u5c40\u90e8\u68af\u5ea6\u4e58\u4ee5\u8f93\u5165\u503c\uff0c\u5f97\u5230\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u5bf9\u4e8e\u8be5\u5355\u5143\u7684\u68af\u5ea6</li> </ul> <p>\u8fd9\u91cc\u5c06\u5c40\u90e8\u68af\u5ea6\u4e0e\u6bcf\u4e2a\u8f93\u5165\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u662f\u57fa\u4e8e\u94fe\u5f0f\u6cd5\u5219\u3002\u8be5\u64cd\u4f5c\u8ba9\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u5355\u5143\u53d8\u6210\u590d\u6742\u8ba1\u7b97\u7ebf\u8def\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u53cd\u5411\u4f20\u64ad\u53ef\u4ee5\u770b\u505a\u662f\u95e8\u5355\u5143\u4e4b\u95f4\u5728\u901a\u8fc7\u68af\u5ea6\u4fe1\u53f7\u76f8\u4e92\u901a\u4fe1\uff0c\u53ea\u8981\u8ba9\u5b83\u4eec\u7684\u8f93\u5165\u6cbf\u7740\u68af\u5ea6\u65b9\u5411\u53d8\u5316\uff0c\u65e0\u8bba\u5b83\u4eec\u81ea\u5df1\u7684\u8f93\u51fa\u503c\u5728\u4f55\u79cd\u7a0b\u5ea6\u4e0a\u5347\u6216\u964d\u4f4e\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u503c\u66f4\u9ad8\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#sigmoid-example","title":"Sigmoid example","text":"<p>\\(f(w,x)=\\frac{1}{1+e^{\\neg(w_0x_0+w_1x_1+w2)}}\\)</p> <p>\u8fd9\u662f\u4f7f\u7528sigmoid\u6fc0\u6d3b\u51fd\u6570\u7684\u4e8c\u7ef4\u795e\u7ecf\u5143\uff1a\u8f93\u5165\u662f\\([x_0,x_1]\\), \u53ef\u5b66\u4e60\u7684\u6743\u91cd\u662f\\([w_o,w_1,w_2]\\)\u3002\u8be5\u795e\u7ecf\u5143\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5185\u79ef\uff0c\u7136\u540e\u5176\u6570\u636e\u88absigmoid\u51fd\u6570\u538b\u7f29\u81f3\\([0,1]\\)\u533a\u95f4\u3002</p> <p>\u6ce8\u610f\u5230sigmoid\u51fd\u6570\u7684\u5fae\u5206\u662f\u53ef\u4ee5\u7b80\u5316\uff1a $$ \\frac{d\\sigma(x)}{dx}=(1-\\sigma(x))\\sigma(x) $$ \u56e0\u6b64\u53ef\u4ee5\u5c06\u4e2d\u95f4\u7684\u6d41\u7a0b\u88c5\u8fdb\u4e00\u4e2a\u72ec\u7acb\u7684\u95e8\u5355\u5143\uff0c\u5927\u5927\u7b80\u5316\u8ba1\u7b97\uff1a</p> <pre><code>w = [2,-3,-3] # assume some random weights and data\nx = [-1, -2]\n# forward pass\ndot = w[0]*x[0] + w[1]*x[1] + w[2]\nf = 1.0 / (1 + math.exp(-dot)) # sigmoid function\n# backward pass through the neuron (backpropagation)\nddot = (1 - f) * f # gradient on dot variable, using the sigmoid gradient derivation\ndx = [w[0] * ddot, w[1] * ddot] # backprop into x\ndw = [x[0] * ddot, x[1] * ddot, 1.0 * ddot] # backprop into w\n# we're done! we have the gradients on the inputs to the circuit\n</code></pre> <p></p>"},{"location":"AI/cv/cs231n/lec4/#_7","title":"\u77e9\u9635\u4e58\u6cd5\u7684\u68af\u5ea6","text":"<pre><code># forward pass\nW = np.random.randn(5, 10)\nX = np.random.randn(10, 3)\nD = W.dot(X)\n# now suppose we had the gradient on D from above in the circuit\ndD = np.random.randn(*D.shape) # same shape as D\ndW = dD.dot(X.T) #.T gives the transpose of the matrix\ndX = W.T.dot(dD)\n</code></pre> <p>Note</p> <p>quite tricky,\u5728\u64cd\u4f5c\u65f6\u8981\u6ce8\u610f\u8f6c\u7f6e\u64cd\u4f5c\u3002\u53ef\u4ee5\u4f7f\u7528\u5206\u6790\u7ef4\u5ea6\u7684\u65b9\u6cd5\u3002</p>"},{"location":"AI/cv/cs231n/lec5/","title":"Lec5: Image Classification with CNNs","text":"<p> \u7ea6 639 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#overview","title":"Overview","text":"<p>\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u662f\u5168\u8fde\u63a5\u7684\uff0c\u5bf9\u4e8e\u5927\u5c3a\u5bf8\u56fe\u50cf\u6548\u679c\u4e0d\u597d\u3002\u800c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u9488\u5bf9\u8f93\u5165\u5168\u90e8\u662f\u56fe\u50cf\u7684\u60c5\u51b5\uff0c\u5c06\u7ed3\u6784\u8c03\u6574\u5f97\u66f4\u52a0\u5408\u7406\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u53ea\u4e0e\u524d\u4e00\u5c42\u4e2d\u7684\u4e00\u5c0f\u5757\u533a\u57df\u8fde\u63a5\uff0c\u6700\u540e\u7684\u8bc4\u5206\u5411\u91cf\u662f\u5728\u6df1\u5ea6\u65b9\u5411\u6392\u5217\u7684\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#_1","title":"\u5177\u4f53\u7ed3\u6784","text":"<p>\u4e3b\u8981\u7531\u5377\u79ef\u5c42\uff0c\u6c60\u5316\u5c42\uff0c\u5168\u8fde\u63a5\u5c42\u6784\u6210\uff0c\u901a\u8fc7\u5c06\u8fd9\u4e9b\u5c42\u53e0\u52a0\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc</p>"},{"location":"AI/cv/cs231n/lec5/#_2","title":"\u5377\u79ef\u5c42","text":""},{"location":"AI/cv/cs231n/lec5/#introduction","title":"introduction","text":"<p>\u5377\u79ef\u5c42\u662f\u6784\u5efa\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u6838\u5fc3\u5c42\uff0c\u5b83\u4ea7\u751f\u4e86\u7f51\u7edc\u4e2d\u5927\u90e8\u5206\u7684\u8ba1\u7b97\u91cf</p> <ul> <li>\u5377\u79ef\u5c42\u7684\u53c2\u6570\u662f\u7531\u4e00\u4e9b\u53ef\u5b66\u4e60\u7684\u6ee4\u6ce2\u5668\uff08\u4e5f\u79f0\u8be5\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\uff09\u96c6\u5408\u6784\u6210\u7684</li> <li>\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5728\u7a7a\u95f4\u4e0a\u90fd\u6bd4\u8f83\u5c0f\uff0c\u4f46\u662f\u6df1\u5ea6\u4e0e\u8f93\u5165\u4e00\u81f4\u3002</li> <li>\u5728\u524d\u5411\u4f20\u64ad\u65f6\uff0c\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u4e0e\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5377\u79ef\uff0c\u751f\u6210\u4e00\u4e2a\u4e8c\u7ef4\u7684activation map\u3002</li> <li>\u5728\u6bcf\u4e2a\u5377\u79ef\u5c42\u4e0a\uff0c\u6709\u4e00\u6574\u4e2a\u96c6\u5408\u7684\u6ee4\u6ce2\u5668\uff0c\u6240\u6709\u6ee4\u6ce2\u5668\u7684\u6fc0\u6d3b\u6620\u5c04\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\u5806\u53e0\u8d77\u6765\u5c31\u751f\u6210\u4e86\u8be5\u5c42\u7684\u8f93\u51fa\u6570\u636e\u3002</li> </ul> <p>The brain view. If you\u2019re a fan of the brain/neuron analogies, every entry in the 3D output volume can also be interpreted as an output of a neuron that looks at only a small region in the input and shares parameters with all neurons to the left and right spatially (since these numbers all result from applying the same filter).</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#spaital-arrangment","title":"spaital arrangment","text":"<p>\u67093\u4e2a\u8d85\u53c2\u63a7\u5236\u7740\u8f93\u51fa\u7684\u5927\u5c0f\uff1adepth, stirde, zero-padding</p> <ul> <li>depth: \u4e0e\u4f7f\u7528\u7684filter\u7684\u6570\u91cf\u4e00\u81f4</li> <li>stirde: \u6ed1\u52a8\u6ee4\u6ce2\u5668\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b65\u957f\uff08\u6bcf\u6b21\u79fb\u52a8\u7684\u50cf\u7d20\u4e2a\u6570\uff09</li> <li>zero-padding\uff1a\u7528\u6765\u4fdd\u6301\u8f93\u5165\u6570\u636e\u5728\u7a7a\u95f4\u4e0a\u5c3a\u5bf8\u7684trick</li> </ul>"},{"location":"AI/cv/cs231n/lec5/#summary","title":"Summary","text":"<p>input: \\(W_1\\times H_1\\times C\\)</p> <p>hyperparameters:</p> <ul> <li>Number of filters \\(K\\)</li> <li>The filter size \\(F\\)</li> <li>The stride \\(S\\)</li> <li>The zero-padding \\(P\\)</li> </ul> <p>Output: \\(W_2\\times H_2\\times K\\)</p> <ul> <li>\\(W_2=(W_1-F+2P)/S+1\\)</li> <li>\\(H_2=(H_1-F+2P)/S+1\\)</li> </ul> <p>Number of parameters: \\(F^2CK+K\\) </p>"},{"location":"AI/cv/cs231n/lec5/#_3","title":"\u6c60\u5316\u5c42","text":"<p>\u901a\u5e38\uff0c\u5728\u8fde\u7eed\u7684\u5377\u79ef\u5c42\u4e4b\u95f4\u4f1a\u5468\u671f\u6027\u63d2\u5165\u6c60\u5316\u5c42\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9010\u6e10\u964d\u4f4e\u6570\u636e\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4ee5\u51cf\u5c11\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u6570\u91cf\uff0c\u540c\u65f6\u6709\u6548\u63a7\u5236\u8fc7\u62df\u5408\u73b0\u8c61\u3002</p> <p>\u6c60\u5316\u5c42\u5bf9\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u5207\u7247\u72ec\u7acb\u8fdb\u884cmax\u64cd\u4f5c\uff0c\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528\\(2\\times 2\\)\u7684\u6ee4\u6ce2\u5668\uff0c\u4ee5\u6b65\u957f\u4e3a2\u5bf9\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u964d\u91c7\u6837\uff0c\u4e22\u5f0375%\u7684\u6fc0\u6d3b\u4fe1\u606f\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#_4","title":"\u5168\u8fde\u63a5\u5c42","text":"<p>\u4e0e\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u4e00\u6837\uff0c\u795e\u7ecf\u5143\u5bf9\u4e8e\u524d\u4e00\u5c42\u7684\u6240\u6709\u6fc0\u6d3b\u6570\u636e\u662f\u5168\u90e8\u8fde\u63a5\u7684</p>"},{"location":"AI/cv/cs231n/lec6/","title":"Lec6: Training Neural Networks(I)","text":"<p> \u7ea6 1110 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec6/#activation-functions","title":"Activation Functions","text":""},{"location":"AI/cv/cs231n/lec6/#sigmoid","title":"Sigmoid","text":"<p>\u5b83\u8f93\u5165\u5b9e\u6570\u503c\u5e76\u5c06\u5176\u201c\u6324\u538b\u201d\u52300\u52301\u8303\u56f4\u5185\uff0c\u7531\u4e8e\u5b83\u5bf9\u4e8e\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u9891\u7387\u6709\u826f\u597d\u7684\u89e3\u91ca\uff0c\u4ece\u4e0d\u5b8c\u5168\u6fc0\u6d3b\u5230\u5047\u5b9a\u6700\u5927\u9891\u7387\u5904\u7684\u5b8c\u5168\u9971\u548c\u6fc0\u6d3b\u3002\u5728\u5386\u53f2\u4e0a\u975e\u5e38\u5e38\u7528\u3002\u4f46\u662f\u5b83\u6709\u4e24\u4e2a\u7f3a\u70b9\uff1a</p> <ul> <li>\u51fd\u6570\u9971\u548c\u4f7f\u68af\u5ea6\u6d88\u5931\u3002\u5f53\u6fc0\u6d3b\u503c\u63a5\u8fd10\u62161\u65f6\uff0c\u51fd\u6570\u7684\u68af\u5ea6\u51e0\u4e4e\u4e3a\u96f6\uff0c\u800c\u53cd\u5411\u4f20\u64ad\u65f6\uff08\u4e0b\u6587\u4f1a\u63d0\u5230\uff09\u5c40\u90e8\u68af\u5ea6\u4f1a\u4e0e\u6574\u4e2a\u635f\u5931\u51fd\u6570\u5bf9\u4e8e\u8be5\u95e8\u5355\u5143\u7684\u68af\u5ea6\u76f8\u4e58\uff0c\u5219\u5bfc\u81f4\u7ed3\u679c\u63a5\u8fd10\uff0c\u90a3\u4e48\u5c31\u51e0\u4e4e\u6ca1\u6709\u4fe1\u53f7\u901a\u8fc7\u795e\u7ecf\u5143\u4f20\u5230\u6570\u636e\uff0c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u5b66\u4e60\u3002</li> <li>\u51fd\u6570\u8f93\u51fa\u4e0d\u662f\u4ee5\u96f6\u4e3a\u4e2d\u5fc3\u3002\u5982\u679c\u8f93\u5165\u795e\u7ecf\u5143\u7684\u6570\u636e\u603b\u662f\u6b63\u6570\uff0c\u90a3\u4e48\\(w\\)\u7684\u68af\u5ea6\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\u8981\u4e48\u5168\u662f\u6b63\u6570\uff0c\u8981\u4e48\u5168\u662f\u8d1f\u6570\uff0c\u5bfc\u81f4\u6743\u91cd\u66f4\u65b0\u51fa\u73b0Z\u5b57\u578b\u4e0b\u964d\u3002</li> </ul> <p></p>"},{"location":"AI/cv/cs231n/lec6/#tanh","title":"tanh","text":"<p>\u5c06\u5b9e\u6570\u503c\u538b\u7f29\u5230\\([-1,1]\\)\u4e4b\u95f4\uff0c\u4e0esigmoid\u4e00\u6837\uff0ctanh\u4e5f\u5b58\u5728\u9971\u548c\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u7684\u8f93\u51fa\u662f\u96f6\u4e2d\u5fc3\u7684\u3002</p>"},{"location":"AI/cv/cs231n/lec6/#relurectified-linear-unit","title":"ReLU(Rectified Linear Unit)","text":"<p>\\(f(x)=max(0,x)\\)</p> <ul> <li>\u4f18\u70b9\uff1a\u5bf9\u4e8e\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6536\u655b\u6709\u5de8\u5927\u7684\u52a0\u901f\u4f5c\u7528\uff0c\u6bd4sigmoid\u548ctanh\u5feb6\u500d\u4e4b\u591a</li> <li>\u7f3a\u70b9\uff1a \u5bf9\u4e8e\u5c0f\u4e8e\u96f6\u7684\u6570\u636e\uff0c\u68af\u5ea6\u4e3a\u96f6\uff0c\u5bfc\u81f4\u4e0d\u53ef\u9006\u8f6c\u7684\u6b7b\u4ea1\uff0c\u5bfc\u81f4\u6570\u636e\u591a\u6837\u5316\u7684\u4e22\u5931\u3002\u800cLeaky ReLU\u662f\u4e3a\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5c1d\u8bd5\uff0c\u4f46\u6548\u679c\u4e0d\u662f\u5f88\u7a33\u5b9a\u3002\u901a\u8fc7\u5408\u7406\u8bbe\u7f6e\u5b66\u4e60\u7387\uff0c\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u4f1a\u964d\u4f4e\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec6/#maxout","title":"Maxout","text":"<p>Maxout\u662f\u5bf9ReLU\u548cLeaky ReLU\u7684\u4e00\u822c\u5316\u5f52\u7eb3\uff0c\u8fd9\u91cc\u62e5\u6709ReLU\u7684\u6240\u6709\u4f18\u70b9\u800c\u4e14\u4e0d\u5177\u5907\u7f3a\u70b9\uff0c\u4f46\u662f\u6574\u4f53\u53c2\u6570\u6570\u91cf\u6fc0\u589e\u3002</p> <p>\u5b9e\u9645\u5e94\u7528tips:</p> <ul> <li>\u4f7f\u7528ReLU\u51fd\u6570\u3002\u6ce8\u610f\u8bbe\u7f6e\u597d\u5b66\u4e60\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u76d1\u63a7\u7f51\u7edc\u4e2d\u6b7b\u4ea1\u7684\u795e\u7ecf\u5143\u6bd4\u4f8b.</li> <li>\u5982\u679c\u4e0d\u5b66\u4e60\u95ee\u9898\u56f0\u6270\uff0c\u53ef\u4ee5\u8bd5\u8bd5Leaky ReLU\u6216\u8005Maxout\uff0c\u4e0d\u8981\u7528Sigmoid.</li> </ul>"},{"location":"AI/cv/cs231n/lec6/#data-preprocessing","title":"Data Preprocessing","text":"<p>\u5047\u8bbe\u6570\u636e\u77e9\u9635\\(X\\), \u5927\u5c0f\u4e3a\\([N\\times D]\\), (\\(N\\) \u662f\u6570\u636e\u6837\u672c\u7684\u6570\u91cf\uff0c\\(D\\) \u662f\u6570\u636e\u7684\u7ef4\u5ea6)</p>"},{"location":"AI/cv/cs231n/lec6/#_1","title":"\u51cf\u5747\u503c+\u5f52\u4e00\u5316","text":"<p>\u9996\u5148\u56de\u987e\u5728\u6fc0\u6d3b\u51fd\u6570\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u63d0\u5230sigmoid\u51fd\u6570\u7684\u7f3a\u70b9\u5c31\u662f\u4e0d\u4ee5\u96f6\u4e3a\u4e2d\u5fc3\uff0c\u5047\u8bbe\u795e\u7ecf\u5143\u7684\u8f93\u5165\u5168\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u68af\u5ea6\u4e0b\u964d\u7684\u4f18\u5316\u5c31\u4f1a\u51fa\u73b0zigzag\u7684\u73b0\u8c61\uff0c\u6548\u7387\u6781\u4f4e\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u72ec\u7acb\u7279\u5f81\u51cf\u53bb\u5e73\u5747\u503c\uff0c\u4ece\u51e0\u4f55\u4e0a\u7406\u89e3\u5c31\u662f\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u90fd\u5c06\u6570\u636e\u7684\u4e2d\u5fc3\u79fb\u5230\u539f\u70b9\u3002\u518d\u8fd9\u4e4b\u540e\u5c06\u6570\u636e\u7684\u6240\u6709\u7ef4\u5ea6\u5f52\u4e00\u5316\uff0c\u4f7f\u5176\u6570\u503c\u8303\u56f4\u8fd1\u4f3c\u76f8\u7b49\u3002\u800c\u5f52\u4e00\u5316\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li>\u5148\u5bf9\u6570\u636e\u505azero-centered\u5904\u7406\uff0c\u7136\u540e\u6bcf\u4e2a\u7ef4\u5ea6\u9664\u4ee5\u6807\u51c6\u5dee</li> <li>\u6bcf\u4e2a\u7ef4\u5ea6\u90fd\u505a\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7ef4\u5ea6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5206\u522b\u4e3a-1\u548c1</li> </ul> <p></p> <p>\u5747\u503c\u5904\u7406\u7684\u53e6\u4e00\u4e2a\u4f18\u70b9\u5c31\u5728\u4e8e\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\u7ebf\u6027\u5206\u7c7b\u5668\u5bf9\u4e8e\u5fae\u5c0f\u7684\u6743\u91cd\u53d8\u6362\u4e0d\u90a3\u4e48\u654f\u611f\uff0c\u4f7f\u5f97\u6574\u4e2a\u7f51\u7edc\u80fd\u591f\u66f4\u597d\u7684\u4f18\u5316\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec6/#pca-and-whitening","title":"PCA and  Whitening","text":"<p>Question</p> <p>\u6211\u5bf9PCA\u8fc7\u7a0b\u7684\u7406\u89e3\u8fd8\u4e0d\u662f\u5f88\u900f\u5f7b\uff0c\u4e0d\u592a\u7406\u89e3\u5176\u4e2d\u534f\u65b9\u5dee\u77e9\u9635\u7684\u5177\u4f53\u542b\u4e49</p> <p>Note</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4efb\u4f55\u9884\u5904\u7406\u64cd\u4f5c\u90fd\u53ea\u80fd\u5728\u8bad\u7ec3\u96c6\u6570\u636e\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e94\u8be5\u5148\u5c06\u6574\u4e2a\u6570\u636e\u96c6\u5206\u6210\u8bad\u7ec3/\u9a8c\u8bc1/\u6d4b\u8bd5\u96c6\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u6c42\u51fa\u5747\u503c\uff0c\u518d\u5728\u5404\u4e2a\u96c6\u5408\u7684\u56fe\u50cf\u4e2d\u51cf\u53bb\u5e73\u5747\u503c\u3002</p>"},{"location":"AI/cv/cs231n/lec6/#weight-initialization","title":"Weight Initialization","text":"<p>\u5728\u5f00\u59cb\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u521d\u59cb\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570</p>"},{"location":"AI/cv/cs231n/lec6/#idea","title":"\u4e00\u4e9b\u9519\u8bef\u7684idea","text":"<ul> <li>\u5168\u96f6\u521d\u59cb\u5316\uff1a\u4f7f\u5f97\u6240\u6709\u795e\u7ecf\u5143\u90fd\u4e00\u6a21\u4e00\u6837</li> <li>\u5c0f\u968f\u673a\u6570\u521d\u59cb\u5316\uff1a<code>W=0.01*np.random.randn(D,H)</code>, \u8fd9\u4e2a\u65b9\u6cd5\u5bf9\u4e8e\u5c0f\u89c4\u6a21\u7684\u7f51\u7edc\u662f\u53ef\u53d6\u7684\uff0c\u4f46\u662f\u5728\u5927\u89c4\u6a21\u7684\u6df1\u5ea6\u7f51\u7edc\u4e0a\uff0c\u968f\u7740\u5c42\u7684\u6df1\u5165\uff0c\u6240\u6709\u6fc0\u6d3b\u503c\u90fd\u8d8b\u5411\u4e8e\u96f6\uff0c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u5b66\u4e60\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec6/#_2","title":"\u53ef\u53d6\u7684\u65b9\u6cd5","text":""},{"location":"AI/cv/cs231n/lec6/#xavier-initalization","title":"Xavier Initalization","text":"<p>\u4f7f\u7528<code>1/sqrt(Din)</code>\u7684\u65b9\u6cd5\u6821\u51c6\u65b9\u5dee\u3002\u53ef\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u4e2d\u7684\u795e\u7ecf\u5143\u6709\u8fd1\u4f3c\u7684\u8f93\u51fa\u5206\u5e03\uff0c\u63d0\u9ad8\u6536\u655b\u7684\u901f\u5ea6 (\u5bf9\u4e8e\u5377\u79ef\u5c42\uff0cdin\u662f\u5377\u79ef\u6838\u7684\u7ef4\u5ea6</p> <p>Note</p> <p>\u8be5\u65b9\u6cd5\u7684\u8bc1\u660e\u5c06\u5728\u6211\u5b66\u5b8c\u6982\u7387\u8bba\u4e4b\u540e\u8865\u4e0a</p>"},{"location":"AI/cv/cs231n/lec6/#batch-normalization","title":"Batch Normalization","text":"<p>\u6211\u4eec\u5e0c\u671b\u6bcf\u4e00\u5c42\u7f51\u7edc\u7684\u8f93\u5165\u8f93\u51fa\u90fd\u8fd1\u4f3c\u7b26\u5408\u6807\u51c6\u9ad8\u65af\u5206\u5e03\u3002</p> <p>\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\uff1a\\(\\hat{x}^{(k)}=\\frac{x^{k}-E[x^{(k)}]}{\\sqrt{Var[x^{(k)}]}}\\)</p> <p></p>"},{"location":"AI/cv/cs231n/lec7/","title":"Lec7: Training Neural Network(II)","text":"<p> \u7ea6 1065 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec7/#better-optimization","title":"Better Optimization","text":""},{"location":"AI/cv/cs231n/lec7/#bgd","title":"\u6279\u68af\u5ea6\u4e0b\u964d(BGD)","text":"<p>\u5728\u8bad\u7ec3\u4e2d\u6bcf\u4e00\u6b65\u8fed\u4ee3\u90fd\u4f7f\u7528\u8bad\u7ec3\u96c6\u7684\u6240\u6709\u5185\u5bb9\\(\\left\\{x_1,\\cdots,x_n\\right\\}\\)\u4ee5\u53ca\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u8f93\u51fa\\(y_i\\),\u7528\u4e8e\u8ba1\u7b97\u635f\u5931\u548c\u68af\u5ea6\u7136\u540e\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u66f4\u65b0\u53c2\u6570</p> <p>\u7f3a\u70b9\u662f\u968f\u7740\u6570\u636e\u96c6\u7684\u589e\u5927\uff0c\u8fd0\u884c\u901f\u5ea6\u53d8\u6162</p>"},{"location":"AI/cv/cs231n/lec7/#sgd","title":"\u968f\u673a\u68af\u5ea6\u4e0b\u964d(SGD)","text":"<p>\u6bcf\u6b21\u8fed\u4ee3\u968f\u673a\u62bd\u53d6\u4e00\u6279\u6837\u672c\u4ee5\u53ca\\(y_i\\),\u4ee5\u6b64\u6765\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u51fa\u68af\u5ea6\uff0c\u7136\u540e\u5411\u8d1f\u68af\u5ea6\u65b9\u5411\u66f4\u65b0\u53c2\u6570</p> <p>\u7f3a\u70b9\uff1a - \u5982\u679c\u635f\u5931\u51fd\u6570\u5728\u4e00\u4e2a\u53c2\u6570\u65b9\u5411\u4e0b\u964d\u7684\u5feb\uff0c\u5728\u53e6\u4e00\u4e2a\u65b9\u5411\u4e0b\u964d\u5f97\u6162\uff0c\u4f1a\u5bfc\u81f4zigzag,\u8fd9\u5728\u9ad8\u7ef4\u4e2d\u975e\u5e38\u666e\u904d</p> <p></p> <ul> <li>\u5982\u679c\u635f\u5931\u51fd\u6570\u6709\u5c40\u90e8\u6781\u5c0f\u503c\u6216\u8005\u978d\u70b9\uff0c\u6b64\u65f6\u68af\u5ea6\u4e3a\u96f6\uff0c\u53c2\u6570\u66f4\u65b0\u4f1aget stuck.\u800c\u978d\u70b9\u5728\u9ad8\u7ef4\u4e2d\u975e\u5e38\u5e38\u89c1</li> </ul> <p></p> <ul> <li>\u6211\u4eec\u7684\u68af\u5ea6\u6765\u81ea\u5c0f\u6279\u91cf\u6570\u636e\uff0c\u53ef\u80fd\u4ea7\u751f\u566a\u58f0\uff0c\u4f1a\u5bfc\u81f4\u4e0b\u964d\u7684\u8def\u7ebf\u5f88\u66f2\u6298\uff0c\u6536\u655b\u8f83\u6162</li> </ul>"},{"location":"AI/cv/cs231n/lec7/#momentum","title":"\u52a8\u91cf(Momentum)\u66f4\u65b0","text":"<p>\u635f\u5931\u503c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c71\u7684\u9ad8\u5ea6(\u9ad8\u5ea6\u52bf\u80fd\\(U=mgh\\)),\u7528\u968f\u673a\u6570\u5b57\u521d\u59cb\u5316\u53c2\u6570\u7b49\u540c\u4e8e\u5728\u67d0\u4e2a\u4f4d\u7f6e\u7ed9\u8d28\u70b9\u8bbe\u5b9a\u521d\u59cb\u901f\u5ea6\u4e3a0\uff0c\u6700\u4f18\u5316\u8fc7\u7a0b\u53ef\u4ee5\u770b\u4f5c\u662f\u53c2\u6570\u5411\u91cf\u6eda\u52a8\u7684\u8fc7\u7a0b\uff0c\u800c\u5b83\u6eda\u52a8\u7684\u529b\u6765\u6e90\u4e8e\u52bf\u80fd\\(F=-\\nabla U\\)</p> <p>\u5728 SGD \u4e2d\uff0c\u68af\u5ea6\u76f4\u63a5\u5f71\u54cd\u8d28\u70b9\u7684\u4f4d\u7f6e\uff0c\u5728\u68af\u5ea6\u4e3a0\u7684\u5730\u65b9\uff0c\u4f4d\u7f6e\u5c31\u4e0d\u4f1a\u66f4\u65b0\u4e86\uff1b\u800c\u5728\u8fd9\u91cc\uff0c\u68af\u5ea6\u4f5c\u4e3a\u4f5c\u7528\u529b\u5f71\u54cd\u7684\u662f\u901f\u5ea6\uff0c\u901f\u5ea6\u518d\u6539\u53d8\u4f4d\u7f6e\uff0c\u5373\u4f7f\u68af\u5ea6\u4e3a0 \uff0c\u4f46\u4e4b\u524d\u68af\u5ea6\u7d2f\u79ef\u4e0b\u6765\u7684\u901f\u5ea6\u8fd8\u5728\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e00\u4e2a\u7269\u4f53\u7684\u52a8\u91cf\u6307\u7684\u662f\u8fd9\u4e2a\u7269\u4f53\u5728\u5b83\u8fd0\u52a8\u65b9\u5411\u4e0a\u4fdd\u6301\u8fd0\u52a8\u7684\u8d8b\u52bf\uff0c\u6240\u4ee5\u6b64\u65f6\u8d28\u70b9\u8fd8\u662f\u6709\u52a8\u91cf\u7684\uff0c\u4f4d\u7f6e\u4ecd\u7136\u4f1a\u66f4\u65b0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51b2\u51fa\u5c40\u90e8\u6700\u5c0f\u503c\u6216\u978d\u70b9\uff0c\u7ee7\u7eed\u66f4\u65b0\u53c2\u6570\u3002\u4f46\u662f\u5fc5\u987b\u8981\u7ed9\u8d28\u70b9\u7684\u901f\u5ea6\u4e00\u4e2a\u8870\u51cf\u7cfb\u6570\u6216\u8005\u662f\u6469\u64e6\u7cfb\u6570\uff0c\u4e0d\u7136\u56e0\u4e3a\u80fd\u91cf\u5b88\u6052\uff0c\u8d28\u70b9\u5728\u8c37\u5e95\u4f1a\u4e0d\u505c\u7684\u8fd0\u52a8.</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u53c2\u6570\u66f4\u65b0\u7684\u65b9\u5411\uff0c\u4e0d\u4ec5\u7531\u5f53\u524d\u70b9\u7684\u68af\u5ea6\u65b9\u5411\u51b3\u5b9a\uff0c\u800c\u4e14\u8fd8\u53d7\u6b64\u524d\u7d2f\u79ef\u7684\u68af\u5ea6\u65b9\u5411\u5f71\u54cd!</p> <p></p> <p></p> \u76f4\u89c2\u7406\u89e3 <p></p>"},{"location":"AI/cv/cs231n/lec7/#nesterov-momentum","title":"Nesterov Momentum","text":"<p>Nesterov\u52a8\u91cf\u66f4\u65b0\u662f\u65e2\u7136\u6211\u4eec\u77e5\u9053\u52a8\u91cf\u5c06\u4f1a\u5c06\u8d28\u70b9\u5e26\u5230\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\uff08\u5373\u5411\u524d\u770b\uff09\uff0c\u6211\u4eec\u5c31\u4e0d\u8981\u5728\u539f\u6765\u7684\u4f4d\u7f6e\u8ba1\u7b97\u68af\u5ea6\u4e86\uff0c\u5728\u8fd9\u4e2a\u300c\u5411\u524d\u770b\u300d\u7684\u5730\u65b9\u8ba1\u7b97\u68af\u5ea6\uff0c\u66f4\u65b0\u53c2\u6570\u3002 $$ v_{t+1}=\\rho v_t-\\alpha\\nabla f(x_t+\\rho v_t)\\ x_{t+1}=x_t+v_{t+1} $$ Usually we want update in terms of \\(\\nabla f(x_t)\\)</p> <p>We do this by changing of variables \\(\\tilde{x}_t=x_t+\\rho v_t\\)</p> \\[ v_{t+1}=\\rho v_t-\\alpha \\nabla f(\\tilde{x}_t)\\\\\\tilde{x}_{t+1}=\\tilde{x}_t-\\rho v_t+(1+\\rho)v_{t+1}=\\tilde{x}_t+v_{t+1}+\\rho(v_{t+1}-v_t) \\]"},{"location":"AI/cv/cs231n/lec7/#adagrad","title":"Adagrad(\u81ea\u9002\u5e94\u68af\u5ea6\u7b97\u6cd5)","text":"<p>\u4e0a\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u5bf9\u4e8e\u6240\u6709\u53c2\u6570\u90fd\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u66f4\u65b0\u901f\u7387\uff0c\u4f46\u662f\u540c\u4e00\u4e2a\u66f4\u65b0\u901f\u7387\u4e0d\u4e00\u5b9a\u9002\u5408\u6240\u6709\u53c2\u6570\u3002\u5982\u679c\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u53c2\u6570\u8bbe\u7f6e\u5404\u81ea\u7684\u5b66\u4e60\u7387\u53ef\u80fd\u4f1a\u66f4\u597d\uff0c\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\u3002</p>"},{"location":"AI/cv/cs231n/lec7/#transfer-learning","title":"Transfer Learning","text":"<p>\u53e6\u4e00\u4e2a\u5bfc\u81f4\u8fc7\u62df\u5408\u7684\u539f\u56e0\u53ef\u80fd\u662f\u8bad\u7ec3\u6837\u672c\u8fc7\u5c11\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\u6765\u89e3\u51b3\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528\u5f88\u5c11\u7684\u6570\u636e\u6765\u8bad\u7ec3CNN</p>"},{"location":"AI/cv/cs231n/lec7/#_1","title":"\u4e3b\u8981\u601d\u60f3","text":"<ul> <li>\u5728\u5927\u91cf\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u4e00\u4e2aCNN\uff0c\u5f97\u5230\u6a21\u578b(\u6bd4\u5982ImageNet,1000\u4e2a\u5206\u7c7b)</li> <li>\u4f7f\u7528\u4e00\u4e2a\u5c11\u91cf\u6570\u636e\u96c6\uff0c\u6700\u540e\u9700\u8981\u5f97\u5230\u7684\u5206\u7c7b\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u503c\\(C\\),\u6bd4\u5982\u8bf410.\u8fd9\u65f6\u6700\u540e\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u7684\u53c2\u6570\u77e9\u9635\u53d8\u4e3a\\(4096\\times C\\)\uff0c\u521d\u59cb\u5316\u8fd9\u4e2a\u77e9\u9635\uff0c\u91cd\u65b0\u8bad\u7ec3\u8fd9\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u4fdd\u6301\u524d\u9762\u7684\u6240\u6709\u5c42\u4e0d\u53d8(\u524d\u9762\u7684\u5c42\u5df2\u7ecf\u8bad\u7ec3\u597d\uff0c\u5177\u6709\u6cdb\u5316\u80fd\u529b)</li> <li>\u5f53\u5f97\u5230\u8f83\u591a\u7684\u8bad\u7ec3\u96c6\u540e\uff0c\u8bad\u7ec3\u7684\u5c42\u6570\u53ef\u4ee5\u589e\u591a\uff0c\u6bd4\u5982\u53ef\u4ee5\u8bad\u7ec3\u6700\u540e\u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u4f7f\u7528\u8f83\u4f4e\u7684\u5b66\u4e60\u7387\u5fae\u8c03\u53c2\u6570\u3002</li> </ul> <p>\u6240\u4ee5\u5bf9\u4e00\u6279\u6570\u636e\u96c6\u611f\u5174\u8da3\u4f46\u662f\u6570\u91cf\u4e0d\u591f\u65f6\uff0c\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u4e00\u4e2a\u6570\u636e\u5f88\u76f8\u4f3c\u7684\u6709\u5927\u91cf\u6570\u636e\u7684\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u9488\u5bf9\u81ea\u5df1\u7684\u95ee\u9898\u5fae\u8c03\u6216\u91cd\u65b0\u8bad\u7ec3\u67d0\u4e9b\u5c42\u3002</p>"},{"location":"AI/cv/cs231n/lec8/","title":"\u5e38\u89c1\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6","text":"<p> \u7ea6 742 \u4e2a\u5b57  30 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec8/#_2","title":"\u6df1\u5ea6\u5b66\u4e60\u786c\u4ef6","text":""},{"location":"AI/cv/cs231n/lec8/#cpugputpu","title":"CPU/GPU/TPU","text":"<ul> <li>CPU(Central Processing Unit)\u4e00\u822c\u7531\u591a\u4e2a\u6838\u5fc3\uff0c\u6bcf\u4e2a\u6838\u5fc3\u90fd\u5f88\u5feb\uff0c\u53ef\u4ee5\u72ec\u7acb\u5de5\u4f5c\uff0c\u53ef\u540c\u65f6\u8fdb\u884c\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5185\u5b58\u4e0e\u7cfb\u7edf\u5171\u4eab\uff0c\u5b8c\u6210\u5e8f\u5217\u4efb\u52a1\u65f6\u5f88\u6709\u7528\u3002</li> <li>GPU(Graphics Processing Unit)\u6709\u4e0a\u5343\u4e2a\u5185\u6838\u6570\uff0c\u4f46\u6bcf\u4e2a\u6838\u5fc3\u8fd0\u884c\u901f\u5ea6\u5f88\u6162\uff0c\u4e0d\u80fd\u72ec\u7acb\u5de5\u4f5c\uff0c\u9002\u5408\u5927\u91cf\u5e76\u884c\u5b8c\u6210\u7c7b\u4f3c\u7684\u5de5\u4f5c\u3002GPU\u4e00\u822c\u81ea\u5e26\u5185\u5b58\uff0c\u4e5f\u6709\u81ea\u5df1\u7684\u7f13\u5b58\u7cfb\u7edf\u3002</li> <li>TPU(Tensor Processing Unit)\u662f\u4e13\u95e8\u7684\u6df1\u5ea6\u5b66\u4e60\u786c\u4ef6\uff0c\u8fd0\u884c\u901f\u5ea6\u975e\u5e38\u5feb\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec8/#gpu","title":"GPU\u7684\u4f18\u52bf\u548c\u5e94\u7528","text":"<p>GPU\u5728\u5927\u77e9\u9635\u7684\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u6709\u660e\u663e\u4f18\u52bf\u3002\u5728\u77e9\u9635\u4e58\u6cd5\u4e2d\uff0c\u7ed3\u679c\u7684\u6bcf\u4e00\u4e2a\u77e9\u9635\u90fd\u662f\u7b2c\u4e00\u4e2a\u77e9\u9635\u6bcf\u4e00\u884c\u548c\u7b2c\u4e8c\u4e2a\u77e9\u9635\u6bcf\u4e00\u5217\u7684\u70b9\u79ef\uff0c\u6240\u4ee5\u5e76\u884c\u7684\u540c\u65f6\u8fdb\u884c\u8fd0\u7b97\u901f\u5ea6\u5f88\u5feb\u3002\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u5377\u79ef\u6838\u548c\u611f\u53d7\u91ce\u7684\u70b9\u79ef\u4e5f\u662f\u5e76\u884c\u8fd0\u7b97\u3002</p> <p>CPU \u867d\u7136\u4e5f\u6709\u591a\u4e2a\u6838\u5fc3\uff0c\u4f46\u662f\u5728\u5927\u77e9\u9635\u8fd0\u7b97\u65f6\u53ea\u80fd\u4e32\u884c\u8fd0\u7b97\uff0c\u901f\u5ea6\u5f88\u6162\u3002</p> <p>Programming GPUs</p> <ul> <li>CUDA: \u82f1\u4f1f\u8fbe(NVIDIA\uff09\u5e76\u884c\u8fd0\u7b97\u6846\u67b6\uff0c\u53ef\u4ee5\u5199\u51fa\u7c7b\u4f3cC\u8bed\u8a00\u7684\u4ee3\u7801\u76f4\u63a5\u5728GPU\u4e0a\u8fd0\u884c\u3002NVIDIA\u5df2\u7ecf\u6709\u5f88\u591a\u9ad8\u5ea6\u4f18\u5316\u7684API\uff0c\u6bd4\u5982cuBLAS\u5305\u542b\u5f88\u591a\u77e9\u9635\u9884\u7b97\uff0ccuDNN\u5305\u542bCNN\u524d\u5411\u4f20\u64ad\uff0c\u53cd\u5411\u4f20\u64ad\uff0c\u6279\u91cf\u5f52\u4e00\u5316\u7b49\u64cd\u4f5c\u3002</li> <li>OpenCL\uff1a\u53ef\u4ee5\u5728CPU,AMD\u4e0a\u901a\u7528\uff0c\u4f46\u662f\u901f\u5ea6\u5f88\u6162</li> <li>HIP\uff1a\u53ef\u4ee5\u5c06CUDA\u4ee3\u7801\u81ea\u52a8\u8f6c\u6362\u6210\u53ef\u4ee5\u5728AMD\u4e0a\u8fd0\u884c\u7684\u8bed\u8a00</li> </ul> <p>\u76ee\u524d\u6765\u8bf4CUDA\u662f\u6700\u597d\u7684\u9009\u62e9</p> <p>\u5b9e\u9645\u5e94\u7528 GPU \u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u8bad\u7ec3\u7684\u6a21\u578b\u4e00\u822c\u5b58\u653e\u5728 GPU\uff0c\u800c\u7528\u4e8e\u8bad\u7ec3\u7684\u6570\u636e\u5b58\u653e\u5728\u786c\u76d8\u91cc\uff0c\u7531\u4e8e GPU \u8fd0\u884c\u5feb\uff0c\u800c\u673a\u68b0\u786c\u76d8\u8bfb\u53d6\u6162\uff0c\u5c31\u4f1a\u62d6\u7d2f\u6574\u4e2a\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <ul> <li>\u5982\u679c\u8bad\u7ec3\u6570\u636e\u6570\u91cf\u8f83\u5c0f\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u6570\u636e\u5b58\u653e\u5230GPU\u7684RAM\u4e2d</li> <li>\u7528\u56fa\u6001\u786c\u76d8\u4ee3\u66ff\u673a\u68b0\u786c\u76d8</li> <li>\u4f7f\u7528\u591a\u4e2aCPU\u7ebf\u7a0b\u9884\u8bfb\u53d6\u6570\u636e\uff0c\u653e\u5230\u7f13\u5b58\u4f9bGPU\u4f7f\u7528</li> </ul>"},{"location":"AI/cv/cs231n/lec8/#_3","title":"\u6df1\u5ea6\u5b66\u4e60\u8f6f\u4ef6","text":"<p>\u9996\u5148\u56de\u987e\u8ba1\u7b97\u56fe\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\u53ef\u4ee5\u7528\u8ba1\u7b97\u56fe\u8868\u793a\uff0c\u7f51\u7edc\u8d8a\u590d\u6742\uff0c\u8ba1\u7b97\u56fe\u4e5f\u8d8a\u590d\u6742\uff0c\u800c\u4f7f\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u539f\u56e0\u5982\u4e0b\uff1a</p> <ul> <li>\u6784\u5efa\u5927\u7684\u8ba1\u7b97\u56fe\u5f88\u5bb9\u6613\uff0c\u53ef\u4ee5\u5feb\u901f\u5f00\u53d1\u548c\u6d4b\u8bd5\u65b0\u60f3\u6cd5</li> <li>\u8fd9\u4e9b\u6846\u67b6\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u6211\u4eec\u53ea\u9700\u5199\u51fa\u524d\u5411\u4f20\u64ad\u7684\u4ee3\u7801</li> <li>\u53ef\u4ee5\u5728GPU\u4e0a\u9ad8\u6548\u8fd0\u884c</li> </ul> <p>Example </p> <p>\u5bf9\u4e8e\u4ee5\u4e0a\u7684\u8ba1\u7b97\u56fe\uff0c\u4e4b\u524d\u7684\u60f3\u6cd5\u53ef\u80fd\u662f\u4f7f\u7528Numpy\u5199\u51fa\u524d\u5411\u4f20\u64ad\uff0c\u7136\u540e\u8ba1\u7b97\u68af\u5ea6:</p> <pre><code>import numpy as np\nnp.random.seed(0)  # \u4fdd\u8bc1\u6bcf\u6b21\u7684\u968f\u673a\u6570\u4e00\u81f4\nN, D = 3, 4\nx = np.random.randn(N, D)\ny = np.random.randn(N, D)\nz = np.random.randn(N, D)\na = x * y\nb = a + z\nc = np.sum(b)\ngrad_c = 1.0\ngrad_b = grad_c * np.ones((N, D))\ngrad_a = grad_b.copy()\ngrad_z = grad_b.copy()\ngrad_x = grad_a * y\ngrad_y = grad_a * x\n</code></pre> <p>\u8fd9\u79cd\u505a\u6cd5 API \u5e72\u51c0\uff0c\u6613\u4e8e\u7f16\u5199\u4ee3\u7801\uff0c\u4f46\u95ee\u9898\u662f\u6ca1\u529e\u6cd5\u5728 GPU \u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u9700\u8981\u81ea\u5df1\u8ba1\u7b97\u68af\u5ea6\u3002\u6240\u4ee5\u73b0\u5728\u5927\u90e8\u5206\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u4e3b\u8981\u76ee\u6807\u662f\u81ea\u5df1\u5199\u597d\u524d\u5411\u4f20\u64ad\u4ee3\u7801\uff0c\u7c7b\u4f3c Numpy\uff0c\u4f46\u80fd\u5728 GPU \u4e0a\u8fd0\u884c\u4e14\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\u3002</p> <pre><code>import torch\ndevice = 'cuda:0'  # \u5728GPU\u4e0a\u8fd0\u884c\uff0c\u5373\u6784\u5efaGPU\u7248\u672c\u7684\u77e9\u9635\n# \u524d\u5411\u4f20\u64ad\u4e0eNumpy\u7c7b\u4f3c\nN, D = 3, 4\nx = torch.randn(N, D, requires_grad=True, device=device)\n# requires_grad\u8981\u6c42\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u9ed8\u8ba4\u4e3aTrue\ny = torch.randn(N, D, device=device)\nz = torch.randn(N, D, device=device)\na = x * y\nb = a + z\nc = torch.sum(b)\nc.backward()  # \u53cd\u5411\u4f20\u64ad\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\nprint(x.grad)\nprint(y.grad)\nprint(z.grad)\n</code></pre>"},{"location":"AI/cv/icv/","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p> <p>Abstract</p> <p>ZJU 2023-2024\u79cb\u51ac\u8bfe\u7a0b\uff1a\u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba</p> <p>\u4efb\u8bfe\u6559\u5e08\uff1a\u5468\u6653\u5dcd</p>"},{"location":"AI/cv/icv/COLMAP/","title":"COLMAP\u5907\u5fd8","text":"<p> \u7ea6 147 \u4e2a\u5b57 </p> <p>Assuming you stored the images of your project in the following structure:</p> <pre><code>/path/to/project/...\n+\u2500\u2500 images\n\u2502   +\u2500\u2500 image1.jpg\n\u2502   +\u2500\u2500 image2.jpg\n\u2502   +\u2500\u2500 ...\n\u2502   +\u2500\u2500 imageN.jpg\n</code></pre> <pre><code># The project folder must contain a folder \"images\" with all the images.\n$ DATASET_PATH=/path/to/dataset\n\n$ colmap feature_extractor \\\n   --database_path $DATASET_PATH/database.db \\\n   --image_path $DATASET_PATH/images\n\n$ colmap exhaustive_matcher \\\n   --database_path $DATASET_PATH/database.db\n\n$ mkdir $DATASET_PATH/sparse\n\n$ colmap mapper \\\n    --database_path $DATASET_PATH/database.db \\\n    --image_path $DATASET_PATH/images \\\n    --output_path $DATASET_PATH/sparse\n\n$ mkdir $DATASET_PATH/dense\n\n$ colmap image_undistorter \\\n    --image_path $DATASET_PATH/images \\\n    --input_path $DATASET_PATH/sparse/0 \\\n    --output_path $DATASET_PATH/dense \\\n    --output_type COLMAP \\\n    --max_image_size 2000\n\n$ colmap patch_match_stereo \\\n    --workspace_path $DATASET_PATH/dense \\\n    --workspace_format COLMAP \\\n    --PatchMatchStereo.geom_consistency true\n\n$ colmap stereo_fusion \\\n    --workspace_path $DATASET_PATH/dense \\\n    --workspace_format COLMAP \\\n    --input_type geometric \\\n    --output_path $DATASET_PATH/dense/fused.ply\n\n$ colmap poisson_mesher \\\n    --input_path $DATASET_PATH/dense/fused.ply \\\n    --output_path $DATASET_PATH/dense/meshed-poisson.ply\n\n$ colmap delaunay_mesher \\\n    --input_path $DATASET_PATH/dense \\\n    --output_path $DATASET_PATH/dense/meshed-delaunay.ply\n</code></pre>"},{"location":"AI/cv/icv/lab1/","title":"Lab 1 Matplotlib, OpenCV and Open3d","text":"<p> \u7ea6 164 \u4e2a\u5b57  99 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Firstly, import packages</p> <pre><code>import matplotlib.pyplot as plt\nimport open3d as o3d\nimport imageio\nimport numpy as np\nimport cv2\n</code></pre>"},{"location":"AI/cv/icv/lab1/#matplotlib","title":"Matplotlib","text":""},{"location":"AI/cv/icv/lab1/#read-an-image-using-imageio-and-opencv","title":"Read an image using imageio and opencv","text":"<pre><code>def read_image_cv_io(img_path):\n'''\n    Input:\n    img_path: string\n    Return:\n    img_cv: array, (H, W, 3)\n    img_io: array, (H, W, 3)\n    '''\nimg_io = imageio.imread(img_path)\nimg_cv = cv2.imread(img_path)\nreturn img_cv,img_io\n</code></pre> <p>The difference of two methods:</p> <ul> <li>imageio.imread: RGB</li> <li>cv2.imread: BGR</li> </ul>"},{"location":"AI/cv/icv/lab1/#show-images-using-matplotlib","title":"Show images using matplotlib","text":"<pre><code>def show_image(img)\uff1a\nplt.imshow(img)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#show-images-in-a-1times-2-subplot","title":"Show images in a \\(1\\times 2\\) subplot","text":"<pre><code>def show_image_subplot(images):\n'''\n    Input: \n    images: tuple of 2 images\n    '''\nplt.subplot(1,2,1)\nplt.imshow(images[0])\nplt.subplot(1,2,2)\nplt.imshow(inages[1])\n</code></pre> <p>The first graph is the result of img_io(RGB), the second is img_cv(BGR).</p>"},{"location":"AI/cv/icv/lab1/#show-concated-images-using-matplotlib","title":"Show concated images using matplotlib","text":"<pre><code>def concat_images(images):\n'''\n    Input: \n    images: tuple of two images, ((H, W, 3), (H, W, 3))\n    Output:\n    image: (H, 2*W, 3)\n    '''\nnewimage = np.concatenate((images[0],images[1]),axis=1)\nreturn newimage\n</code></pre>"},{"location":"AI/cv/icv/lab1/#plot-the-function-of-y2x2-3-during-1010","title":"Plot the function of \\(y=2x^2-3\\) during [-10,10]","text":"<pre><code>def func(x):\nreturn 2 * x**2 - 3\ndef plot(func):\nx = np.arange(-10,10,0.1)\ny = func(x)\nplt.plot(x,y)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#opencv","title":"OpenCV","text":""},{"location":"AI/cv/icv/lab1/#convert-and-show-images","title":"Convert and show images","text":"<pre><code>def convert_rgb_to_bgr(img):\n'''\n    Input:\n    img: (H, W, 3), RGB channels.\n    Return:\n    img: (H, W, 3), BGR channels.\n    '''\nnewimage = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\nreturn newimage\ndef convert_rgb_to_gray(img):\n'''\n    Input:\n    img: (H, W, 3), RGB channels.\n    Return:\n    img: (H, W), Gray image.\n    '''\nnewimage = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\nreturn newimage\ndef cv_imshow(img):\n'''\n    Input:\n    img: (H, W, 3), BGR channels\n    '''\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()# called to close any open windows.\n</code></pre> <p><code>waitkey</code>\u63a7\u5236\u7740<code>imshow</code>\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5f53<code>imshow</code>\u4e4b\u540e\u4e0d\u8ddf<code>waitkey</code>\u65f6\uff0c\u76f8\u5f53\u4e8e\u6ca1\u6709\u7ed9<code>imshow</code>\u63d0\u4f9b\u65f6\u95f4\u5c55\u793a\u56fe\u50cf\uff0c\u6240\u4ee5\u53ea\u6709\u4e00\u4e2a\u7a7a\u7a97\u53e3\u4e00\u95ea\u800c\u8fc7\u3002</p> <p>\u8bbe\u7f6e <code>waitKey(0</code>) , \u5219\u8868\u793a\u7a0b\u5e8f\u4f1a\u65e0\u9650\u5236\u7684\u7b49\u5f85\u7528\u6237\u7684\u6309\u952e\u4e8b\u4ef6</p>"},{"location":"AI/cv/icv/lab1/#read-videos-and-show-videos","title":"Read videos and show videos","text":"<pre><code>def read_and_show_video(video_path):\n'''\n    Input: \n    video_path: string\n    '''\nvideo = cv2.VideoCapture(video_path)\nwhile video.isOpened():\nret,frame = video.read()# ret is a boolean value indicating whether a frame was successfully read; frame holds the actual frame that was read from the video source. It is a NumPy array representing an image.\nif ret:\ncv2.imshow('frame',frame)\nif key==ord('q'):\nvideo.release()\nbreak\nelse:\nvideo.release()\n</code></pre>"},{"location":"AI/cv/icv/lab1/#write-student-id-in-the-image-and-save-it","title":"Write student ID in the image and save it","text":"<pre><code>def write_student_id(img):\ntext=\" \"\nnewimage = cv2.putText(img,text,(100,50),cv2.FONT_HERSHEY_COMPLEX,2.0,(255,255,255),5)\n# 2.0:determines the size of the text.\n#5:the thickness of the text\nreturn newimage\ndef write_img(img_path,img):\ncv2.imwrite(img_path,img)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#open3d","title":"Open3d","text":""},{"location":"AI/cv/icv/lab1/#read-and-visualize-3d-modelsin-point-cloud","title":"Read and visualize 3D models(in point cloud)","text":"<pre><code>def read_vis_model(model_path):\npcd = o3d.io.read_point_cloud(model_path)\no3d.visualization.draw_geometries([pcd],width=800,height=600)\n</code></pre>"},{"location":"AI/cv/icv/lec1/","title":"Introduction","text":"<p> \u7ea6 156 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec1/#what-is-computer-vision","title":"What is Computer Vision","text":"<p>A standard computer vision system:</p> <p></p>"},{"location":"AI/cv/icv/lec1/#computer-vision-tasks","title":"Computer vision tasks","text":"<ul> <li>3D reconstruction<ul> <li>3D reconstruction, localization, SLAM\uff0c\u2026\u2026</li> </ul> </li> <li>Image undestanding<ul> <li>Image recognition, object detection, image segmentation, action recognition, deep learning,\u2026\u2026</li> </ul> </li> <li>Image synthesis<ul> <li>Colorization, super-resolution, debluring, HDR, panorama, free-viewpoint, GANs, \u2026\u2026</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec1/#why-is-computer-vision-hard","title":"Why is computer vision hard?","text":"<ul> <li>computers can be better at computing</li> <li>humans are better at understanding</li> </ul>"},{"location":"AI/cv/icv/lec1/#linear-algebra-recap","title":"Linear Algebra Recap","text":"<p>\u77e9\u9635\u548c\u5411\u91cf\u7684\u4e58\u6cd5\u8868\u793a\u5bf9\u5411\u91cf\u4f4d\u7f6e\u8fdb\u884c\u51e0\u4f55\u53d8\u6362\uff0c\u77e9\u9635\u7684\u5217\u63cf\u8ff0\u4e86\u8be5\u53d8\u6362\u7684\u5177\u4f53\u5f62\u5f0f\uff08\u6807\u51c6\u57fa\u7ecf\u53d8\u6362\u540e\u7684\u5750\u6807\uff09</p> <p>\u4ece\u51e0\u4f55\u89d2\u5ea6\u7406\u89e3\u77e9\u9635\u53ef\u9006\uff1a\u53d8\u6362\u524d\u540e\u7684\u4e24\u4e2a\u70b9\u4e00\u4e00\u5bf9\u5e94</p> <p>\u884c\u5217\u5f0f\u51e0\u4f55\u610f\u4e49\uff1aThe determinant is the volume of an n-dimensional parallel body</p>"},{"location":"AI/cv/icv/lec1/#application-of-eigenvalues-and-eigenvectors","title":"Application of Eigenvalues and eigenvectors","text":"<ul> <li>Principal components analysis(PCA)</li> </ul>"},{"location":"AI/cv/icv/lec10/","title":"Lec10 Recognition","text":"<p> \u7ea6 480 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Question</p> <p>\u5f85\u8865\u5145\uff01\uff01 \u611f\u89c9\u6211\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u7406\u89e3\u8fd8\u4e0d\u662f\u5f88\u900f\u5f7b\uff0c\u672c\u7bc7\u5185\u5bb9\u6ca1\u6709\u8fc7\u591a\u52a0\u5165\u6211\u81ea\u5df1\u7684\u601d\u8def\u3002</p>"},{"location":"AI/cv/icv/lec10/#semantic-segmentation","title":"Semantic segmentation","text":"<p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8bed\u4e49\u5206\u5272\u5c31\u662f\u8bc6\u522b\u56fe\u50cf\u4e2d\u5b58\u5728\u7684\u5185\u5bb9\u4ee5\u53ca\u4f4d\u7f6e\u3002</p>"},{"location":"AI/cv/icv/lec10/#fcn","title":"FCN","text":"<p>\u6211\u4eec\u4e00\u822c\u4f7f\u7528FCN(Fully Convolutional Networks)\u6765\u89e3\u51b3\u8bed\u4e49\u5206\u5272\u95ee\u9898\u3002\u5728\u4f20\u7edf\u7684FCN\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u52a0\u4e0a\u4e86\u4e24\u4e2atrick:</p> <ul> <li>Pooling and Unpooling: \u5982\u679c\u4e0d\u52a0\u5165\u6c60\u5316\u5c42\uff0c\u5219\u6548\u7387\u592a\u4f4e\uff0c\u4f46\u662f\u7531\u4e8e\u666e\u901a\u7684\u6c60\u5316\u4f1a\u7f29\u5c0f\u56fe\u7247\u7684\u5c3a\u5bf8\uff0c\u4e3a\u4e86\u5f97\u5230\u548c\u539f\u56fe\u7b49\u5927\u7684\u8bed\u4e49\u5206\u5272\u56fe\uff0c\u6211\u4eec\u9700\u8981\u5411\u4e0a\u91c7\u6837/\u53cd\u5377\u79ef\u3002</li> </ul> <p></p> <ul> <li>Skip Layer: \u4f5c\u7528\u662f\u4f18\u5316\u7ed3\u679c\u3002\u56e0\u4e3a\u6211\u4eec\u5728pooling,Unpooling\u7684\u8fc7\u7a0b\u4e2d\u4e22\u5931\u4e86\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u4e0d\u540c\u7684unpooling\u5c42\u4e2d\uff0c\u6211\u4eec\u989d\u5916\u589e\u52a0\u539fpooling\u5c42\u7684\u8f93\u5165\u3002</li> </ul> <p></p> <p>\u8be5\u7f51\u7edc\u88ab\u79f0\u4f5cU-Net\u3002</p>"},{"location":"AI/cv/icv/lec10/#crf","title":"CRF","text":"<p>U-Net\u8f93\u51fa\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u518d\u52a0\u4e00\u6b65\u6761\u4ef6\u968f\u673a\u573a\u4f18\u5316\u80fd\u91cf\u51fd\u6570\uff1a</p> \\[ E(x)=\\sum_i \\theta_i(x_i)+\\sum_{i,j}\\theta_{i,j}(x_i,x_j) \\] <p></p>"},{"location":"AI/cv/icv/lec10/#evaluation-metric","title":"Evaluation metric","text":"<p>\u8bc4\u4f30\u8bed\u4e49\u5206\u5272\u7ed3\u679c\uff0c\u6211\u4eec\u4f7f\u7528Intersection-over-union(IoU)</p> <p></p>"},{"location":"AI/cv/icv/lec10/#object-detection","title":"Object detection","text":"<p>\u6700\u5927\u7684\u56f0\u96be\u5c31\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u56fe\u50cf\u4e2d\u6709\u51e0\u4e2a\u7269\u4f53\uff0c\u8981\u8f93\u51fa\u51e0\u4e2abounding box</p>"},{"location":"AI/cv/icv/lec10/#region-proposals","title":"Region proposals","text":"<p>\u57fa\u4e8e\u56fe\u7247\u63d0\u53d6\u51fa\u82e5\u5e72\u53ef\u80fd\u5305\u542b\u7269\u4f53\u7684\u533a\u57df</p>"},{"location":"AI/cv/icv/lec10/#two-stage-model","title":"Two-Stage Model","text":"<ul> <li>First stage: run once per image<ul> <li>Backbone network</li> <li>RPN</li> </ul> </li> <li>Second stage:run once per image<ul> <li>Crop features: Rol pool/align</li> <li>Predict object class</li> <li>Predict bbox offset</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec10/#r-cnn","title":"R-CNN","text":"<p>Non-Max Suppression \u6709\u65f6\u5019\u540c\u4e00\u4e2a\u7269\u4f53\uff0c\u7f51\u7edc\u4f1a\u8f93\u51fa\u4e24\u4e2aBounding box\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u9009\u53d6\u6982\u7387\u6700\u5927\u7684\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec10/#fast-r-cnn","title":"Fast R-CNN","text":""},{"location":"AI/cv/icv/lec10/#faster-r-cnn","title":"Faster R-CNN","text":"<p>Faster R-CNN\u4f7f\u7528CNN\u6765\u9009\u53d6RP</p> <p>RPN</p> <p></p>"},{"location":"AI/cv/icv/lec10/#single-stage-object-detection","title":"Single-stage object detection","text":"<p>YOLO</p> <p></p>"},{"location":"AI/cv/icv/lec10/#instance-segmentation","title":"Instance segmentation","text":"<ul> <li>Faster R-CNN + Mask Prediction</li> </ul> <p>\u5bf9\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u6bcf\u4e2a\u6846\u4e2d\u7684\u7269\u4f53\uff0c\u5224\u65ad\u6bcf\u4e2a\u50cf\u7d20\u662f\u5c5e\u4e8e\u524d\u666f\u8fd8\u662f\u80cc\u666f</p>"},{"location":"AI/cv/icv/lec10/#human-pose-estimation","title":"Human pose estimation","text":""},{"location":"AI/cv/icv/lec10/#single-human","title":"Single Human","text":"<ul> <li>\u76f4\u63a5\u9884\u6d4b\u5173\u8282\u70b9</li> <li>\u7528\u70ed\u529b\u56fe\u8868\u793a\u5173\u8282\u70b9</li> </ul>"},{"location":"AI/cv/icv/lec10/#multiple-humans","title":"Multiple humans","text":"<ul> <li> <p>Top-down:</p> <ul> <li>Detect humans and detect keypoints in each bbox</li> <li>Example: Mask R-CNN</li> </ul> </li> <li> <p>Bottom-up:</p> <ul> <li>Detect keypoints and group keypoints to form humans</li> <li>Example: OpenPose</li> </ul> </li> </ul> <p></p>"},{"location":"AI/cv/icv/lec12/","title":"Lec12 Computational Photography","text":"<p> \u7ea6 1717 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p> <p>\u8ba1\u7b97\u6444\u5f71\u5b66\u7684\u4efb\u52a1\u5c31\u662f\u901a\u8fc7\u7b97\u6cd5\u4f7f\u5f97\u62cd\u51fa\u6765\u7684\u56fe\u50cf\u8d28\u91cf\u66f4\u9ad8\u3002</p>"},{"location":"AI/cv/icv/lec12/#high-dynamic-range-imaginghdr","title":"High Dynamic Range Imaging(HDR)","text":"<p>HDR, \u5373\u9ad8\u52a8\u6001\u8303\u56f4\u6210\u50cf\u3002\u56de\u60f3\u6211\u4eec\u751f\u6d3b\u4e2d\uff0c\u5728\u665a\u4e0a\u62cd\u7167\u65f6\uff0c\u7167\u7247\u4f1a\u51fa\u73b0\u8981\u4e48\u4e00\u7247\u9ed1\uff0c\u8981\u4e48\u4e00\u7247\u4eae\u7684\u60c5\u51b5\u3002\u539f\u56e0\u662f\u665a\u4e0a\u7684\u573a\u666f\u5bf9\u6bd4\u5ea6\u592a\u5927\uff0c\u800c\u8fd9\u79cd\u660e\u6697\u7684\u5bf9\u6bd4\u5ea6\u5c31\u88ab\u79f0\u4f5c\u52a8\u6001\u8303\u56f4\u3002HDR\u53ef\u4ee5\u505a\u5230\u65e2\u6355\u6349\u4eae\u5904\u7684\u7ec6\u8282\uff0c\u4e5f\u6355\u6349\u5230\u6697\u5904\u7684\u7ec6\u8282\u3002</p> <p></p> <p>\u5bf9\u4e8e\u76f8\u673a\uff0c\u5b83\u6bcf\u4e2a\u50cf\u7d20\u7684\u66dd\u5149(exposure)\u53d6\u51b3\u4e8e\u5982\u4e0b\u4e09\u4e2a\u56e0\u7d20\uff1a</p> <ul> <li>\u589e\u76ca(Gain): controlled by the ISO. \u53ef\u4ee5\u7406\u89e3\u4e3a\u5149\u7535\u4fe1\u53f7\u8f6c\u5316\u7684\u6548\u7387\u3002ISO\u662f\u5e95\u7247\u7684\u611f\u5149\u5ea6\u3002</li> <li>\u8f90\u5c04\u5ea6(Irradiance): \u53ef\u4ee5\u7406\u89e3\u4e3a\u6253\u5230\u5e95\u7247\u4e0a\u7684\u5149\u7684\u6570\u91cf(\u5149\u5f3a)\uff0c\u53d6\u51b3\u4e8e\u5149\u5708\u7684\u5927\u5c0f\u3002</li> <li>\u66dd\u5149\u65f6\u95f4(Time)\uff1a\u7531\u5feb\u95e8\u901f\u5ea6\u63a7\u5236\u3002</li> </ul> <p></p> <p>Dynamic range</p> <p>The ratio between the largest and smallest values of a certain quantity.</p> <p>\u5373\u4e00\u4e2a\u573a\u666f\u4e2d\u6700\u4eae\u5730\u65b9\u548c\u6700\u6697\u5730\u65b9\u7684\u6bd4\u503c\u3002\u5728\u591c\u665a\u62cd\u7167\u65f6\uff0c\u7531\u4e8e\u573a\u666f\u52a8\u6001\u8303\u56f4\u592a\u5927\uff0c\u6697\u5904\u548c\u4eae\u5904\u7684\u7ec6\u8282\u4e0d\u80fd\u517c\u5f97\uff0c\u5c31\u4f1a\u9020\u6210\u4e0a\u56fe\u7684\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>\u771f\u5b9e\u4e16\u754c\u5177\u6709\u5f88\u5927\u7684\u52a8\u6001\u8303\u56f4\u3002\u4f46\u662f\u76f8\u673a\u7684\u4f20\u611f\u5668\u53ea\u80fd\u8986\u76d6\u5f88\u5c0f\u7684\u52a8\u6001\u8303\u56f4\u3002\u4f20\u611f\u5668\u7684\u52a8\u6001\u8303\u56f4\u4e0d\u80fd\u8986\u76d6\u771f\u5b9e\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u62cd\u7167\u4e0d\u80fd\u517c\u987e\u660e\u6697\u7ec6\u8282\u7684\u539f\u56e0\u3002</p> <p></p> <p></p>"},{"location":"AI/cv/icv/lec12/#hdr","title":"HDR","text":"<p>\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u6211\u4eec\u62cd\u591a\u5f20\u56fe\u50cf\uff0c\u90e8\u5206\u56fe\u50cf\u7528\u8f83\u5c0f\u7684\u66dd\u5149\u65f6\u95f4\uff0c\u8bb0\u5f55\u4eae\u51fa\u7684\u7ec6\u8282\uff0c\u53e6\u4e00\u90e8\u5206\u56fe\u50cf\u7528\u8f83\u957f\u7684\u66dd\u5149\u65f6\u95f4\uff0c\u8bb0\u5f55\u6697\u5904\u7684\u7ec6\u8282\uff0c\u6700\u540e\u5c06\u6240\u6709\u56fe\u50cf\u5408\u6210\u5f97\u5230\u6700\u7ec8\u7684\u56fe\u50cf\u3002</p> <ul> <li>Exposure bracketing: Capture multiple LDR images at different exposures.</li> <li>Merging: Combine them into a single HDR image.</li> </ul> <p>\u5bf9\u4e8e\u56fe\u50cf\u5408\u6210\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <p>For each pixel:</p> <ul> <li>Find valid pixels in each image. \u8fd9\u4e2a\u50cf\u7d20\u503c\u65e2\u4e0d\u4f1a\u592a\u4eae\u4e5f\u4e0d\u4f1a\u592a\u6697(0.05&lt;pixel&lt;0.95)\uff0c\u6211\u4eec\u5373\u8ba4\u4e3a\u5b83\u5904\u4e8e\u5408\u7406\u7684\u533a\u95f4\u3002</li> <li>Weight valid pixel values appropriately.(pixel value/t).</li> <li>Form a new pixel value as the weighted average of valid pixel values.</li> </ul> <p></p>"},{"location":"AI/cv/icv/lec12/#deblurring","title":"Deblurring","text":"<p>\u4efb\u52a1\u662f\u628a\u6a21\u7cca\u7684\u56fe\u50cf\u53d8\u6e05\u695a\u3002</p> <p>\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u56fe\u50cf\u6a21\u7cca\u7684\u539f\u56e0\uff1a</p> <ul> <li>\u5931\u7126(Defoucs): \u5728\u666f\u6df1\u8303\u56f4\u5916defoucs(\u5728lec2\u4ecb\u7ecd\u8fc7),\u5149\u6591\u53d6\u51b3\u4e8e\u5149\u5708\u5f62\u72b6\u3002</li> <li>\u8fd0\u52a8\u6a21\u7cca(Motion blur): \u6210\u50cf\u7684\u8fc7\u7a0b\u662f\u5bf9\u5149\u5f3a\u505a\u79ef\u5206\u7684\u8fc7\u7a0b\uff0c\u5018\u82e5\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u76f8\u673a\u6216\u7269\u4f53\u8fd0\u52a8\uff0c \u6210\u50cf\u7ed3\u679c\u5c31\u4ea7\u751f\u6a21\u7cca\u3002\u4e00\u822c\u7531\u66dd\u5149\u65f6\u95f4\u8fc7\u957f\u9020\u6210\u3002\u5728\u753b\u9762\u4e0a\u5f62\u6210\u8fd0\u52a8\u7684\u8f68\u8ff9\u3002</li> </ul> <p>\u90a3\u4e48\u6211\u4eec\u8981\u5982\u4f55\u7528\u6570\u5b66\u6a21\u578b\u6765\u63cf\u8ff0\u56fe\u50cf\u6a21\u7cca\u5462\uff1f</p> <p>\u56de\u987e\u6211\u4eec\u5728lec3\u4ecb\u7ecd\u7684\u9ad8\u65af\u6a21\u7cca\uff0c\u91c7\u7528\u4e86\u9ad8\u65af\u6838\u5bf9\u56fe\u50cf\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u5377\u79ef\u6765\u63cf\u8ff0\u6a21\u7cca\u7684\u8fc7\u7a0b\u3002</p> <p></p> <p>\\(F(X,Y)\\)\u662f\u6e05\u6670\u7684\u56fe\u50cf\uff0c\\(H(U,V)\\)\u662f\u5377\u79ef\u6838\uff0c\u4e0eF\u5377\u79ef\u540e\u5f97\u5230\u6a21\u7cca\u7684\u56fe\u50cf\\(G(X,Y)\\)\u3002</p> <p></p> <p>\u56e0\u6b64\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u53bb\u5377\u79ef\u3002</p> <p>\u6839\u636e\u662f\u5426\u77e5\u9053\u5377\u79ef\u6838\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a</p>"},{"location":"AI/cv/icv/lec12/#non-blind-image-deconvolutionnbid","title":"Non-blind image deconvolution(NBID):","text":"<p>\u4efb\u52a1\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u6a21\u7cca\u7684\u56fe\u50cf\u548c\u5377\u79ef\u6838\uff0c\u6c42\u89e3\u539f\u56fe\u3002</p> <p>\u5bf9\u4e8e\u89e3\u51b3\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u7c7b\u6bd4\uff0c\u5982\u679c\u662f\u4e58\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u9664\u6cd5\u4fbf\u53ef\u4ee5\u8fd8\u539f\u3002\u8fd9\u6837\u5c31\u5f88\u81ea\u7136\u60f3\u5230\u5c06\u56fe\u50cf\u505a\u4e2a\u5085\u91cc\u53f6\u53d8\u6362\uff08\u5b9e\u57df\u4e0a\u7684\u5377\u79ef\u7b49\u4e8e\u9891\u57df\u4e0a\u7684\u4e58\u79ef\uff09\u3002</p> <p></p> <p>\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5377\u79ef\u6838\\(H(u,v)\\)\u4e00\u822c\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u53bb\u5377\u79ef\u7684\u8fc7\u7a0b\u4e2d\uff0c\u76f8\u5f53\u4e8e\u4e58\u4e0a\\(\\frac{1}{H(u,v)}\\)\uff0c\u5373\u4e58\u4e0a\u4e00\u4e2a\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6240\u4ee5\u53bb\u5377\u79ef\u6211\u4eec\u662f\u5728\u653e\u5927\u9ad8\u9891\u4fe1\u606f\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\u4e5f\u4f1a\u76f8\u5e94\u653e\u5927\u9ad8\u9891\u566a\u58f0\u3002</p> <p>\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u65b9\u6cd5\u5c31\u662f\u8c03\u6574\u5377\u79ef\u6838\u3002\u5373\u505ainverse fliter\u7684\u540c\u65f6\u6291\u5236\u9ad8\u9891\u566a\u58f0\u3002(Wiener Fliter)</p> <p></p>"},{"location":"AI/cv/icv/lec12/#deconvolution-by-optimization","title":"Deconvolution by optimization","text":"<p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u7528\u4f18\u5316\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u53bb\u6a21\u7cca\u95ee\u9898\u3002</p> <p>\u4f18\u5316\u53d8\u91cf\uff1a\u6e05\u6670\u7684\u56fe\u7247\uff1b\u76ee\u6807\u51fd\u6570\uff1a\u6e05\u6670\u56fe\u50cf\u8fc7\u5377\u79ef\u540e\u4e0e\u7ed9\u5b9a\u7684\u6a21\u7cca\u56fe\u50cf\u540e\u7684\u5dee\u522b\u3002\u7528\u6bcf\u4e2a\u50cf\u7d20\u503c\u5dee\u522b\u7684\u5e73\u65b9\u548c\u6765\u8861\u91cf\u3002</p> <p></p> <p>\u4f46\u662f\u4f7f\u7528\u4f18\u5316\u6765\u6c42\u89e3\u53ef\u80fd\u4f7f\u8be5\u95ee\u9898\u53d8\u4e3aill-posed.(\u53ef\u80fd\u5b58\u5728\u65e0\u7a77\u591a\u4e2a\u89e3)\u3002</p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e9b\u5148\u9a8c\u4fe1\u606f(\u89e3\u7684\u7ea6\u675f\u6761\u4ef6)\u6765\u89e3\u51b3ill-posed\u95ee\u9898\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e24\u5f20\u56fe\u7247\u90fd\u662f\u6211\u4eec\u4f18\u5316\u95ee\u9898\u7684\u89e3\uff0c\u4f46\u662f\u663e\u7136\u5de6\u8fb9\u90a3\u5f20\u56fe\u66f4\u7b26\u5408\u5b9e\u9645\u60c5\u51b5\uff0c\u56e0\u4e3a\u5b83\u7684\u68af\u5ea6\u56fe\u662f\u6bd4\u8f83\u7a00\u758f\u7684\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u7a00\u758f\u7684\u68af\u5ea6\u56fe\u4f5c\u4e3a\u5148\u9a8c\u6761\u4ef6\uff0c\u56de\u987elec4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5728\u4f18\u5316\u51fd\u6570\u4e0a\u52a0\u4e00\u4e2a\\(L_1\\)\u6b63\u5219\u9879\u5373\u53ef\u3002</p> \\[ \\mathop{min}_F \\Vert G-F\\otimes H\\Vert_2^2+\\Vert\\nabla F\\Vert_1 \\]"},{"location":"AI/cv/icv/lec12/#blind-image-deconvolutionbid","title":"Blind Image Deconvolution(BID)","text":"<p>\u73b0\u5728\u6211\u4eec\u4e0d\u77e5\u9053\u5377\u79ef\u6838\u662f\u4ec0\u4e48\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u4e0d\u80fd\u7528\u9006\u5411\u6ee4\u6ce2\u6c42\u89e3\uff0c\u53ea\u80fd\u7528\u4f18\u5316\u7684\u65b9\u5f0f\u505a\uff0c\u6b64\u65f6\u5377\u79ef\u6838\u4e5f\u6210\u4e86\u4f18\u5316\u7684\u76ee\u6807\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u5377\u79ef\u6838\u4e5f\u662f\u7a00\u758f\u5e76\u4e14\u975e\u8d1f\u7684\u3002\u6240\u4ee5\u76ee\u6807\u51fd\u6570\uff1a</p> \\[ \\mathop{min}_{F,H}\\Vert G-F\\otimes H\\Vert_2^2+\\lambda_1\\Vert\\nabla F\\Vert_1+\\lambda_2\\Vert H\\Vert_1 \\, s.t.H\\ge 0 \\]"},{"location":"AI/cv/icv/lec12/#colorization","title":"Colorization","text":"<p>\u6211\u4eec\u5e0c\u671b\u628a\u9ed1\u767d\u7684\u56fe\u50cf\u8f6c\u5316\u6210\u5f69\u8272\u56fe\u50cf\u3002\u6211\u4eec\u5fc5\u987b\u544a\u8bc9\u7b97\u6cd5\u6211\u4eec\u60f3\u8981\u4ec0\u4e48\u6837\u7684\u989c\u8272\u3002</p>"},{"location":"AI/cv/icv/lec12/#sample-based-colorization","title":"Sample-based colorization","text":"<p>source image\u5c31\u79f0\u4e3a\u6837\u672c\u56fe\u50cf\u3002\u6211\u4eec\u60f3\u8981\u628a\u6837\u672c\u56fe\u50cf\u7684\u989c\u8272\u8fc1\u79fb\u5230\u4e2d\u95f4\u7684target image\u4e0a\u3002</p> <p>\u505a\u6cd5\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u50cf\u7d20\uff0c\u5728\u6837\u672c\u56fe\u50cf\u4e2d\u627e\u5230\u6700\u4f73\u7684\u5339\u914d\u70b9(\u4eae\u5ea6\u548c\u68af\u5ea6)\u3002\u7136\u540e\u6839\u636e\u5339\u914d\u70b9\u586b\u5145\u50cf\u7d20\u503c\u3002</p>"},{"location":"AI/cv/icv/lec12/#interactive-colorization","title":"Interactive colorization","text":"<p>\u8be5\u65b9\u6cd5\u662f\u8ba9\u7528\u6237\u5728\u6bcf\u4e2a\u533a\u57df\u7ed9\u5b9a\u989c\u8272\uff0c\u7b97\u6cd5\u5c06\u8be5\u533a\u57df\u7684\u989c\u8272\u8865\u5168\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u4f18\u5316\u7684\u65b9\u6cd5\u6c42\u89e3\u3002</p> <p></p> <ul> <li> <p>\\(U(r),U(s)\\): RGB values of pixel r,s.</p> </li> <li> <p>\\(N(r)\\): neighborhood pixels of pixel \\(r\\).</p> </li> <li>\\(w_{rs}\\): Weight that measures similarity between \\(r,s\\).</li> </ul>"},{"location":"AI/cv/icv/lec12/#generative-adversarial-networkgan","title":"Generative Adversarial Network(GAN)","text":"<p>\u5bf9\u4e8e\u751f\u6210\u5f0f\u95ee\u9898\uff0c\u91c7\u7528\u4f20\u7edf\u795e\u7ecf\u7f51\u7edc\u7684\u56fa\u5b9a\u635f\u5931\u51fd\u6570\u662f\u4e0d\u5408\u7406\u7684\u3002\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u7070\u5ea6\u56fe\u8fdb\u884c\u4e0a\u8272\uff0c\u89e3\u4e0d\u662f\u552f\u4e00\u7684\u3002</p> <p>GAN\u5e76\u4e0d\u81ea\u5df1\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u800c\u53c8\u501f\u52a9\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc(classifer)\u6765\u5224\u65ad\u7b2c\u4e00\u4e2a\u7f51\u7edc\u751f\u6210\u7684\u56fe\u7247\u7684\u8d28\u91cf\u3002</p> <p></p> <p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\u5206\u522b\u4e3a\u751f\u6210\u5668\\(G\\)\u548c\u5224\u522b\u5668\\(D\\)\u3002</p> <ul> <li>\\(G\\) tries to synthesize fake images that fool \\(D\\).</li> <li>\\(D\\) tries to identify the fakes.</li> </ul> <p></p> <p>\u5bf9\u4e8e\\(D\\)\u800c\u8a00\uff0c\u5b83\u7684\u635f\u5931\u51fd\u6570\uff1a</p> \\[ \\arg \\max_D E_{x,y}[\\log D(G(x))+\\log (1-D(y))] \\] <p>\u5bf9\u4e8e\\(G\\)\u800c\u8a00\uff0c\u5b83\u7684\u635f\u5931\u51fd\u6570\uff1a $$ \\arg\\min_G E_{x,y}[\\log D(G(x))+\\log (1-D(y))] $$ </p> <p>\u540c\u65f6\u8bad\u7ec3\u4e24\u4e2a\u7f51\u7edc\u7684\u65b9\u6cd5\uff1a $$ \\arg\\min_G\\max_D E_{x,y}[\\log D(G(x))+\\log (1-D(y))] $$ G tries to synthesize fake images that fool the best D</p> <p>D can be viewed as a loss function to train G:</p> <ul> <li>called adversarial loss</li> <li>learned instead of being hand-designed</li> <li>can be applied to any image synthesis tasks</li> </ul>"},{"location":"AI/cv/icv/lec12/#super-resolution","title":"Super Resolution","text":""},{"location":"AI/cv/icv/lec2/","title":"Lec2 Image Formation","text":"<p> \u7ea6 1278 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec2/#camera-and-lens","title":"Camera and lens","text":"<p>\u9996\u5148\u8ba9\u6211\u4eec\u6765\u8bbe\u8ba1\u4e00\u4e2a\u76f8\u673a\u3002</p> <p>\u5047\u5982\u76f4\u63a5\u5728\u7269\u4f53\u9762\u524d\u653e\u4e00\u4e2a\u5e95\u7247\uff0c\u663e\u7136\u4e0d\u80fd\u5f97\u5230\u8f83\u597d\u7684\u56fe\u50cf\uff0c\u56e0\u4e3a\u5b9e\u7269\u4e0e\u50cf\u5e73\u9762\u4e0a\u7684\u70b9\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u56e0\u6b64\u6211\u4eec\u6700\u5148\u60f3\u5230\u7684\u5c31\u662f\u5c0f\u5b54\u6210\u50cf(Pinhole camera)\uff0c\u5c3d\u53ef\u80fd\u4f7f\u5f97\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u6210\u7acb\u3002</p> <p>\u4f46\u6b64\u65f6\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u5b54\u8d8a\u5c0f\u56fe\u50cf\u5c31\u8d8a\u6e05\u695a\uff1a</p> <ul> <li>\u7531\u7269\u7406\u5b66\u53ef\u4ee5\u5f97\u5230\uff0c\u5f53\u5b54\u592a\u5c0f\u65f6\uff0c\u4f1a\u4ea7\u751f\u5149\u7684\u884d\u5c04\u73b0\u8c61</li> <li>\u5b54\u592a\u5c0f\u4e5f\u4f1a\u5bfc\u81f4\u901a\u5149\u91cf\u4e0d\u8db3</li> </ul> <p></p> <p>\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528\u955c\u5934\u2014\u2014Lens(\u4fdd\u6301\u4e00\u4e00\u5bf9\u5e94\u7684\u540c\u65f6\u6c47\u805a\u66f4\u591a\u7684\u5149)</p> <p></p> <p>If \\(o=\\infty\\), then \\(f=i\\)</p>"},{"location":"AI/cv/icv/lec2/#image-magnification","title":"Image Magnification","text":"<p>\u653e\u5927\u7387 \\(m=\\frac{h_i}{h_o}=\\frac{i}{o}\\), </p> <p>\u7531\u516c\u5f0f\\(\\frac{1}{i}=\\frac{1}{o}+\\frac{1}{f}\\) \u53ef\u5f97\uff0c\u5f53\u7269\u4f53\u79bb\u900f\u955c\u8db3\u591f\u8fdc\u65f6\uff0c\u50cf\u8ddd\u53ef\u4ee5\u8fd1\u4f3c\u7b49\u4e8e\u7126\u8ddd\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bf4\u7126\u8ddd\u4e5f\u51b3\u5b9a\u4e86\u56fe\u50cf\u653e\u5927\u7387\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec2/#field-of-viewfov","title":"Field of  View(FOV)","text":"<p>\u89c6\u573a\u89d2\u53d6\u51b3\u4e8e\u4e24\u4e2a\u56e0\u7d20\uff1a\u7126\u8ddd\u4e0e\u5e95\u7247(sensor)\u7684\u5927\u5c0f\uff0c\u7531\u4e0a\u56fe\u53ef\u4ee5\u76f4\u89c2\u770b\u51fa</p> <p>\u4ece\u6210\u50cf\u8d28\u91cf\u6765\u770b\uff0c\u5e95\u7247\u8d8a\u5927\u8d8a\u597d\uff08\u6bcf\u4e2a\u50cf\u7d20\u6536\u5230\u7684\u5149\u66f4\u591a\uff0c\u4fe1\u566a\u6bd4\u66f4\u597d\uff09\uff0c\u56e0\u6b64\u73b0\u5728\u7684\u5de5\u4e1a\u76ee\u6807\u5c31\u662f\u5728\u7f29\u5c0f\u5e95\u7247\u7684\u540c\u65f6\u7ef4\u6301\u597d\u7684\u4fe1\u566a\u6bd4\u3002</p>"},{"location":"AI/cv/icv/lec2/#aperture","title":"Aperture","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u653e\u5927/\u7f29\u5c0f\u5149\u5708\u6765\u63a7\u5236\u56fe\u50cf\u7684\u4eae\u5ea6</p>"},{"location":"AI/cv/icv/lec2/#f-number","title":"F-number","text":"<ul> <li> <p>More convenient to represent aperture as a fraction of focal length: \\(D=\\frac{f}{N}\\)</p> </li> <li> <p>F-Number: \\(N=\\frac{f}{D}\\)</p> </li> </ul>"},{"location":"AI/cv/icv/lec2/#lens-defocus","title":"Lens Defocus","text":"<p>\u5f53 \\(f\\) \u548c \\(i\\) \u56fa\u5b9a\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u9762(\u6df1\u5ea6)\u5728\u6210\u50cf\u5e73\u9762\u4e0a\u662f\u6e05\u695a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u7126</p> <p>\uff08\u5f25\u6563\u5706\uff09Blur circle diameter: \\(b=\\frac{D}{i^{'}}\\vert i^{'}-i\\vert\\)\uff0c \u4e0b\u56fe\u662f\u751f\u6d3b\u4e2d\u5e38\u89c1\u7684\u4e00\u4e2a\u4f8b\u5b50</p> <p></p>"},{"location":"AI/cv/icv/lec2/#depth-of-fielddof","title":"Depth of Field(DoF)","text":"<p>\u867d\u7136\u6709\u4e86\u5f25\u6563\u5706\u4e0edefocus\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u4f1a\u7591\u60d1\u751f\u6d3b\u4e2d\u7684\u7167\u7247\u5e76\u975e\u4ec5\u6709\u4e00\u4e2a\u6df1\u5ea6\u624d\u662f\u6e05\u6670\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u56fe\u50cf\u5e76\u975e\u8fde\u7eed\u7684\uff0c\u800c\u662f\u7531\u4e00\u4e2a\u4e2a\u65b9\u683c\uff08\u50cf\u7d20\uff09\u6784\u6210\u7684\uff0c\u5f53\u5f25\u6563\u5706\u843d\u5728\u4e00\u4e2a\u50cf\u7d20\u5185\u65f6\uff0c\u5b83\u8868\u73b0\u51fa\u6765\u4e5f\u662f\u6e05\u6670\u7684\uff0c\u8fd9\u5c31\u5f15\u5165\u4e86\u666f\u6df1\u7684\u6982\u5ff5\uff1a</p> <p>Range of object distances over which the image is sufficiently well focused, i.e. range over which blur b is less than pixel size.</p> <p></p> <p>DoF: \\(o_2-o_1=\\frac{2pf^2cN(o-f)}{f^4-c^2N^2(o-f)^2}\\)</p>"},{"location":"AI/cv/icv/lec2/#geometric-image-formation","title":"Geometric image formation","text":"<p>Geometric image formation \u5c31\u662f\u4f7f\u7528\u76f8\u673a\u6a21\u578b\u6765\u63cf\u8ff03D\u4e16\u754c\u548c2D\u56fe\u50cf\u4e4b\u95f4\u7684\u51e0\u4f55\u5173\u7cfb\u3002</p>"},{"location":"AI/cv/icv/lec2/#perspective-projection","title":"Perspective Projection","text":"<p>\u4f7f\u7528Pin-hole camera model\u63cf\u8ff0\u7684\u6295\u5f71\u79f0\u4e3a\u900f\u89c6\u6295\u5f71\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec2/#homogeneous-coordinates","title":"\u9f50\u6b21\u5750\u6807\u7684\u5f15\u5165(Homogeneous coordinates)","text":"<p>Note</p> <p>\u4e4b\u524d\u5b66\u4e60\u4e86\u591a\u6b21\u9f50\u6b21\u5750\u6807\u7684\u8868\u793a\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5c55\u5f00\u3002\u53ea\u9700\u6ce8\u610f\u5f15\u5165\u9f50\u6b21\u5750\u6807\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u5c06\u6295\u5f71\u8868\u793a\u4e3a\u7ebf\u6027\u53d8\u6362\uff08\u5373\u80fd\u591f\u4f7f\u7528\u77e9\u9635\u8868\u793a\uff09\u3002</p> <p>\u6df1\u5165\u4e86\u89e3\u9f50\u6b21\u5750\u6807\uff1aGAMES101 Lec3 https://www.bilibili.com/video/BV1X7411F744?p=3&amp;vd_source=49519b2e89bff31aec426f55ae7d4afa</p> <p>\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u8868\u793a\u7684\u6295\u5f71\u77e9\u9635\uff1a</p> <p>\\(\\begin{bmatrix} f&amp;0&amp;0&amp;0 \\\\  0&amp;f&amp;0&amp;0 \\\\ 0&amp;0&amp;1&amp;0  \\end{bmatrix} \\begin{bmatrix}x\\\\ y\\\\ z\\\\ 1\\end{bmatrix}=\\begin{bmatrix}fx\\\\ fy\\\\ z\\end{bmatrix}=\\begin{bmatrix}f\\frac{x}{z}\\\\ f\\frac{y}{z} \\\\ 1\\end{bmatrix}\\)</p> <p>Visualize Perspective Projection</p> <p></p>"},{"location":"AI/cv/icv/lec2/#projection-can-be-tricky","title":"Projection can be tricky","text":"<p>In perspective projection, straight lines are still straight, however, lenghth and angles are lost.</p>"},{"location":"AI/cv/icv/lec2/#vanishing-points","title":"Vanishing points","text":"<ul> <li>Any two parallel lines have the same vanishing point \\(v\\)</li> <li>The ray from C through \\(v\\) is parallel to the lines<ul> <li>\\(v\\) tells us the direction of the lines</li> <li>\\(v\\) may be outside the image frame or at infinity</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec2/#vanishing-lines","title":"Vanishing lines","text":"<p>The union of all of these vanishing points is the vanishing line</p>"},{"location":"AI/cv/icv/lec2/#perspective-distortion","title":"Perspective distortion","text":"<ul> <li>The exterior columns appear bigger(but why?)</li> <li>The distortion is not due to lens flaws.</li> </ul>"},{"location":"AI/cv/icv/lec2/#radial-distortion","title":"Radial distortion","text":"<ul> <li>Caused by imperfect lenses</li> <li>More noticeable for rays that pass through the edge of the lens.</li> <li>(two common categories)Pin cushion and Barrel</li> </ul>"},{"location":"AI/cv/icv/lec2/#orthographic-projectioin","title":"Orthographic projectioin","text":"<p>\\(\\begin{bmatrix} 1&amp;0&amp;0&amp;0 \\\\ 0&amp;1&amp;0&amp;0\\\\ 0&amp;0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\z\\\\1\\end{bmatrix}=\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</p> <p></p>"},{"location":"AI/cv/icv/lec2/#photometric-image-formation","title":"Photometric image formation","text":"<ul> <li>Describe the relation between the physical properies of 3D world and the color of 2d image.</li> </ul>"},{"location":"AI/cv/icv/lec2/#shutter-speed","title":"Shutter speed","text":"<ul> <li>control exposure time</li> <li>The pixel value is equal to the integral of the light intensity within the exposure time</li> </ul>"},{"location":"AI/cv/icv/lec2/#rolling-shutter-effect","title":"Rolling shutter effect","text":""},{"location":"AI/cv/icv/lec2/#color-spaces","title":"Color spaces","text":"<ul> <li>RGB</li> <li>HSV</li> </ul> <p>\u4eba\u773c\u5bf9\u4e09\u79cd\u989c\u8272RGB\u7684\u654f\u611f\u7a0b\u5ea6\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u5355\u8272\u4e2d\uff0c\u4eba\u773c\u5bf9\u7ea2\u8272\u6700\u4e0d\u654f\u611f\uff0c\u84dd\u8272\u6700\u654f\u611f\uff0c\u6240\u4ee5RGB\u989c\u8272\u7a7a\u95f4\u5747\u5300\u6027\u8f83\u5dee\u3002</p> <p>\u56e0\u6b64\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86HSV\u989c\u8272\u7a7a\u95f4\uff0c\u6bd4RGB\u66f4\u63a5\u8fd1\u4eba\u4eec\u5bf9\u5f69\u8272\u7684\u611f\u77e5\u3002</p> <ul> <li>Hue(\u8272\u8c03\uff0c\u8272\u76f8) \u8868\u793a\u8272\u5f69\u4fe1\u606f</li> <li>Saturation(\u9971\u548c\u5ea6\u3001\u8272\u5f69\u7eaf\u51c0\u5ea6) \u9971\u548c\u5ea6\u8d8a\u9ad8\uff0c\u989c\u8272\u8d8a\u6df1\u3002\u9971\u548c\u5ea60\u4ee3\u8868\u7eaf\u767d\u8272\u3002</li> <li>Value(\u660e\u5ea6) \u989c\u8272\u7684\u654f\u611f\u7a0b\u5ea6\uff0c\u660e\u5ea6\u4e3a0\u8868\u793a\u7eaf\u9ed1\u8272</li> </ul> <p></p>"},{"location":"AI/cv/icv/lec2/#bayre-filter","title":"Bayre filter","text":"<p>\u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0c\u9700\u8981\u91c7\u96c6\u591a\u79cd\u57fa\u672c\u7684\u989c\u8272\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528\u6ee4\u955c\u7684\u65b9\u6cd5\uff0c\u7ea2\u8272\u6ee4\u955c\u900f\u8fc7\u7ea2\u8272\u6ce2\u957f\u7684\u5149etc. \u5982\u679c\u8981\u91c7\u96c6RGB\u4e09\u79cd\u989c\u8272\uff0c\u5219\u9700\u8981\u4e09\u79cd\u6ee4\u955c\uff0c\u4ef7\u683c\u6602\u8d35\u3002\u800c\u62dc\u5c14\u6ee4\u955c(Bayre Filter)\u5728\u4e00\u5757\u6ee4\u955c\u4e0a\u8bbe\u7f6e\u4e0d\u540c\u989c\u8272\uff0c\u7531\u4e8e\u4eba\u773c\u5bf9\u7eff\u8272\u6bd4\u8f83\u654f\u611f\uff0c\u56e0\u6b64\u7eff\u8272\u8f83\u591a\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002</p>"},{"location":"AI/cv/icv/lec2/#model-the-light-reflected-by-an-object-shading","title":"Model the light reflected by an object : Shading","text":"<ul> <li>Compute light reflected toward camera at a specific point</li> <li>Inputs:viewer direction, surface normal, light direction, surface parameters</li> </ul> <p>The light received per unit area is proportional to \\(cos\\theta = l\\cdot n\\)</p>"},{"location":"AI/cv/icv/lec2/#materialbrdfbidirectional-reflectance-distribution-function","title":"Material=BRDF(Bidirectional reflectance distribution function)","text":"<p>BRDF: \\(f_r(v_i;v_r;n;\\lambda)\\) $$ L_r(v_r;\\lambda)=\\int L_i(v_i;\\lambda)f_r(v_i;v_r;n;\\lambda)cos^{+}\\theta_idv_i $$</p>"},{"location":"AI/cv/icv/lec3/","title":"Lec 3 : Image Processing","text":"<p> \u7ea6 254 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec3/#image-processing-basics","title":"Image processing basics","text":""},{"location":"AI/cv/icv/lec3/#_1","title":"\u4e00\u4e9b\u57fa\u672c\u7684\u5904\u7406","text":"<ul> <li>\u589e\u52a0\u5bf9\u6bd4\u5ea6(\u4f7f\u7528\"S curve\")</li> <li>\u6a21\u7cca\uff0c\u9510\u5316\uff0c\u8fb9\u7f18\u63d0\u53d6</li> </ul>"},{"location":"AI/cv/icv/lec3/#convolution","title":"convolution","text":"\\[ (f*g)(x)=\\int_{-\\infty}^{\\infty}f(y)g(x-y)dy \\]"},{"location":"AI/cv/icv/lec3/#discrete-2d-convolution","title":"Discrete 2D convolution","text":"<p>$$ (f*g)(x,y)=\\sum_{i,j=-\\infty}^{\\infty}f(i,j)I(x-i,y-j) $$ </p>"},{"location":"AI/cv/icv/lec3/#padding","title":"Padding","text":"<p>\u5982\u679c\u6ca1\u6709padding\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u7ecf\u8fc7\u5377\u79ef\u64cd\u4f5c\u4e4b\u540e\u5f97\u5230\u7684\u56fe\u50cfsize\u4f1a\u53d8\u5c0f\uff0c\u4e3a\u4e86\u5f97\u5230\u5927\u5c0f\u76f8\u540c\u7684\u56fe\u50cf\uff0c\u6211\u4eec\u9009\u62e9\u5728\u56fe\u50cf\u5468\u56f4\u8fdb\u884cpadding\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec3/#guassian-blur","title":"Guassian blur","text":"<ul> <li>Obtain filter coefficients by sampling 2D Gaussian function \\(f(i,j)=\\frac{1}{2\\pi\\sigma^2}e^{-\\frac{i^2+j^2}{2\\sigma^2}}\\)</li> </ul>"},{"location":"AI/cv/icv/lec3/#sharpening","title":"Sharpening","text":"<p>\u9510\u5316\u64cd\u4f5c\u5c31\u662f\u5f80\u56fe\u50cf\u91cc\u6dfb\u52a0\u9ad8\u9891\u4fe1\u606f</p> <ul> <li>Let \\(I\\) be the original image</li> <li>High frequencies in image \\(I=I-blur(I)\\)</li> <li>Sharpened image = \\(I+(I-blur(I))\\)</li> </ul>"},{"location":"AI/cv/icv/lec3/#bilateral-filter","title":"Bilateral filter","text":"<p>removing noise while preserving image edges</p> <p></p> <p></p>"},{"location":"AI/cv/icv/lec3/#image-sampling","title":"Image sampling","text":""},{"location":"AI/cv/icv/lec3/#image-resizing","title":"Image resizing","text":""},{"location":"AI/cv/icv/lec3/#image-magnification","title":"Image magnification","text":""},{"location":"AI/cv/icv/lec3/#interpolation","title":"Interpolation","text":""},{"location":"AI/cv/icv/lec3/#nearest-neighbor-interpolation","title":"Nearest-neighbor interpolation","text":"<ul> <li>Not continuous</li> <li>Not smooth(\u5149\u6ed1\u51fd\u6570\uff1a\u51e0\u9636\u5bfc\u8fde\u7eed\u5c31\u79f0\u8be5\u51fd\u6570\u51e0\u9636\u5149\u6ed1)</li> </ul>"},{"location":"AI/cv/icv/lec3/#linear-interpolation","title":"Linear interpolation","text":""},{"location":"AI/cv/icv/lec3/#cubic-interpolation","title":"Cubic interpolation","text":"<p>For each interval: \u5e76\u4e0d\u662f\u5bf9\u6574\u4f53\u8fdb\u884c\u62df\u5408\uff0c\u800c\u662f\u6bcf\u4e24\u70b9\u9996\u5148\u62df\u5408\u7ebf\u6027\u51fd\u6570\uff0c\u975e\u7ebf\u6027\u9879\u7684\u5f15\u5165\u662f\u4e3a\u4e86\u4f7f\u66f2\u7ebf\u5149\u6ed1</p>"},{"location":"AI/cv/icv/lec3/#bilinear-interpolation","title":"Bilinear Interpolation","text":""},{"location":"AI/cv/icv/lec4/","title":"Lec4: Model fitting and Optimization","text":"<p> \u7ea6 1431 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec4/#optimization","title":"Optimization","text":"<p>\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u4e86\u4f18\u5316\u7684\u57fa\u672c\u8303\u5f0f\uff0c\u8be6\u89c1\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5c55\u5f00</p> <p>\u4e00\u4e2a\u6709\u8da3\u7684example\uff1aImage deblurring</p> <p>\u6211\u4eec\u5df2\u77e5\u6a21\u7cca\u56fe\u50cfY\u548c\u5377\u79ef\u6838F\uff0c\u9700\u8981\u901a\u8fc7\u4f18\u5316\u7684\u65b9\u6cd5\u5f97\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cfX</p> <p>\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u627e\u5230\u6e05\u6670\u7684\u56fe\u50cfX\uff0c\u4f7f\u5f97\u5b83\u505a\u6a21\u7cca\u5904\u7406\u540e\u4e0e\u5df2\u77e5\u7684\u56fe\u50cfY\u5dee\u522b\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e8e\u662f\u5f97\u5230\u76ee\u6807\u51fd\u6570\uff1a $$ \\mathop{min}_X \\Vert Y-FX\\Vert_2^2 $$</p>"},{"location":"AI/cv/icv/lec4/#model-fitting","title":"Model fitting","text":"<p>\u4e00\u4e2a\u6a21\u578b\u63cf\u8ff0\u95ee\u9898\u4e2d\u8f93\u5165\u548c\u8f93\u51fa\u7684\u5173\u7cfb\uff1a\u4f8b\u5982\u7ebf\u6027\u6a21\u578b\\(b=a^Tx\\) \u63cf\u8ff0\u8f93\u5165\\(a\\) \u548c\u8f93\u51fa \\(b\\) \u5173\u4e8e\u6a21\u578b\u53c2\u6570 \\(x\\) \u7684\u5173\u7cfb\u3002</p> <p>\u4f46\u5b9e\u9645\u7ed3\u679c\u5f88\u96be\u5b8c\u5168\u6ee1\u8db3\u6570\u5b66\u6a21\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u505a\u7684\u662f\u8fdb\u884c\u6a21\u578b\u62df\u5408\uff0c\u5373\u6211\u4eec\u6709\u4e00\u4e2a\u5148\u9a8c\u7684\u5047\u8bbe\uff08\u6570\u636e\u7b26\u5408\u54ea\u79cd\u6a21\u578b\uff09\uff0c\u7136\u540e\u4ece\u4ece\u6570\u636e\u96c6\u4e2d\u9884\u6d4b\u51fa\u6a21\u578b\u7684\u53c2\u6570\uff08\u8be5\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5b66\u4e60\uff09</p> <p>\u4e00\u4e2a\u7ecf\u5178\u7684\u65b9\u6cd5\uff1a\u6700\u5c0f\u4e8c\u4e58\u6cd5(Minimize the Mean Square Error(MSE)) $$ \\hat{x}=\\mathop{argmin}_x\\sum_i(b_i-a_i^Tx)^2 $$</p> <p>\u5982\u679c\u6211\u4eec\u5047\u8bbe\u6570\u636e\u4e2d\u7684\u566a\u58f0\u662f\u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0e\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u8054\u7cfb\u8d77\u6765</p>"},{"location":"AI/cv/icv/lec4/#maximum-likelihood-estimation","title":"Maximum Likelihood Estimation","text":"<p>\u9996\u5148\u5047\u8bbe\u6570\u636e\u670d\u4ece\u9ad8\u65af\u5206\u5e03 $$ b_i=a_i^T+n, n\\sim G(0,\\sigma) $$ \u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(x\\), \u89c2\u5bdf\u5230 \\((a_i,b_i)\\) \u7684\u4f3c\u7136\uff08\u53ef\u80fd\u6027\uff09\uff1a $$ P[(a_i,b_i)|x]=P[b_i-a_i^Tx]\\propto exp-\\frac{(b_i-a_i^Tx)^2}{2\\sigma^2} $$ \u5982\u679c\u6570\u636e\u70b9\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u90a3\u4e48\uff1a $$ P[(a_1,b_1)(a_2,b_2)\\cdots|x]=\\Pi_iP[b_i-a_i^Tx]\\propto exp\\frac{(b_i-a_i^Tx)^2}{2\\sigma^2}=exp-\\frac{\\Vert Ax-b\\Vert_2}{2\\sigma^2} $$</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u5373\u4e3a\u627e\u5230\\(x\\)\u80fd\u591f\u6700\u5927\u5316\u4f3c\u7136\u51fd\u6570\uff0c\u800c\u8fd9\u5373\u4e3a\u6700\u5c0f\u5316\\(\\Vert Ax-b\\Vert_2\\)</p> <p>\u56e0\u6b64MSE=MLE with Gaussian noise assumption</p>"},{"location":"AI/cv/icv/lec4/#numerical-methods","title":"Numerical methods","text":""},{"location":"AI/cv/icv/lec4/#recap-taylor-expansion","title":"Recap: Taylor expansion","text":"<ul> <li>First-order approximation</li> </ul> <ul> <li>Second-order approximation</li> </ul>"},{"location":"AI/cv/icv/lec4/#_1","title":"\u68af\u5ea6\u4e0b\u964d\u6cd5","text":""},{"location":"AI/cv/icv/lec4/#steepest-descent-method","title":"Steepest descent method","text":"<ul> <li>Advantage<ul> <li>Easy to implement</li> <li>Perform well when far from the minimum</li> </ul> </li> <li>Disadvantage<ul> <li>Converge slowly when near the minimum</li> <li>Waste a lot of computation</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec4/#newton-method","title":"Newton method(\u8003\u8651\u4e86\u4e8c\u9636\u5bfc)","text":"<ul> <li>Do second-order expansion</li> </ul> \\[ F(x_k+\\Delta x)\\approx F(x_k)+J_F\\Delta x+\\frac{1}{2}\\Delta x^{T}H_F\\Delta x \\] <ul> <li>Find \\(\\Delta x\\) to minmize \\(F(x_k+\\Delta x)\\)</li> </ul> \\[ H_F\\Delta x+J_F^{T}=0 \\\\ \\Delta x=-H_F^{-1}J_F^{T}\\ (Newton Step) \\] <ul> <li>Advantage: fast convergence near the minimum</li> <li>Disadvantage: Hessian requires a lot of computation</li> </ul>"},{"location":"AI/cv/icv/lec4/#gauss-newton-method","title":"Gauss-Newton method","text":"<p>Useful for solving nonlinear least squares \\(\\hat{x}=arg \\mathop{min}_x\\Vert R(x)\\Vert_2^2\\)</p> <ul> <li>Instead of expanding \\(F(x)\\), we expand \\(R(x)\\)</li> </ul> \\[ \\Vert R(x_k+\\Delta x)\\Vert_2^2 \\approx \\Vert R(x_k)+J_k\\Delta x\\Vert_2^2=\\Vert R(x_k)\\Vert_2^2+2R(x_k)^TJ_R\\Delta x+\\Delta x^TJ_R^TJ_R\\Delta x \\] <ul> <li>Optimal direction</li> </ul> \\[ \\Delta x=-(J_R^TJ_R)^{-1}J_R^TR(x_k) \\] <p>\u5373\u4f7f\u7528\\((J_R^TJ_R)\\) \u6765\u8fd1\u4f3c\u4ee3\u66ff\\(H_F\\). \u5927\u5927\u51cf\u5c11\u8ba1\u7b97\u91cf</p> <ul> <li>Disadvantage: \\((J_R^TJ_R)\\)\u4e0d\u6b63\u5b9a\uff0c\u6240\u4ee5\u672a\u5fc5\u53ef\u9006</li> </ul>"},{"location":"AI/cv/icv/lec4/#levenberg-marquardt","title":"Levenberg-Marquardt","text":"\\[ \\Delta x=-(J_R^TJ_R+\\lambda I)^{-1}J_R^{T}R(x_k) \\] <p>The effect of \\(\\lambda\\)</p> <ul> <li>\\(\\lambda \\rightarrow \\infty\\)\uff1a Gradient descent, and stepsize is small</li> <li>\\(\\lambda \\rightarrow 0\\): Gauss-Newton step</li> </ul> <p>Advantage</p> <ul> <li>Start quickly(\u8fdc\u79bb\u76ee\u6807\u70b9\u65f6\u4f7f\u7528\u6700\u901f\u68af\u5ea6\u4e0b\u964d)</li> <li>Converge quickly(\u63a5\u8fd1\u76ee\u6807\u70b9\u65f6\u8fd1\u4f3c\u9ad8\u65af\u725b\u987f\u6cd5\uff0c\u4fdd\u8bc1\u6536\u655b\u901f\u5ea6\u5feb)</li> <li>\\(J_R^TJ_R+\\lambda I\\)\u6b63\u5b9a\uff0c\u4fdd\u8bc1\u9ad8\u65af\u725b\u987f\u6cd5\u6210\u7acb</li> </ul>"},{"location":"AI/cv/icv/lec4/#robust-estimation","title":"Robust estimation","text":""},{"location":"AI/cv/icv/lec4/#outliers","title":"Outliers","text":"<ul> <li>Inlier(\u5185\u70b9)\uff1a obeys the model assumption</li> <li>Outlier(\u5916\u70b9): differs significantly from the assumption\uff08\u79bb\u7fa4\u503c\uff09</li> </ul> <p>\u5916\u70b9\u4f1a\u4f7f\u5f97\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53d7\u5f88\u5927\u5f71\u54cd\uff0c\u5b83\u4f1a\u8fc7\u5ea6\u653e\u5927\u504f\u79bb\u8f83\u5927\u7684\u8bef\u5dee</p> <p></p>"},{"location":"AI/cv/icv/lec4/#robust-estimation_1","title":"Robust estimation","text":"<p>Use other loss function to replace MSE</p> <ul> <li>\\(L_1\\)\u635f\u5931\u51fd\u6570\uff1a\u662f\u6b8b\u5dee\u7edd\u5bf9\u503c\u7684\u548c\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u79bb\u7fa4\u503c\u5bf9\u6a21\u578b\u62df\u5408\u7684\u5f71\u54cd\uff0c\u4f46\u7f3a\u70b9\u5728\u4e8e\u96f6\u70b9\u4e0d\u53ef\u5bfc</li> <li>Huber loss: \u4f7f\u7528\u5206\u6bb5\u51fd\u6570\uff0c\u5728\u62d0\u70b9\u9644\u8fd1\u4f7f\u7528\\(L_2\\),\u8fdc\u5904\u4f7f\u7528\\(L_1\\).</li> </ul> <p></p> <ul> <li>They are called robust functions.</li> </ul>"},{"location":"AI/cv/icv/lec4/#ransac-random-sample-concensus","title":"RANSAC: Random Sample Concensus","text":"<ul> <li>The most powerful method to handle outliers</li> </ul> <p>RANSAC\u7684\u4e3b\u8981\u601d\u60f3\uff1a</p> <p>\u9996\u5148\u6211\u4eec\u77e5\u9053\u62df\u5408\u4e00\u6761\u76f4\u7ebf\u53ea\u9700\u8981\u4e24\u4e2a\u70b9\uff0c\u56e0\u6b64\u9996\u5148\u968f\u673a\u627e\u4e24\u4e2a\u70b9\u62df\u5408\u4e00\u6761\u76f4\u7ebf\uff0c\u7136\u540e\u68c0\u67e5\u6709\u591a\u5c11\u70b9\u7b26\u5408\u8be5\u76f4\u7ebf(\u53ea\u8981\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u5c0f\u4e8e\u4e00\u5b9a\u7684\u9608\u503c\uff0c\u5c31count++)\uff0c\u4e00\u76f4\u91cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u9009\u62e9count\u6700\u9ad8\u7684\u76f4\u7ebf\u3002</p> <p></p> <p>\u8be5\u65b9\u6cd5\u80fd\u591fwork\u7684\u539f\u56e0\u5c31\u662foutlier\u4e4b\u95f4\u5dee\u522b\u5f88\u5927\uff0c\u76f8\u4e92\u4e4b\u95f4\u5f88\u96be\u8fbe\u5230\u4e00\u81f4\uff1b\u800cinlier\u4e4b\u95f4\u5f88\u5bb9\u6613\u4e00\u81f4\uff0c\u4f7f\u5f97count\u66f4\u9ad8\u3002</p>"},{"location":"AI/cv/icv/lec4/#overfitting-and-underfitting","title":"Overfitting and underfitting","text":"<p>\u4e0a\u56fe\u4e2d\u53f3\u4e0b\u89d2\u90a3\u5e45\u56fe\u4fbf\u662f\u8fc7\u62df\u5408\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u867d\u7136\u6bcf\u6a21\u578b\u5f88\u597d\u5730fit\u4e86\u6240\u6709\u7684\u70b9\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>ill-posed problem</p> <p>\u89e3\u4e0d\u552f\u4e00\u7684\u95ee\u9898\u88ab\u79f0\u4e3a\u4e00\u4e2aill-posed problem\u3002(\u4f8b\u5982\u7ebf\u6027\u4ee3\u6570\u4e2d\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e0d\u552f\u4e00)</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u589e\u52a0\u7ea6\u675f\uff0c\u5f15\u5165\u6b63\u5219\u5316\u6761\u4ef6\u3002</p>"},{"location":"AI/cv/icv/lec4/#l_2-regularization","title":"\\(L_2\\) regularization","text":"\\[ \\mathop{min}_x\\Vert Ax-b\\Vert_2^2 \\ s.t.\\ \\Vert x\\Vert_2\\le 1 \\] <p>\u5176\u4e2d\\(\\Vert x\\Vert_2\\le 1\\)\u5c31\u662f\u6b63\u5219\u5316\u7ea6\u675f\u3002</p> <p>\u901a\u8fc7\u8ba9\u9009\u62e9\u7684\u89e3\u5c3d\u53ef\u80fd\u63a5\u8fd1\u539f\u70b9\uff0c\u800c\u8ba9\u6211\u4eec\u6ca1\u6709\u7528\u7684\u89e3\u7684\u7ef4\u5ea6\u5c3d\u53ef\u80fd\u63a5\u8fd1 0\uff0c\u4ee5\u51cf\u5c0f\u6ca1\u7528\u7684\u53d8\u91cf\u7684\u5f71\u54cd\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u76f4\u89c2\u7684\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u60f3\u901a\u8fc7\\(b=A^Tx\\), \u5373\u8f93\u5165\\(A\\)\uff0c\u901a\u8fc7\u6a21\u578b\u53c2\u6570 \\(x\\) \u9884\u6d4b \\(b\\).\u5047\u8bbe\\(x=(x_1,\\cdots,x_{2n})\\)\uff0c\u800c\u6211\u4eec\u5148\u9a8c\u8ba4\u4e3a\u6709\u7528\u7684\u53ea\u6709\u524d\\(n\\)\u9879\uff0c\u8fd9\u65f6\u901a\u8fc7\u9650\u5236\\(\\Vert x\\Vert_2=x_1^2+\\cdots+x_{2n}^2\\le 1\\),\u5f53\u524d\\(n\\)\u9879\u503c\u6bd4\u8f83\u5927\u65f6\uff0c\u540e\\(n\\)\u9879\u7684\u503c\u5c31\u4f1a\u8d8b\u5411\u4e8e\u96f6\uff0c\u6291\u5236\u8fd9\u4e9b\u5197\u4f59\u53d8\u91cf\u3002</p>"},{"location":"AI/cv/icv/lec4/#l_1-regularization","title":"\\(L_1\\) regularization","text":"\\[ \\mathop{min}_x\\Vert Ax-b\\Vert_2^2 \\ s.t.\\  \\Vert x\\Vert_1\\le 1 \\] <p>\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u5730\u7406\u89e3\\(L_1\\)\u6b63\u5219\u5316\u3002</p> <p>\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u4e0b\u56fe\u53ef\u89c6\u5316\u6240\u793a\uff0c\\(L_1\\)\u51fd\u6570\u6709\u5f88\u591a\u7a81\u51fa\u7684\u89d2\uff0c\u9ad8\u7ef4\u60c5\u51b5\u4e0b\u66f4\u591a\u3002\u76ee\u6807\u51fd\u6570\u4e0e\u8fd9\u4e9b\u89d2\u63a5\u89e6\u7684\u673a\u4f1a\u8fdc\u5927\u4e8e\u4e0e\u5176\u5b83\u90e8\u5206\uff0c\u800c\u5728\u8fd9\u4e9b\u89d2\u7531\u4e8e\u4f4d\u4e8e\u5750\u6807\u8f74\u4e0a\uff0c\u6709\u5f88\u591a\u7ef4\u5ea6\u7684\u503c\u7b49\u4e8e\u96f6\uff0c\u56e0\u6b64\u4f7f\u5f97\u89e3\u53d8\u5f97\u66f4\u7a00\u758f\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec5/","title":"Image Matching and Motion Estimation","text":"<p> \u7ea6 2824 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec5/#image-matching","title":"Image matching","text":"<p>Finding point-to-point correspondences between two images</p> <p></p> <p>Main Components of Feature matching</p> <ul> <li>Detection: identify the interest points</li> <li>Description: extract vector feature descriptor surrounding each interest point</li> <li>Matching: determine correspondence between descriptors in two views</li> </ul>"},{"location":"AI/cv/icv/lec5/#detection","title":"Detection","text":""},{"location":"AI/cv/icv/lec5/#feature-points","title":"Feature points","text":"<p>\u7279\u5f81\u70b9\u9700\u8981\u6ee1\u8db3\u72ec\u7279\u6027\uff08\u81f3\u5c11\u8981\u5728\u5c40\u90e8\u552f\u4e00\uff09</p> <p>\u90a3\u4e48\u6211\u4eec\u9996\u5148\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u8861\u91cf\u4e00\u4e2a\u70b9\u7684\u72ec\u7279\u6027.</p> <p>\u8003\u8651\u4e00\u4e2a\u5c0f\u7684\u50cf\u7d20\u7a97\u53e3,\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5f53\u6211\u4eec\u5411\u4efb\u610f\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\u8be5\u7a97\u53e3\uff0c\u90fd\u4f1a\u9020\u6210\u8f83\u5927\u53d8\u5316\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u8be5\u70b9\u662funiqueness</p> <p></p> <p>\u5728\u6570\u5b66\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u68af\u5ea6\u5206\u5e03\u6765\u8861\u91cf\u8be5\u53d8\u5316</p> <p></p> <p>\u6839\u636e\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u89c2\u5bdf\u5230\u56fe\u50cf\u7684\u7279\u5f81\uff0c\u5373\u5b58\u5728\u591a\u5c11\u4e2aedge\u53ca\u5176\u53d8\u5316\u7684\u65b9\u5411\uff08\u5373\u68af\u5ea6\u65b9\u5411\uff09\uff0c\u66f4\u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u4f7f\u7528\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09\u7684\u65b9\u6cd5\u8fdb\u884c\u8ba1\u7b97</p> <ul> <li>The 1st principal component is the direction with highest variance</li> <li>The 2nd principal component is the direction with highest variance which is orthogonal to the previous components.</li> </ul> <p></p> <p>\u56fe\u4e2d\u7eff\u8272\u7bad\u5934\u6240\u6307\u7684\u65b9\u5411\u5373\u534f\u65b9\u5dee\u77e9\u9635\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\u7684\u65b9\u5411\uff0c\u957f\u5ea6\u5373\u7279\u5f81\u503c\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f\u4e24\u4e2a\u4e3b\u6210\u5206\u5927\u5c0f\u90fd\u5f88\u5927\u7684\u533a\u57df\u3002\u5177\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>Compute the covariance matrix at each point</li> </ul> \\[ H=\\sum_{(u,v)}w(u,v)\\begin{bmatrix}I_x^2&amp;I_xI_y\\\\I_xI_y&amp;I_y^2\\end{bmatrix}\\\\I_x=\\frac{\\partial f}{\\partial x},I_y=\\frac{\\partial f}{\\partial y} \\] <ul> <li>Compute eigenvalues</li> </ul> \\[ H=\\begin{bmatrix}a&amp;b\\\\c&amp;d\\end{bmatrix} \\] \\[ \\lambda_{\\pm}=\\frac{1}{2}((a+d))\\pm \\sqrt{4bc+(a-d)^2} \\] <ul> <li>Classify points using eigenvalues of \\(H\\):</li> </ul> <p></p> <p>\u4e3a\u4e86\u66f4\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6211\u4eec\u5f15\u5165\u54c8\u91cc\u65af\u7b97\u5b50(Harris operator): $$ f=\\frac{\\lambda_1\\lambda_2}{\\lambda_1+\\lambda_2}=\\frac{determinant(H)}{tr(H)} $$ \u6ce8\u610f\u5230\u53ea\u6709\u6ee1\u8db3\\(\\lambda_1,\\lambda_2\\)\u90fd\u5f88\u5927\u65f6\u51fd\u6570\u503c\u624d\u4e0d\u4e3a\u96f6\uff0c\\(f\\) \u88ab\u79f0\u4f5ccorner response.</p>"},{"location":"AI/cv/icv/lec5/#summary-harris-detector","title":"Summary: Harris detector","text":"<ul> <li>Compute derivatives at each pixel</li> <li>Computer matrix \\(H\\) in a Gaussian window around each pixel</li> <li>Compute corner response \\(f\\)</li> <li>Threshold \\(f\\)\uff08\u9608\u503c\u8fc7\u6ee4\uff09</li> <li>Find local maxima of response function </li> </ul> <p>\u9664\u4e86\u72ec\u7279\u6027\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u5e0c\u671b\u7279\u5f81\u70b9\u5728\u56fe\u50cf\u53d8\u6362\uff08\u4e0b\u56fe\u662f\u5e38\u89c1\u7684\u53d8\u6362\uff0c\u5305\u62ec\u5149\u5b66\u53d8\u6362\u548c\u51e0\u4f55\u53d8\u6362\uff09\u4e2d\u4fdd\u6301\u4e0d\u53d8\u3002\u6bd4\u5982\u8bf4\u5bf9\u4e8e\u4e0a\u56fe\uff0c\u6211\u4eec\u5e0c\u671b\u5de6\u53f3\u4e24\u5f20\u56fe\u7247\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u70b9\u76f8\u540c\u3002</p> <p></p> <p>Harris detector: Invariance properties</p> <p>\u9996\u5148\u5bf9\u4e8e\u5149\u5b66\u53d8\u6362\uff0c\u5bf9\u4e8e\u5e38\u6570\u9879 \\(b\\), \u6211\u4eec\u5728\u6c42\u5bfc\u65f6\u4f1a\u5c06\u5176\u6d88\u6389\uff0c\u4f46\u662fintensity scaling \\(a\\) \u65e0\u6cd5\u6d88\u6389\uff0c\u6240\u4ee5Harris detector is partially invariant to affine intensity change.</p> <p></p> <p>\u6bd4\u8f83\u663e\u7136\u7684\u662f\u51e0\u4f55\u53d8\u6362\u4e2d\u7684\u5e73\u79fb\u4e0e\u65cb\u8f6c\u53d8\u6362\uff0c\u7531\u4e8e\u51e0\u4f55\u7ed3\u6784\u4fdd\u6301\u4e0d\u53d8\uff0c\u6211\u4eec\u8ba1\u7b97\u7684\u534f\u65b9\u5dee\u77e9\u9635\u4e5f\u4e0d\u4f1a\u53d8\u5316\uff0c\u56e0\u6b64Corner response is invariant w.r.t image translation and rotation.</p> <p>\u4f46\u662f\u5bf9\u4e8e\u56fe\u50cf\u653e\u7f29\u6765\u8bf4\uff0c\u89d2\u70b9\u54cd\u5e94\u51fd\u6570\u7684\u503c\u662f\u4f1a\u53d8\u7684\uff0c\u4e0b\u56fe\u662f\u4e00\u4e2a\u76f4\u89c2\u7684\u4f8b\u5b50\uff0c\u5728\u5de6\u4fa7\u56fe\u7684\u533a\u57df\u8bc6\u522b\u4e3a\u89d2\u70b9\uff0c\u4f46\u662f\u5728\u53f3\u4fa7\u56fe\u8bc6\u522b\u4e3a\u8fb9\u7f18</p> <p></p> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u5982\u4f55\u5728\u7ecf\u8fc7\u4e00\u5b9a\u53d8\u6362\u540e\u7684\u56fe\u50cf\u4e2d\u627e\u5230\u5408\u9002\u7684scale\uff08\u6216\u8005\u7a97\u53e3\u5927\u5c0f\uff09\u5462\uff1f</p> <p></p> <p>\u6ce8\u610f\u5230\u6211\u4eec\u7684\u76ee\u6807\u662f\u7279\u5f81\u70b9\u5339\u914d\uff0c\u90a3\u4e48\u7406\u60f3\u7684\u7ed3\u679c\u5c31\u662f\u4e24\u5f20\u56fe\u76f8\u540c\u7684feature point\u5bf9\u5e94\u7684corner response\u5e94\u8be5\u76f8\u540c\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e0d\u540c\u5927\u5c0f\u7684window size, \u53d6\u5f97\u5bf9\u5e94\u7684corner response\u503c\uff0c\u5c06\u5176\u7ed8\u5236\u6210\u56fe\u50cf\uff0c\u66f2\u7ebf\u7684\u5cf0\u503c\uff08\u5373\u7279\u5f81\u6700\u660e\u663e\u7684\u533a\u57df\uff09\u5373\u4e3a\u5f53\u524d\u56fe\u7247\u5e94\u8be5\u53d6\u7684scale\u3002</p> <p></p> <p>\u4f46\u662f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cinstead of \u6539\u53d8window size\uff0c\u6211\u4eec\u4e00\u822c\u56fa\u5b9a\u4f4f\u7a97\u53e3\u5927\u5c0f\uff0c\u800c\u53bb\u6539\u53d8\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u5f62\u6210\u4e00\u4e2a\u56fe\u50cf\u91d1\u5b57\u5854(image pyramid), \u4e8c\u8005\u6548\u679c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec5/#blob-detector","title":"Blob detector","text":"<p>Blobs are good fearues, but how to find them?</p> <p>\u7531\u4e8e\u6591\u70b9\u7684\u5c40\u90e8\u6027\u8d28(\u5373\u5728\u4e00\u4e2a\u5c0f\u533a\u57df\u5185\uff0c\u4e14\u4e00\u822c\u662f\u95ed\u5408\u7684)\uff0c\u6240\u4ee5\u6591\u70b9\u533a\u57df\u5728\u50cf\u7d20\u4e0a\u5177\u6709\u6bd4\u8f83\u5927\u7684\u4e8c\u9636\u5bfc\u3002\u6240\u4ee5\u6211\u4eec\u7684\u6b65\u9aa4\u662f\u8ba1\u7b97\u56fe\u50cf\u7684\u62c9\u666e\u62c9\u65af\uff0c\u7136\u540e\u627e\u5230\u5c40\u90e8\u6700\u5927\u4e0e\u6700\u5c0f\u503c\u3002</p> <p></p> <p>\u800c\u5bf9\u4e8e\u8ba1\u7b97\u7ecf\u62c9\u666e\u62c9\u65af\u53d8\u6362\u540e\u5f97\u5230\u7684\u56fe\u50cf\uff0c\u6211\u4eec\u4f7f\u7528\u6ee4\u6ce2\u5668\u6765\u5b9e\u73b0\u3002</p> <ul> <li>Laplacian operator:</li> </ul> \\[ \\nabla^2=\\frac{\\partial^2}{\\partial x^2}+\\frac{\\partial^2}{\\partial y^2} \\] <ul> <li>Compute image derivatives by filtering:</li> </ul> <p></p> <p>Laplacian of Gaussian Filter</p> <p>\u7531\u4e8eLaplacian\u5bf9\u566a\u58f0\u6bd4\u8f83\u654f\u611f(\u5b9e\u9645\u4e0a\u6c42\u5bfc\u8fd9\u79cd\u8fd0\u7b97\u5bf9\u566a\u58f0\u90fd\u5f88\u654f\u611f\uff0c\u5b83\u8ba1\u7b97\u7684\u662f\u533a\u57df\u50cf\u7d20\u7684\u53d8\u5316\u7387\uff0c\u66f4\u4f55\u51b5\u4e8c\u9636\u5bfc)\uff0c \u6240\u4ee5\u6211\u4eec\u901a\u5e38\u4f7f\u7528Laplacian of Gaussian(LoG) filter \u8fdb\u884c\u5904\u7406\uff0c\u5373\u9996\u5148\u5bf9\u56fe\u7247\u4f5c\u9ad8\u65af\u6a21\u7cca\uff0c\u518d\u8ba1\u7b97\u62c9\u666e\u62c9\u65af\u7b97\u5b50\uff1a</p> \\[ \\nabla^2(f*g)=f*\\nabla^2g \\] <p></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cThe scale of LoG \u662f\u7531\u9ad8\u65af\u5206\u5e03\u7684\u65b9\u5dee\\(\\sigma\\)\u63a7\u5236\u7684\uff0c\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\u5f53 \\(\\sigma\\) \u6bd4\u8f83\u5927\u65f6\uff0c\u9ad8\u65af\u6838\u6574\u4f53\u5206\u5e03\u5c31\u6bd4\u8f83\u5bbd\uff0c\u5bf9\u5e94\u7684scale\u4e5f\u53d8\u5927\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002</p> <p></p> <p>\u800c\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u5bf9\u6ee4\u6ce2\u5668\u66f4\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002\u539f\u56fe\u50cf\u4e0e\u6ee4\u6ce2\u5668\u8fdb\u884c\u5377\u79ef\u4e4b\u540e\uff0c\u5f97\u5230\u7ed3\u679c\u4e2d\u6bd4\u8f83\u6e05\u6670\u7684\u662f\u548c\u5377\u79ef\u6838\u957f\u5f97\u6bd4\u8f83\u50cf\u7684\u50cf\u7d20\u533a\u57df\uff0c\u800c\u5dee\u522b\u6bd4\u8f83\u5927\u7684\u5219\u88ab\u6a21\u7cca\u5904\u7406\u3002LoG\u7684visualization\u4e0e\u6591\u70b9\u6781\u5176\u76f8\u4f3c\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u7528\u6765\u8fdb\u884cblob detection.</p> <p></p> <p>\u5bf9\u4e8escale\u7684\u9009\u62e9\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3cHarris detector\u7684\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u653e\u7f29\u7684\u662fLoG\u7684\\(\\sigma\\) </p> <p></p> <p>Difference of Gaussian(DoG)</p> <ul> <li>Filter the image with two Gaussians</li> <li>Compute the difference of two filtered images</li> </ul> <p>LoG\u53ef\u4ee5\u7531\u4e24\u4e2a\u76f8\u90bb\\(\\sigma\\)\u7684Guassian\u8fdb\u884c\u8fd1\u4f3c</p> <p></p> <p>\u4e4b\u6240\u4ee5\u5f15\u5165DoG, \u662f\u56e0\u4e3a\u6211\u4eec\u5728\u4f7f\u7528LoG\u5904\u7406\u56fe\u50cf\u65f6\u4e5f\u662f\u8981\u8fdb\u884cGuassian\u6ee4\u6ce2\u7684\uff0c\u76f4\u63a5\u5c06\u6ee4\u6ce2\u540e\u7684\u76f8\u90bb\u4e24\u4e2a\u56fe\u50cf\u76f8\u51cf\u6548\u7387\u4f1a\u66f4\u9ad8\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec5/#summary-of-detection","title":"Summary of detection","text":"<ul> <li>What is a good feature point?<ul> <li>unique</li> <li>invariant to transformations</li> </ul> </li> <li>Popular detecors<ul> <li>Harris corner detector</li> <li>Blob detector(LoG,DoG)</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec5/#description","title":"Description","text":"<p>We know how to detect good points.</p> <p>Next question: How to match them?</p> <p>Answer:  Extract a descriptor for each point, find similar descriptors between the two images(\u6784\u5efa\u4e00\u4e2a\u63cf\u8ff0\u5b50)</p> <p>Patches with similar content should have similar descriptors</p> <p>\u9996\u5148\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5c06\u50cf\u7d20\u503c\u62c9\u957f\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u3002But this is very sensitive(i.e.,not invariant) to even small shifts, rotations.</p>"},{"location":"AI/cv/icv/lec5/#siftscale-invariant-feature-transform","title":"SIFT(Scale Invariant Feature Transform)","text":"<p>SIFT \u4f7f\u7528patch\u7684\u68af\u5ea6\u5206\u5e03(\u68af\u5ea6\u5411\u91cf\u7684\u65b9\u5411\u5206\u5e03)\u4f5c\u4e3a\u63cf\u8ff0\u5b50\u3002\u8be5\u65b9\u5411\u5fc5\u7136\u662f\u4f4d\u4e8e\\([0,2\\pi]\\)\u4e4b\u95f4\uff0c\u56e0\u6b64SIFT\u6784\u5efa\u4e00\u4e2a\u76f4\u65b9\u56fe\uff0c\u6765\u7edf\u8ba1\u5728\u6bcf\u4e2a\u533a\u95f4\uff08\u4f8b\u5982\u5341\u7b49\u5206\uff09\u6709\u591a\u5c11\u4e2a\u50cf\u7d20\u3002\\([0,2\\pi]\\)\u7b49\u5206\u4e2a\u6570\u5373\u4e3a\u63cf\u8ff0\u5b50\u7684\u7ef4\u5ea6\u3002</p> <p></p> <p>\u6b64\u65f6\u5bf9\u4e8e\u56fe\u50cf\u7684\u5e73\u79fb\u663e\u7136\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u4f46\u6211\u4eec\u8003\u8651\u65cb\u8f6c\u548cscale\u3002</p> <p>\u65cb\u8f6c\u4f1a\u6539\u53d8\u68af\u5ea6\u5411\u91cf\u7684\u65b9\u5411\uff0c\u5bfc\u81f4\u76f4\u65b9\u56fe\u5faa\u73af\u5e73\u79fb\u3002\u4f46\u8fd9\u4e2a\u60c5\u51b5\u5f88\u597d\u5904\u7406\uff1a\u6211\u4eec\u53ef\u4ee5\u9009\u4e2d\u6700\u5927\u7684\u5206\u91cf\u653e\u5728\u7b2c\u4e00\u4e2a\uff0c\u4f7f\u6574\u4e2a\u76f4\u65b9\u56fe\u5e73\u79fb\u5bf9\u9f50\uff0c\u79f0\u4f5c\u76f4\u65b9\u56fe\u7684\u5f52\u4e00\u5316(\u671d\u5411\u5f52\u4e00\u5316)</p> <p>\u5bf9\u4e8escaling\u6765\u8bf4\uff0cSIFT\u7684\u540d\u5b57scaling invariant \u53ef\u80fd\u4f1a\u6709\u4e9b\u8bef\u5bfc\u3002\u4f46\u5f88\u663e\u7136\u5730\uff0cSIFT\u672c\u8eab\u63cf\u8ff0\u5b50\u662fnot invariant to scaling\u7684(\u7f29\u653e\u540e\u533a\u57df\u5185\u7684\u5411\u91cf\u4e2a\u6570\u90fd\u53d1\u751f\u53d8\u5316\u4e86\u5440)\uff0c\u4f46\u5176\u5b9eSIFT\u662f\u7ecf\u8fc7DoG\u5904\u7406\u8fc7\u7684\uff0c\u5373\u5728\u68c0\u6d4b\u9636\u6bb5\u5df2\u7ecf\u786e\u5b9a\u4e86scale\u7684\u5927\u5c0f(\u6700\u4f73\u7684\\(\\sigma\\))\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u63d0\u53d6\u63cf\u8ff0\u5b50\u65f6\u5c31\u4e0d\u7528\u8003\u8651scale\u7684\u5f71\u54cd\u4e86\u3002</p> <p>Properties of SIFT</p> <p>Extraodinarily robust matching technique</p> <ul> <li>Can handle changes in viewpoint</li> <li>Can handle significant changes in illumination</li> <li>Fast and efficient-can run in real time</li> </ul> <p>Summary: SIFT algorithm</p> <ul> <li>Run DoG detector: find maxima in location/scale space</li> <li>Find dominate orientation</li> <li>For each (x,y,orientation), create descriptor</li> </ul>"},{"location":"AI/cv/icv/lec5/#matching","title":"Matching","text":"<p>\u73b0\u5728\u6211\u4eec\u627e\u5230\u4e86\u7279\u5f81\u70b9\uff0c\u5e76\u4e14\u6709\u4e86\u7279\u5f81\u70b9\u7684\u63cf\u8ff0\u65b9\u6cd5(\u63cf\u8ff0\u5b50),\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5c06\u5bf9\u5e94\u7684\u7279\u5f81\u70b9\u5339\u914d\u8d77\u6765,\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u8ba1\u7b97\u4e24\u4e2a\u63cf\u8ff0\u5b50\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb,\u5e76\u4e0e\u6700\u5c0f\u7684\u5339\u914d.</p> <p>\u4f46\u662f\u5f53\u4e24\u5f20\u56fe\u6709\u5f88\u76f8\u4f3c\u7684\u533a\u57df\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u9020\u6210\u6709\u6b67\u4e49\u7684\u5339\u914d\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u6211\u4eec\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5:</p>"},{"location":"AI/cv/icv/lec5/#ratio-test","title":"Ratio test","text":"<p>\u6211\u4eec\u5b9a\u4e49 ratio score: $$ \\frac{\\Vert f_1-f_2\\Vert}{\\Vert f_1-f_2^{'}\\Vert} $$</p> <p>\u5176\u4e2d\\(f_2\\)\u662f\\(f_1\\)\u7684bset match, \\(f_2^{'}\\)\u662fsecond best match</p> <p>\u5bb9\u6613\u5f97\u77e5,\u5f53\u5339\u914d\u6b63\u786e\u65f6,ratio score\u4f1a\u6bd4\u8f83\u5c0f, \u53cd\u4e4b,ambigous matches have large ratioi scores.</p>"},{"location":"AI/cv/icv/lec5/#mutual-nearest-neighbour","title":"Mutual nearest neighbour","text":"<p>find mutual nearest neighbours \u5982\u679c\u5339\u914d\u6b63\u786e\u7684\u8bdd,\u6211\u4eec\u5bf9\\(f_2\\)\u5bfb\u627e\u6700\u4f73\u5339\u914d\uff0c\u90a3\u4e48\u5e94\u8be5\u4e5f\u662f\\(f_1\\).</p> <ul> <li>\\(f_1\\) is the nearest neighbour of \\(f_2\\) in \\(I_1\\)</li> <li>\\(f_2\\) is the nearest neighbour of \\(f_1\\) in \\(I_2\\)</li> </ul>"},{"location":"AI/cv/icv/lec5/#deep-learning-for-feature-matching","title":"Deep learning for feature matching","text":"<p>\u8868\u73b0\u5f97\u6bd4\u4f20\u7edf\u65b9\u6cd5\u597d\u5f88\u591a</p> <p></p>"},{"location":"AI/cv/icv/lec5/#motion-estimation","title":"Motion Estimation","text":"<p>The cause of motion - Static camera, moving scene - Moving cameera, static scene - Moving camera, moving scene - Static camera, moving scene, moving light</p> <p>Motion estimation problems - Feature tracking     - Extract featur points and track them over multiple frames.(\u5373\u7ed9\u51fa\u4e24\u5e27\u753b\u9762\uff0c\u4f30\u8ba1\u7279\u5f81\u70b9\u7684\u8fd0\u52a8\u65b9\u5411)     - Output: displacement of sparse points - Optical flow     - Recover image motion at each pixel     - Output: dense displacement field</p> <p>\u4e8c\u8005\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8efeature tracking\u8f93\u51fa\u662f\u79bb\u6563\u7684,\u4ec5\u9650\u4e8e\u67d0\u4e9b\u7279\u5f81\u70b9;\u800coptical flow\u8f93\u51fa\u662f\u8fde\u7eed\u7684,\u4f30\u8ba1\u7684\u662f\u6574\u5f20\u56fe\u7247</p> <p>\u4f46\u4e8c\u8005\u4f7f\u7528\u7684\u65b9\u6cd5\u90fd\u662f\u4e00\u6837\u7684\uff1a Lucas-Kanade method</p> <p></p> <p>LK\u7b97\u6cd5\u7684\u4e09\u4e2a\u4e3b\u8981\u5047\u8bbe:</p> <ul> <li>small motion: points do not move very far</li> <li>brightness constancy: same point looks the same in every frame</li> <li>spatial coherence: points move like their neighbours</li> </ul> <p>\u57fa\u4e8e\u4e0a\u8ff0\u4e09\u4e2a\u5047\u8bbe\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7684\u65b9\u7a0b\uff1a</p> <ul> <li>Brightness Constancy Equation:</li> </ul> \\[ I(x,y,t)=I(x+u,y+v,t+1) \\] <ul> <li>Taylor expansion assuming small motion:</li> </ul> \\[ I(x+u,y+v,t+1) \\approx I(x,y,t)+I_xu+I_yv+I_t\\\\ I(x+u,y+v,t+1)-I(x,y,t)=I_xu+I_yv+I_t\\\\ I_x\\cdot u+I_y\\cdot v+I_t \\approx 0 \\] <p>\u6240\u4ee5\u5f97\u5230 $$ \\nabla I\\cdot \\begin{bmatrix}u&amp;v\\end{bmatrix}^T+I_t=0 $$</p> <p>\u6211\u4eec\u6709\u4e24\u4e2a\u672a\u77e5\u6570\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u65b9\u7a0b\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u7528\u5230\u53e6\u4e00\u4e2a\u5047\u8bbe\uff1a spatial coherence constraint: - \u5728\u5f53\u524d\u50cf\u7d20\u90bb\u57df\u7684\u50cf\u7d20\u8fd0\u52a8\u65b9\u5411\u76f8\u540c - \u6240\u4ee5\u5982\u679c\u6211\u4eec\u4f7f\u7528\\(5\\times 5\\)\u7684\u7a97\u53e3\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u523025\u4e2a\u65b9\u7a0b!</p> \\[ \\begin{bmatrix}I_x(p_1)&amp;I_y(p_1)\\\\\\vdots&amp;\\vdots\\\\ I_x(p_{25})&amp;I_y(p_{25})\\end{bmatrix}=-\\begin{bmatrix}I_t(p_1)\\\\ \\vdots\\\\ I_t(p_{25})\\end{bmatrix} \\] <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u89e3 \\(\\mathop{min}_d \\Vert Ad-b\\Vert^2\\),\u5f97\u5230\\((A^TA)d=A^Tb\\),\u5373 $$ \\begin{bmatrix}\\sum I_xI_x&amp;\\sum I_xI_y\\ \\sum I_xI_y&amp;\\sum I_yI_y \\end{bmatrix}\\begin{bmatrix}u\\ v\\end{bmatrix}=-\\begin{bmatrix}\\sum I_xI_t\\ \\sum I_yI_t\\end{bmatrix} $$</p> <p>\u5f53\\(A^TA\\)\u53ef\u9006\u4e14\u4e24\u4e2a\u7279\u5f81\u503c\u4e0d\u80fd\u592a\u5c0f\u7684\u65f6\u5019,\u8be5\u65b9\u7a0b\u6709\u89e3,\u8fd9\u4e2a\u6761\u4ef6\u548c\u4e4b\u524d\u4ecb\u7ecd\u7684Harris corner detector \u7684\u6761\u4ef6\u662f\u4e00\u6837\u7684!</p> <p>\u4e0d\u80fd\u9884\u6d4b\u8fd0\u52a8\u7684\u60c5\u51b5</p> <ul> <li> <p>Low Texture Region: gradients have small magnitude</p> </li> <li> <p>Edge: Large \\(\\lambda_1\\), small \\(\\lambda_2\\),\u53ea\u80fd\u4f30\u8ba1\u4e00\u4e2a\u65b9\u5411\u7684\u8fd0\u52a8\u3002(analogy:aperture problem)</p> </li> </ul> <p>\u4f46\u662f\u5982\u679c\u5b9e\u9645\u60c5\u51b5\u4e0d\u7b26\u5408\u4e0a\u8ff0\u4e09\u4e2a\u5047\u8bbe\u65f6,LK\u7b97\u6cd5\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898</p> <p>\u5bf9\u4e8e\u4e0d\u6ee1\u8db3small motion\u7684\u60c5\u51b5(\u6bd4\u5982\u8bf4\u7279\u5f81\u70b9\u5b9e\u9645\u4e0a\u79fb\u52a8\u4e86\u516b\u4e2a\u50cf\u7d20)\uff0c\u6211\u4eec\u6709\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3</p> <p>\u4e00\u4e2a\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u5c06\u56fe\u7247\u7f29\u5c0f\u5230\u539f\u6765\u7684\u516b\u5206\u4e4b\u4e00,\u5728\u7f29\u5c0f\u540e\u7684\u56fe\u7247\u4e2d\u5904\u7406\u4e4b\u540e\u518d\u653e\u5927\u56de\u53bb.\u4f46\u662f\u8be5\u65b9\u6cd5\u7684\u7f3a\u70b9\u5c31\u662f\u5728\u7f29\u5c0f\u56fe\u7247\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4e22\u5931\u4fe1\u606f\uff0c\u8fd9\u6837\u56fe\u50cf\u79fb\u52a8\u8ddd\u79bb\u7684\u7cbe\u5ea6\u5c31\u65e0\u6cd5\u4fdd\u8bc1\u3002</p> <p>\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u4f7f\u7528\u50cf\u7d20\u91d1\u5b57\u5854\u3002\u5176\u4e2d\u91d1\u5b57\u5854\u4e00\u662f\u65f6\u95f4\u4e3a\\(t\\)\u65f6\u7684\u56fe\u50cf,\u91d1\u5b57\u5854\u4e8c\u662f\u65f6\u95f4\u4e3a\\(t+1\\)\u65f6\u7684\u56fe\u50cf\u3002\u5728\u91d1\u5b57\u5854\u4e0a\u9010\u5c42\u4f30\u8ba1,\u5e76\u9010\u6b65\u7ec6\u5316\u3002\u4f8b\u5982\u5148\u4f30\u8ba1\u8fd0\u52a8\u8ddd\u79bb\u5c0f\u4e8e\u4e00\u4e2a\u50cf\u7d20\u7684\u6700\u4e0a\u5c42\u56fe\u50cf\uff0c\u6839\u636e\u6b64\u4f30\u8ba1\u5728\u91d1\u5b57\u5854\u4e00\u4e2d\u7684\u7b2c\u4e8c\u5c42\u6062\u590d\u51fa\u8fd0\u52a8\uff0c\u518d\u4e0e\u91d1\u5b57\u5854\u4e8c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6b64\u65f6\u7279\u5f81\u70b9\u79fb\u52a8\u7684\u8ddd\u79bb\u7ecf\u8fc7\u8f83\u4e3a\u51c6\u786e\u7684\u4f30\u8ba1\u540e\u4e5f\u5c0f\u4e8e\u4e00\u4e2a\u50cf\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p></p> <p>Applications</p> <ul> <li> <p>Video stablization</p> </li> <li> <p>Video denoising</p> </li> </ul>"},{"location":"AI/cv/icv/lec6/","title":"Image Stitching","text":"<p> \u7ea6 817 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec6/#image-warping","title":"Image Warping","text":"<p>\u4e0elec3\u4ecb\u7ecd\u7684image filtering\u76f8\u6bd4\u8f83\uff0cfiltering\u6539\u53d8\u7684\u662f\u56fe\u50cf\u7684\u50cf\u7d20\u503c(intensity),\u800cwarping\u6539\u53d8\u7684\u662f\u56fe\u50cf\u7684\u5f62\u72b6(shape)</p>"},{"location":"AI/cv/icv/lec6/#parametric-global-warping","title":"Parametric global warping","text":"<p>\u6211\u4eec\u5173\u6ce8\u7684\u662f\u53c2\u6570\u5316\u5168\u5c40\u53d8\u5f62,\u5373\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u5750\u6807\u90fd\u9075\u5faa\u540c\u4e00\u4e2a\u53d8\u6362\u51fd\u6570\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec6/#projective-transformationhomography","title":"Projective Transformation(Homography)","text":"<p>\u56de\u987e\u4eff\u5c04\u53d8\u6362\u7684\u9f50\u6b21\u5750\u6807\u8868\u793a:</p> <p>$$ \\begin{pmatrix}x^{'}\\ y^{'}\\ 1\\end{pmatrix}=\\begin{pmatrix}a&amp;b&amp;t_x\\ c&amp;d&amp;t_y\\ 0&amp;0&amp;1\\end{pmatrix}\\begin{pmatrix}x\\ y\\ 1\\end{pmatrix} $$ \u5bf9\u4e8e\u4eff\u5c04\u6295\u5f71(or \u5355\u5e94\u53d8\u6362), \u77e9\u9635\u7684\\(a_{31},a_{32}\\)\u4e0d\u4e00\u5b9a\u4e3a\u96f6:</p> <p></p> <ul> <li>\u5355\u5e94\u6027\u77e9\u9635\u7684\u81ea\u7531\u5ea6\u4e3a8,\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u9664\u4ee5\\(h_{22}\\)\u4f7f\u5f97\u77e9\u9635\u7684\\(H_{33}\\)\u4e3a1\uff0c\u7ed3\u679c\u662f\u4fdd\u6301\u4e0d\u53d8\u7684\u3002</li> <li>\u5728\u5904\u7406\u4e0a\uff0c\u6211\u4eec\u901a\u5e38\u505a\u7684\u9650\u5236\u662f\u4f7f\u5411\u91cf\\([h_{00},h_{01},\\cdots,h_{22}]\\)\u7684\u957f\u5ea6\u4e3a1</li> </ul> <p>\u4e0b\u56fe\u662f\u4e00\u4e2a\u5355\u5e94\u6027\u53d8\u5316\u7684\u4f8b\u5b50</p> <p></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f, \u7531\u4e8e\u5355\u5e94\u6027\u53d8\u5316\u4e24\u5f20\u56fe\u7247\u7684\u5750\u6807\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\u53ea\u6709\u5f53\u76f8\u673a\u4e2d\u5fc3\u4fdd\u6301\u4e0d\u53d8\u65f6\u4e24\u5f20\u56fe\u7247\u624d\u7b26\u5408\u5355\u5e94\u53d8\u5316\u3002</p> <ul> <li>Camera rotated with its center unmoved</li> <li>Camera center moved and the scene is a plane</li> </ul> <p></p>"},{"location":"AI/cv/icv/lec6/#summary-of-2d-transformations","title":"Summary of 2D transformations","text":""},{"location":"AI/cv/icv/lec6/#implementing-image-warping","title":"Implementing image warping","text":"<p>\u6216\u8bb8\u6211\u4eec\u4f1a\u60f3\uff0c\u5b9e\u73b0warping\u4e0d\u662f\u5f88\u5bb9\u6613\u5417\uff0c\u53ea\u8981\u628a\u5f53\u524d\u56fe\u7247\u7684\u5750\u6807\u503c\u6839\u636e\u53d8\u5316\u51fd\u6570\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5750\u6807\u4e0a\u5c31\u884c\u4e86\u3002 \u4f46\u662f\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u524d\u7684\u50cf\u7d20\u5750\u6807\u6620\u5c04\u540e\u5904\u4e8e\u4e24\u4e2a\u50cf\u7d20\u4e2d\u95f4(\u53ef\u4ee5\u7406\u89e3\u4e3a\u50cf\u7d20\u503c\u662f\u5b58\u653e\u5728\u683c\u70b9\u4e0a\u7684\uff0c\u6620\u5c04\u540e\u7684\u50cf\u7d20\u4f4d\u7f6e\u4e0d\u4e00\u5b9a\u5728\u683c\u70b9\u4e0a)</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u91c7\u53d6\u9006\u53d8\u6362, \u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u627e\u7684\u50cf\u7d20\u70b9\uff0c\u53bb\u627e\u53d8\u6362\u524d\u7684\u5750\u6807\uff0c\u5982\u679c\u5750\u6807\u4e0d\u5728\u50cf\u7d20\u70b9\u4e0a\u5c31\u4f7f\u7528\u5468\u56f4\u7684\u50cf\u7d20\u8fdb\u884c\u63d2\u503c\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec6/#image-stitching_1","title":"Image Stitching","text":"<p>\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u5c31\u662f\u7ed9\u5b9a\u4e24\u5f20\u56fe\u7247, \u5982\u4f55\u8ba1\u7b97\u51fa\u53d8\u6362\u77e9\u9635?</p> <p>\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u7684\u65b9\u6cd5(DLT)</p> <p></p> <p></p> <p></p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c42\u89e3\u4f18\u5316\u95ee\u9898:  $$ min\\Vert Ah-0\\Vert ^2 $$ \u53ef\u4ee5\u5f97\u5230\\(h\\)\u5c31\u662f\\(A^TA\\)\u5bf9\u5e94\u6700\u5c0f\u7279\u5f81\u503c\u7684\u7279\u5f81\u5411\u91cf\uff0c\u63a8\u5bfc\u8fc7\u7a0b</p>"},{"location":"AI/cv/icv/lec6/#ransac-for-translation","title":"RANSAC for Translation","text":"<p>Recap the Idea:</p> <ul> <li>All the inliers will agree with each other on the translation vector;</li> <li>The outliers will disagree with each other( RANSAC only ha guarantees if there are &lt;50% outliers)</li> </ul> <p>All good matches are alike; every bad match is bad in its own way.</p> <p>\u2014\u2014Tolstoy via Alyosha Efros</p> <p></p> <p>\u6bcf\u6b21\u968f\u673a\u9009\u4e00\u7ec4\u5bf9\u5e94\u70b9\uff0c\u8ba1\u7b97\u7968\u6570\uff0c\u6700\u540e\u8981\u5c06\u7968\u6570\u6700\u9ad8\u7684\\(H\\)\u5bf9\u5e94\u7684\u6240\u6709\u70b9\u62ff\u51fa\u6765\u505a\u4e00\u6b21\u6700\u5c0f\u4e8c\u4e58\u3002</p> <p>Summary for image stitching</p> <ul> <li>Input images</li> <li>Feature matching</li> <li>Compute transformation matrix with RANSAC</li> <li>Fix image 1 and warp image 2.</li> </ul> <p></p>"},{"location":"AI/cv/icv/lec6/#panoramas","title":"Panoramas","text":"<p>\u5bf9\u4e8e\u5168\u666f\uff0c\u6211\u4eec\u5904\u7406\u7684\u662f\u591a\u5f20\u56fe\u7247\u7684\u62fc\u63a5\u3002</p> <p>\u6700\u6734\u7d20\u7684\u65b9\u6cd5\u5c31\u662f\u53d6\u6700\u4e2d\u95f4\u7684\u56fe\u7247\u4f5c\u4e3a\u53c2\u8003\uff0c\u5176\u5b83\u6240\u6709\u7684\u56fe\u7247\u4e0e\u4e2d\u95f4\u90a3\u5f20\u5bf9\u9f50</p> <p>\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u8fb9\u7f18\u56fe\u50cf\u7684\u5f62\u53d8\u5f88\u660e\u663e\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec6/#cylindrical-projection","title":"Cylindrical Projection","text":"<p>\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u67f1\u5f62\u6295\u5f71 (cylindrical projection)\u7684\u65b9\u6cd5</p> <p></p> <p></p> <p>\u67f1\u5f62\u6295\u5f71\u4f7f\u5f97\u53d8\u5316\u53d8\u7b80\u5355\u4e86: \u76f8\u673a\u7684\u65cb\u8f6c\u5728\u5706\u67f1\u4e0a\u662f\u5e73\u79fb</p>"},{"location":"AI/cv/icv/lec6/#assembling-the-panorama","title":"Assembling the panorama","text":"<p>\u5728\u67f1\u5f62\u6295\u5f71\u7684\u57fa\u7840\u4e0a\u8fd8\u662f\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u5c31\u662f\u8bef\u5dee\u7684\u79ef\u7d2f\uff0c\u5bfc\u81f4\u6f02\u79fb\u3002</p> <p></p> <p>\u6211\u4eec\u5e0c\u671b\u6574\u4f53\u8bef\u5dee\u7684\u548c\u4e3a0\uff0c\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u5c06\u6700\u540e\u4e00\u5f20\u56fe\u548c\u7b2c\u4e00\u5f20\u56fe\u4e4b\u95f4\u4e5f\u8fdb\u884c\u4e2a\u7ea6\u675f\u3002</p>"},{"location":"AI/cv/icv/lec7/","title":"Lec7: Structure from Motion","text":"<p> \u7ea6 2207 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p> <p>Structure from Motion, \u4e2d\u6587\u540d\u4e3a\u8fd0\u52a8\u6062\u590d\u7ed3\u6784\u3002\u8fd9\u662f\u4e00\u79cd\u4e09\u7ef4\u91cd\u5efa\u7684\u7b97\u6cd5\uff0c\u901a\u8fc7\u4e24\u4e2a\u6216\u591a\u4e2a\u573a\u666f(\u56fe\u7247)\u6765\u6062\u590d\u76f8\u673a\u4f4d\u59ff\u5e76\u91cd\u5efa\u4e09\u7ef4\u5750\u6807\u70b9\u3002</p> <p>Recover camera poses and 3D structure of a scene</p> <p>\u9700\u8981\u89e3\u51b3\u7684\u51e0\u4e2a\u5173\u952e\u95ee\u9898</p> <ul> <li>\u76f8\u673a\u662f\u5982\u4f55\u5c06\u4e09\u7ef4\u5750\u6807\u70b9\u6620\u5c04\u5230\u56fe\u50cf\u5e73\u9762\u4e0a\u7684\uff1f(camera model)</li> <li>\u5982\u4f55\u8ba1\u7b97\u76f8\u673a\u5728\u4e16\u754c\u5750\u6807\u7cfb\u4e0b\u7684\u4f4d\u7f6e\u548c\u65b9\u5411?(camera calibration and pose estimation)</li> <li>\u5982\u4f55\u4ece\u56fe\u50cf\u4e2d\u91cd\u5efa\u51fa\u4e0d\u77e5\u9053\u7684\u4e09\u7ef4\u7ed3\u6784\uff1f(structure from motion)</li> </ul>"},{"location":"AI/cv/icv/lec7/#camera-model","title":"Camera Model","text":"<p>\u9996\u5148\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u56fe\u50cf\u5f62\u6210\u7684\u8fc7\u7a0b</p> <p></p> <p>\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u5750\u6807\u7cfb\u53d8\u6362:\u5c06\u4e16\u754c\u5750\u6807\u7cfb\u7684\u70b9\u53d8\u6362\u5230\u76f8\u673a\u5750\u6807\u7cfb</li> <li>\u900f\u89c6\u6295\u5f71\uff1a\u5c06\u76f8\u673a\u5750\u6807\u7cfb\u7684\u70b9\u6295\u5f71\u5230\u50cf\u5e73\u9762\u4e0a</li> <li>\u6210\u50cf\u5e73\u9762\u8f6c\u5316\u4e3a\u50cf\u7d20\u5e73\u9762\uff1a\u5b8c\u6210\u900f\u89c6\u6295\u5f71\u540e\u6211\u4eec\u5f97\u5230\u7684\u5750\u6807\u5355\u4f4d\u662f\u957f\u5ea6\u5355\u4f4d(\u6beb\u7c73\uff0c\u7c73\u7b49),\u4f46\u662f\u8ba1\u7b97\u673a\u4e0a\u8868\u793a\u5750\u6807\u662f\u4ee5\u50cf\u7d20\u4e3a\u57fa\u672c\u5355\u5143\u7684\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u8fdb\u884c\u4e00\u4e2a\u8f6c\u5316\u3002</li> </ul> <p>\u800c\u8fd9\u4e00\u7cfb\u5217\u8fc7\u7a0b\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u77e9\u9635(\u4e24\u6b21\u53d8\u6362):</p> <ul> <li>\u5916\u53c2\u77e9\u9635(Extrinsic Matrix): \u5750\u6807\u7cfb\u53d8\u6362</li> <li>\u5185\u53c2\u77e9\u9635(Intrinsic Matrix): \u900f\u89c6\u6295\u5f71\u4e0e\u8f6c\u5316\u4e3a\u50cf\u7d20\u5e73\u9762</li> </ul> <p>\"\u5916\" \"\u5185\" \u7684\u6982\u5ff5\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5bf9\u5e94\u4e8e\u53d1\u751f\u4e8e\u76f8\u673a\u5916\u90e8\u548c\u5185\u90e8\u7684\u53d8\u6362\u3002</p>"},{"location":"AI/cv/icv/lec7/#coordinate-transformation","title":"Coordinate Transformation","text":"<p>\u5b9a\u4e49\u5916\u53c2\\((R,c_w)\\) \u5206\u522b\u4ee3\u8868\u4ece\u4e16\u754c\u5750\u6807\u5411\u76f8\u673a\u5750\u6807\u7684\u65cb\u8f6c\u77e9\u9635\u548c\u5728\u4e16\u754c\u5750\u6807\u7cfb\u4e0b\u76f8\u673a\u4e2d\u5fc3\u7684\u5750\u6807\u3002\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u56e0\u6b64\u53d8\u6362\u540e\u7684\u5750\u6807: $$ x_c=R(x_w-c_w)=Rx_w-Rc_w=Rx_w+t,\\,t=-Rc_w $$ \u5373</p> <p></p> <p>\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u76f8\u673a\u5916\u53c2\u77e9\u9635\\(M_{ext}\\)</p> <p></p>"},{"location":"AI/cv/icv/lec7/#perspective-projection","title":"Perspective Projection","text":"<p>\u8fd9\u5728lec2\u5df2\u7ecf\u4ecb\u7ecd\u8fc7</p> <p></p>"},{"location":"AI/cv/icv/lec7/#image-plane-to-image-sensor-mapping","title":"Image Plane to Image Sensor Mapping","text":"<p>\u9996\u5148\u9700\u8981\u5c06\u957f\u5ea6\u5355\u4f4d\u8f6c\u5316\u4e3a\u50cf\u7d20\u5355\u4f4d</p> <p></p> <p>\u5176\u6b21\uff0c\u8981\u8fdb\u884c\u5750\u6807\u539f\u70b9\u7684\u8f6c\u5316\u3002\u6210\u50cf\u5e73\u9762\u7684\u539f\u70b9\u5728\u76f8\u673a\u5149\u8f74\u4e0e\u5e73\u9762\u7684\u4ea4\u70b9(\u4e00\u822c\u5728\u56fe\u50cf\u6b63\u4e2d\u95f4),\u800c\u6211\u4eec\u4e00\u822c\u628a\u56fe\u50cf\u5de6\u4e0a\u89d2\u4f5c\u4e3a\u50cf\u7d20\u5e73\u9762\u7684\u539f\u70b9\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u76f8\u673a\u7684\u5185\u53c2\u77e9\u9635:</p> <p></p>"},{"location":"AI/cv/icv/lec7/#projection-matrix","title":"Projection Matrix","text":"<p>\u7efc\u5408\u76f8\u673a\u7684\u5185\u53c2\u548c\u5916\u53c2\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u603b\u7684\u6295\u5f71\u77e9\u9635</p> <p></p>"},{"location":"AI/cv/icv/lec7/#camera-calibration","title":"Camera Calibration","text":"<p>\u6709\u4e86\u5185\u53c2\u548c\u5916\u53c2\u77e9\u9635\u7684\u5b9a\u4e49\u540e\uff0c\u6211\u4eec\u5c31\u60f3\u901a\u8fc7\u50cf\u7d20\u5750\u6807\u548c\u5b9e\u9645\u7a7a\u95f4\u5750\u6807\u6765\u5f97\u5230\u8fd9\u4e24\u4e2a\u77e9\u9635\u3002</p> <p>\u6211\u4eec\u9700\u8981\u540c\u65f6\u77e5\u9053\u82e5\u5e72\u50cf\u7d20\u70b9\u7684\u4f4d\u7f6e\u548c3D\u4e16\u754c\u5750\u6807\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u4e2a\u4e1c\u897f(\u6807\u5b9a\u677f\uff09\u80fd\u591f\u4f7f\u6211\u4eec\u65b9\u4fbf\u6d4b\u91cf\u8fd9\u4e24\u79cd\u5750\u6807\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u9ed1\u767d\u68cb\u76d8\u4f5c\u4e3a\u6807\u5b9a\u677f,\u5b83\u7684\u5750\u6807\u4f4d\u7f6e\u662f\u5f88\u65b9\u4fbf\u8ba1\u7b97\u7684\u3002\u4ee5\u5176\u4e3a\u6807\u5b9a\u677f\u4e3a\u4f8b\uff0c\u76f8\u673a\u6807\u5b9a\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <ul> <li>\u7ed9\u5b9a\u4e00\u4e2a\u51e0\u4f55\u7279\u6027\u5df2\u77e5\u7684\u6807\u5b9a\u677f\uff0c\u4eba\u4e3a\u5b9a\u4e49\u4e16\u754c\u5750\u6807\u7cfb(\u5c3d\u53ef\u80fd\u65b9\u4fbf\u8ba1\u7b97)</li> <li>\u5bfb\u627e\u7279\u5b9a\u5173\u952e\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u90fd\u662f\u4e00\u4e2a3D\u70b9\u548c\u4e00\u4e2a2D\u70b9\u7684\u5bf9\u5e94</li> </ul> <p></p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5bf9\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u7a0b\u8868\u793a\u51fa\u5bf9\u5e94\u5173\u7cfb\uff0c\u91c7\u7528\u4e4b\u524d\u6c42\u89e3\u5355\u5e94\u6027\u77e9\u9635\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u6295\u5f71\u77e9\u9635\\(P\\).</li> </ul> <p></p> <p>\u6709\u4e86\u6295\u5f71\u77e9\u9635\\(P\\)\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5f97\u5230\u5185\u53c2\u548c\u5916\u53c2\u77e9\u9635\u5462\uff1f</p> <p>\u901a\u5e38\u6765\u8bf4\uff0c\u5c06\u4e00\u4e2a\u77e9\u9635\u5206\u89e3\u4e3a\u4e24\u4e2a\u7279\u5b9a\u77e9\u9635\u662f\u505a\u4e0d\u5230\u7684\uff0c\u4f46\u662f\u6211\u4eec\u7684\u5185\u53c2\u77e9\u9635\u662f\u4e00\u4e2a\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u4e14\u5916\u53c2\u77e9\u9635\u4e2d\u7684\u5b50\u77e9\u9635\u65cb\u8f6c\u77e9\u9635\u662f\u6b63\u4ea4\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\\(QR\\)\u5206\u89e3\u5b9e\u73b0\u5bf9\u5185\u53c2\u77e9\u9635\u548c\u65cb\u8f6c\u77e9\u9635\u7684\u6c42\u89e3\u3002</p> <p></p> <p>\u800c\u5bf9\u4e8e\u5916\u53c2\u77e9\u9635\u4e2d\u7684\u5e73\u79fb\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7QR\u5206\u89e3\u5f97\u5230\u7684\u5185\u53c2\u77e9\u9635\u5f97\u5230</p> <p></p>"},{"location":"AI/cv/icv/lec7/#visual-localization-problem","title":"Visual Localization Problem","text":"<p>\u89c6\u89c9\u5b9a\u4f4d\uff0c\u901a\u8fc7\u7167\u7247\u8ba1\u7b97\u51fa\u62cd\u6444\u8005\u7684\u4f4d\u7f6e(\u5373\u76f8\u673a\u7684\u5916\u53c2)\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u5b9a\u573a\u666f\u7684\u5730\u56fe\u548c\u76f8\u673a\u7684\u5185\u53c2\u90fd\u5df2\u77e5\u3002</p> <p>\u57fa\u672c\u6b65\u9aa4</p> <ul> <li>\u627e\u51fa3D\u70b9\u4e0e2D\u70b9\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u672c\u8d28\u4e0a\u662f\u56fe\u50cf\u7684\u7279\u5f81\u5339\u914d</li> <li>\u6c42\u89e3\u76f8\u673a\u7684\u4f4d\u59ff\uff0c\u79f0\u4f5cPnP\u95ee\u9898(Perspective-n-Point\uff0c\u591a\u70b9\u900f\u89c6\u6210\u50cf\uff0c\u662f\u76f8\u673a\u6807\u5b9a\u7684\u5b50\u95ee\u9898)</li> </ul> <p>\u5bf9\u4e8ePnP\u95ee\u9898\uff0c\u6211\u4eec\u75316\u4e2a\u672a\u77e5\u7684\u53c2\u6570\uff0c3\u4e2a\u65cb\u8f6c\uff0c3\u4e2a\u5e73\u79fb\uff0c\u56e0\u6b64\u8be5\u95ee\u9898\u4e5f\u79f0\u4f5c6\u81ea\u7531\u5ea6\u4f4d\u59ff\u4f30\u8ba1\u95ee\u9898\u3002\u7531\u4e8e\u4e00\u4e2a\u70b9\u5bf9\u5bf9\u5e94\u4e24\u4e2a\u65b9\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u81f3\u5c11\u9700\u89813\u4e2a\u70b9\u5bf9\u6765\u6c42\u89e3PnP\u95ee\u9898\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u70b9\u6765\u4fdd\u8bc1\u7b54\u6848\u7684\u552f\u4e00\u6027(\u5426\u5219\u4f1a\u6709\u56db\u4e2a\u89e3)\u3002</p> <p>P3P</p> <p>P3P\u5c31\u662f\u4f7f\u7528\u6700\u5c11\u7684\u70b9\u5bf9\u6765\u6c42\u89e3\u76f8\u673a\u4f4d\u59ff\uff0c\u4f7f\u7528\u51e0\u4f55\u4e0a\u7684\u65b9\u6cd5\u3002</p> <p>\u6c42\u89e3P3P</p> <p></p> <p></p> <p></p> <p></p> <p>PnP \u5f53\\(n&gt;3\\)\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06PnP\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4f18\u5316\u95ee\u9898\u3002</p> <p>\u5373\u6700\u5c0f\u5316\u91cd\u6295\u5f71\u8bef\u5dee(reprojection error) \u7ed9\u5b9a\u76f8\u673a\u7684\u5916\u53c2\uff0c\u628a\u4e09\u7ef4\u70b9\u6295\u5f71\u5230\u56fe\u50cf\u4e0a\uff0c\u5982\u679c\u5916\u53c2\u662f\u5bf9\u7684\uff0c\u5219\u6295\u5f71\u70b9\u548c\u7279\u5f81\u70b9\u662f\u4e00\u6837\u7684\u3002</p> <p>$$ \\mathop{min}\\limits_{R,t}\\sum_i\\Vert p_i-K(RP_i+t)\\Vert^2 $$ \u6211\u4eec\u4f7f\u7528P3P\u95ee\u9898\u7684\u89e3\u6765\u521d\u59cb\u5316\uff0c\u5e76\u7528\u9ad8\u65af\u725b\u987f\u6cd5\u8fdb\u884c\u4f18\u5316</p>"},{"location":"AI/cv/icv/lec7/#structrue-from-motion","title":"Structrue from motion","text":"<p>\u518d\u56de\u987e\u4e00\u4e0bSfM\u7684\u4efb\u52a1\uff1a \u4ece\u591a\u89c6\u89d2\u573a\u666f(\u56fe\u7247)\u6062\u590d\u76f8\u673a\u4f4d\u59ff\uff0c\u5e76\u91cd\u5efa\u4e09\u4f4d\u70b9\u5750\u6807\u3002\u89e3\u51b3SfM\u95ee\u9898\uff0c\u4e00\u822c\u901a\u8fc7\u5982\u4e0b\u7684\u5047\u8bbe\u4e0e\u6b65\u9aa4\uff1a</p> <ul> <li>Assume intrinsic matrix \\(K\\) is known for each camera.</li> <li>Find a few reliable corresponding points</li> <li>Find relative camera position \\(t\\) and orientation \\(R\\)</li> <li>Find 3D position of scene points</li> </ul>"},{"location":"AI/cv/icv/lec7/#epipolar-geometry","title":"Epipolar Geometry","text":"<p>\u6211\u4eec\u9996\u5148\u60f3\u8981\u5f97\u5230\u4e0d\u540c\u89c6\u89d2\u4e24\u5f20\u56fe\u7247\u7279\u5f81\u70b9\u4e4b\u95f4(2D projections of a 3D point in 2 views)\u5bf9\u5e94\u7684\u51e0\u4f55\u5173\u7cfb\u3002</p> <p>Epipolar geometry tells us how to solve \\(t\\) and \\(R\\) given a few pairs of 2D correspondences.</p> <p></p>"},{"location":"AI/cv/icv/lec7/#terminology","title":"\u4e00\u4e9bterminology","text":"<ul> <li>\u57fa\u7ebf\uff1a\u4e24\u4e2a\u76f8\u673a\u4e2d\u5fc3\u7684\u8fde\u7ebf\uff0c\\(OO^{'}\\)</li> <li>\u5bf9\u6781\u70b9\uff1a\u4e24\u4e2a\u76f8\u673a\u4e2d\u5fc3\u8fde\u7ebf\u4e0e\u50cf\u5e73\u9762\u7684\u4ea4\u70b9\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u4e00\u4e2a\u76f8\u673a\u89c6\u89d2\u4e0b\u53e6\u4e00\u4e2a\u76f8\u673a\u5728\u8be5\u76f8\u673a\u5e73\u9762\u7684\u6295\u5f71\u70b9\uff0c\u5982\u56fe\u4e2d\u7684\\(e_l,e_r\\)\u3002</li> <li>\u5bf9\u6781\u5e73\u9762: \u7531\u5b9e\u9645\u70b9\\(P\\), \u4e24\u4e2a\u76f8\u673a\u4e2d\u5fc3\u5f62\u6210\u7684\u5e73\u9762\u3002\u5bf9\u4e8e\u67d0\u4e2a\u573a\u666f\u4e2d\u7684\u70b9\uff0c\u5176\u5bf9\u6781\u9762\u662f\u552f\u4e00\u7684\u3002</li> <li>\u5bf9\u6781\u7ebf\uff1a\u5bf9\u6781\u9762\u4e0e\u6210\u50cf\u5e73\u9762\u7684\u4ea4\u7ebf\u3002</li> </ul>"},{"location":"AI/cv/icv/lec7/#epipolar-constraint","title":"Epipolar Constraint","text":"<p>\u6781\u5e73\u9762\u7684\u6cd5\u5411\u91cf\\(n=t\\times x_l\\),  \u5b83\u4e0e\u5e73\u9762\u4e0a\u4efb\u4f55\u70b9\u7684\u5185\u79ef\u4e3a0\uff0c\u5373\\(x_l\\cdot (t\\times x_l)=0\\).</p> <p>\u6211\u4eec\u628a\u8fd9\u4e2a\u5f0f\u5b50\u5199\u6210\u77e9\u9635\u5f62\u5f0f\uff0c\u5e76\u5f15\u5165\u53c9\u4e58\u77e9\u9635\uff1a</p> <p></p> <p></p> <p>\u7531\u4e8e\\(T_{\\times}\\)\u662f\u4e00\u4e2a\u53cd\u5bf9\u79f0\u77e9\u9635\uff0c\\(R\\)\u662f\u6b63\u4ea4\u77e9\u9635\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5947\u5f02\u503c\u5206\u89e3\\(E=T_{\\times}R\\) \u8ba1\u7b97\u51fa\\(t,R\\).</p> <p>\u4f46\u662f\\((x_l,y_l,z_l)\\) \u662f\u573a\u666f\u70b9\u76f8\u5bf9\u76f8\u673a\u5750\u6807\u7cfb\u7684\u4e09\u7ef4\u5750\u6807\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u7684\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u50cf\u7d20\u5e73\u9762\u4e0a\u7684\u4e8c\u7ef4\u5750\u6807\u3002\u56e0\u6b64\u6211\u4eec\u8981\u628a\\(x_l,x_r\\)\u901a\u8fc7\u5185\u53c2\u77e9\u9635\u8f6c\u5316\u4e3a\u50cf\u7d20\u5750\u6807\u3002</p> <p></p> <p></p> <p></p> <p>\u6211\u4eec\u79f0\u4e2d\u95f4\u7684\u90a3\u4e2a\u77e9\u9635\u4e3a\u57fa\u7840\u77e9\u9635\\(F\\)(Fundamental Matrix)</p> <p></p> <p>\u56e0\u6b64\uff0c\u7531\u4e8e\\(u_l,u_r\\)\u5df2\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u89e3\u57fa\u672c\u77e9\u9635\uff0c\u53c8\u7531\u4e8e\u76f8\u673a\u5185\u53c2\u5df2\u77e5\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\\(F\\)\u6c42\u89e3\u51fa\\(E\\),\u518d\u4f7f\u7528SVD\u5c31\u53ef\u4ee5\u5f97\u5230\\(R,t\\)</p> <p>\u7531\u4e8e\u57fa\u7840\u77e9\u9635\u4e5f\u662fhomogenous\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u6c42\u89e3\u65f6\u53ef\u4ee5\u52a0\u4e0a\u7ea6\u675f\\(\\Vert f\\Vert^2=1\\)</p> <p>\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u76f8\u673a\u4f4d\u59ff\u4f30\u8ba1\u7684Pipeline</p> <p>Relative Camera Pose Esitimation</p> <p>\u5bf9\u6bcf\u4e2a\u70b9\u5bf9\uff0c\u5199\u51fa\u5bf9\u6781\u7ea6\u675f\uff0c\u5e76\u6539\u5199\u77e9\u9635\u5f97\u5230\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6c42\u89e3\u3002\u5f97\u5230\u57fa\u7840\u77e9\u9635\u540e\u6c42\u89e3\\(E=J_L^{T}FK_r\\),\u6700\u540e\u8fdb\u884cSVD\u5206\u89e3\u3002</p> <p></p> <p></p>"},{"location":"AI/cv/icv/lec7/#triangulation","title":"Triangulation","text":"<p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u5bf9\u5e94\u7684\u4e8c\u7ef4\u7279\u5f81\u70b9\uff0c\u76f8\u673a\u53c2\u6570\u4ee5\u53ca\u4e24\u4e2a\u76f8\u673a\u5750\u6807\u7cfb\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u8ba1\u7b97\u51fa\u573a\u666f\u70b9\u7684\u5b9e\u9645\u4e09\u7ef4\u5750\u6807\u3002</p> \u5177\u4f53\u6b65\u9aa4 <p></p> <p></p> <p></p> <p></p> <p>\u4f46\u662f\u9700\u8981\u6ce8\u610f\u5230\uff0c\u5047\u8bbe\u6570\u636e\u90fd\u662f\u51c6\u786e\u7684\uff0c\u90a3\u4e48\\(O_lX_l,O_r,X_r\\)\u5e94\u8be5\u4f1a\u76f8\u4ea4\u4e8e\u573a\u666f\u70b9\\(X\\)\u3002\u5927\u4f46\u662f\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u6709\u8bef\u5dee\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u6761\u7ebf\u4e0d\u4e00\u5b9a\u4e25\u683c\u76f8\u4ea4\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u5373\u56db\u4e2a\u65b9\u7a0b\u4e09\u4e2a\u672a\u77e5\u6570\uff0c\u901a\u8fc7\u6700\u5c0f\u4e8c\u4e58\u5f97\u5230\u6700\u4f18\u89e3\u3002</p> <p>\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u901a\u8fc7\u4f18\u5316\u91cd\u6295\u5f71\u8bef\u5dee\u8fdb\u884c\u6c42\u89e3\u3002</p> <p>Minmize reprojection error:</p> \\[ cost(P)=\\Vert u_l-\\hat{u}_l\\Vert^2+\\Vert u_r-\\hat{u}_r\\Vert^2 \\] <p></p>"},{"location":"AI/cv/icv/lec7/#multi-frame-structure-from-motion","title":"Multi-frame Structure from Motion","text":"<p>Sequential SFM \u6b65\u9aa4\uff1a</p> <ul> <li>\u4ece\u5176\u4e2d\u4e24\u5f20\u5f00\u59cb\uff0c\u4f7f\u7528\u524d\u8ff0\u65b9\u6cd5\u91cd\u5efa</li> <li>\u4e0d\u65ad\u53d6\u51fa\u65b0\u7684\u56fe\u50cf\uff0c\u6839\u636e\u5df2\u77e5\u6761\u4ef6\u8ba1\u7b97\u76f8\u673a\u4f4d\u59ff\uff0c\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u4e09\u4f4d\u70b9\uff0c\u5e76\u4f18\u5316\u73b0\u6709\u7684\u70b9</li> <li>\u4f7f\u7528Bundle Adjustment \u8fdb\u884c\u4f18\u5316(\u6d88\u9664\u7d2f\u79ef\u8bef\u5dee)</li> </ul> <p>Bundle Adjustment</p> <p>\u5728\u6240\u6709\u76f8\u673a\u5750\u6807\u7cfb\u4e0b\u4f18\u5316\u6240\u6709\u70b9\u7684\u91cd\u6295\u5f71\u8bef\u5dee</p> <p></p>"},{"location":"AI/cv/icv/lec7/#colmap","title":"COLMAP","text":"<p>\u4e00\u4e2a\u4e09\u7ef4\u91cd\u5efa\u5de5\u5177 COLMAP is a general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline with a graphical and command line interface. It offers a wide range of features for reconstruction of ordered and unordered image collections.</p>"},{"location":"AI/cv/icv/lec8/","title":"Lec8 Depth estimation and 3D reconstruction","text":"<p> \u7ea6 2243 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p> <p>\u4e0a\u4e00\u8282\u6211\u4eec\u8ba8\u8bba\u7684structure from motion\u91cd\u5efa\u7684\u662f\u7a00\u758f\u7684\u70b9\u4e91\uff0c\u8fd9\u8282\u6211\u4eec\u8ba8\u8bba\u7a20\u5bc6\u7684\u91cd\u5efa\uff0c\u5373\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u91cd\u5efa\uff0c\u800c\u9700\u8981\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\u5c31\u662f\u6df1\u5ea6\u7684\u4f30\u8ba1\u3002</p>"},{"location":"AI/cv/icv/lec8/#depth-estimation","title":"Depth estimation","text":"<p>\u6df1\u5ea6\u4f30\u8ba1\u5373\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u4f30\u8ba1\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5728\u5b9e\u9645\u573a\u666f\u4e2d\u7684\u6df1\u5ea6\u3002\u8fd9\u91cc\u7684\u6df1\u5ea6\u6709\u65f6\u5019\u6307\u7a7a\u95f4\u70b9\u5230\u76f8\u673a\u4e2d\u5fc3\u6216\u8005\u50cf\u5e73\u9762\u7684\u8ddd\u79bb\uff0c\u4e5f\u6709\u65f6\u5019\u8868\u793a\u6cbf\u5149\u7ebf\u7684\u8ddd\u79bb\u3002</p> <p>\u6df1\u5ea6\u56fe\u5c31\u662f\u5c06\u6df1\u5ea6\u4fe1\u606f\u53ef\u89c6\u5316</p> <p></p>"},{"location":"AI/cv/icv/lec8/#stereo-matching","title":"Stereo matching","text":""},{"location":"AI/cv/icv/lec8/#stereo-vision","title":"Stereo Vision","text":"<ul> <li>An object point will project to some point in our image</li> <li>That image point corresponds to a ray in the world.</li> <li>Two rays intersect at a single point, so if we want to localize points in 3D we need 2 eyes.(\u53cc\u76ee\u89c6\u89c9)</li> </ul> <p>Recap: Epipolar geometry</p> <p></p> <p>\u5373\u5982\u679c\u5df2\u77e5\\(X_L\\),\u90a3\u4e48\\(X_R\\)\u7684\u8f68\u8ff9\u5c31\u662f\u5bf9\u6781\u7ebf\u3002\u8fd9\u6781\u5927\u7b80\u5316\u4e86\u6211\u4eec\u641c\u7d22\u7684\u533a\u57df\u3002</p> <p>\u8003\u8651\u6700\u7b80\u5355\u7684\u60c5\u51b5\uff1a\u4e24\u4e2a\u5e73\u884c\u7684\u50cf\u5e73\u9762\uff1a</p> <p></p> <p>\u8fd9\u6837\u5b50\u6211\u4eec\u53ea\u9700\u8981\u641c\u7d22\u53e6\u4e00\u5f20\u56fe\u4e2d\u540c\u4e00\u9ad8\u5ea6\u7684\u6c34\u5e73\u7ebf\u5373\u53ef\uff0c\u66f4\u52a0\u7f29\u5c0f\u4e86\u641c\u7d22\u7684\u7a7a\u95f4\uff0c\u63d0\u9ad8\u6548\u7387\uff01</p> <p>\u90a3\u4e48\u5bf9\u4e8e\u5e76\u4e0d\u5e73\u884c\u7684\u50cf\u5e73\u9762\uff0c\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u51e0\u4f55\u53d8\u6362\u4f7f\u5f97\u5b83\u4eec\u5e73\u884c\u3002\u79f0\u4f5c\u7acb\u4f53\u5f71\u50cf\u77eb\u6b63\u3002</p> <p></p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u6240\u6709\u7684\u60c5\u51b5\u90fd\u7b80\u5316\u4e3a\u4e86\u5e73\u884c\u50cf\u5e73\u9762\u3002</p> <p>Result</p> <p></p> <p>\u89c6\u5dee(disparity) \u4e24\u5f20\u56fe\u540c\u4e00\u4e2a\u70b9\u6c34\u5e73\u5750\u6807\u7684\u5dee\u522b\uff1a \\(x_2-x_1=\\) the disparity of pixel(\\(x_1,y_1\\))</p> <p>\u6211\u4eec\u53ef\u4ee5\u4ece\u89c6\u5bdf\u6765\u4f30\u8ba1\u51fa\u6df1\u5ea6\u4fe1\u606f\uff1a</p> <p></p> <p>\u901a\u8fc7\u76f8\u4f3c\u4e09\u89d2\u5f62\u5f97\u5230\u3002</p>"},{"location":"AI/cv/icv/lec8/#stereo-matching-algorithms","title":"Stereo matching algorithms","text":"<p>\u6211\u4eec\u5047\u8bbe\u4eae\u5ea6\u4e00\u81f4\u3002 \u7acb\u4f53\u5339\u914d\u5c31\u662f\u5728\u53e6\u4e00\u5f20\u56fe\u7684\u5bf9\u6781\u7ebf\u4e0a\u5f53\u524d\u70b9\u641c\u7d22\u6700\u4f73\u5339\u914d\u7684\u70b9\u3002\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u53d6\u4e00\u4e2a\u5c0f\u7a97\u53e3\uff0c\u5728\u53e6\u4e00\u5f20\u56fe\u7684\u5bf9\u6781\u7ebf\u4e0a\u6ed1\u52a8\uff0c\u5bfb\u627e\u6700\u76f8\u4f3c\u7684\u5c0f\u533a\u57df\u3002</p> <p></p> <p>Popular matching scores</p> <p></p> <p>\u5bf9\u4e8e\u7a97\u53e3\u5339\u914d\uff0c\u7a97\u53e3\u5927\u5c0f\u7684\u9009\u62e9\u5bf9\u7ed3\u679c\u9020\u6210\u6bd4\u8f83\u5927\u7684\u5f71\u54cd\u3002\u7a97\u53e3\u592a\u5c0f\u53ef\u4ee5\u589e\u52a0\u7ec6\u8282\uff0c\u4f46\u662f\u4f1a\u589e\u52a0\u566a\u58f0\u3002\u7a97\u53e3\u592a\u5927\u867d\u7136\u566a\u58f0\u5c0f\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u63d0\u53d6\u4e0d\u5230\u7ec6\u8282\uff0c\u540e\u7eed\u91cd\u5efa\u7684\u6548\u679c\u5c31\u4e0d\u597d</p> <p></p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u5373\u4f7f\u662f\u6700\u4f73\u7684window size,\u5f97\u5230\u7684\u6df1\u5ea6\u56fe\u4e0e\u5b9e\u9645\u8fd8\u662f\u6709\u4e00\u5b9a\u5dee\u8ddd\u3002</p> <p>Stereo as energy minmization</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u7acb\u4f53\u5339\u914d\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4f18\u5316\u95ee\u9898</p> \\[ E(d)=E_d(d)+\\lambda E_s(d) \\] <p>\u4f18\u5316\u53d8\u91cf\u662f\u6bcf\u4e2a\u70b9\u7684\u89c6\u5dee\uff0c\u76ee\u6807\u51fd\u6570\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>\u5339\u914d\u672c\u8eab\u7684\u635f\u5931\uff1a\u76ee\u7684\u662f\u5728\u53e6\u4e00\u5f20\u56fe\u4e2d\u627e\u5230\u6700\u4f73\u5339\u914d(match cost)</li> <li>\u5149\u6ed1\u6027\u7684\u635f\u5931\uff1a \u76f8\u90bb\u7684\u4e24\u4e2a\u50cf\u7d20\uff0c\u89c6\u5bdf\u5e94\u8be5\u5c3d\u53ef\u80fd\u63a5\u8fd1(smoothness cost)</li> </ul> <p></p> <p>\u5bf9\u4e8e\\(V\\)\u7684\u9009\u62e9\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u8be5\u65b9\u6cd5\u7684\u7ed3\u679c\uff0c\u6548\u679c\u597d\u4e86\u5f88\u591a</p> <p></p>"},{"location":"AI/cv/icv/lec8/#stereo-reconstruction-pipeline","title":"Stereo reconstruction pipeline","text":"<p>\u81f3\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7acb\u4f53\u91cd\u5efa(\u53cc\u76ee\u91cd\u5efa)\u7684\u57fa\u672c\u6b65\u9aa4\uff1a</p> <ul> <li>Calibrate cameras</li> <li>Rectify images</li> <li>Compute disparity</li> <li>Estimate depth</li> </ul> <p>\u57fa\u7ebf\u7684\u9009\u62e9</p> <p></p> <p>\u5982\u679c\u57fa\u7ebf\u8fc7\u5c0f\uff0c\u5219\u70b9\u7684\u6df1\u5ea6\u8bef\u5dee\u4f1a\u6bd4\u8f83\u5927\u3002 \u5982\u679c\u57fa\u7ebf\u8fc7\u5927\uff0c\u5219\u4e00\u65b9\u9762\u91cd\u5408\u7684\u533a\u57df\u6bd4\u8f83\u5c0f\uff0c\u53e6\u4e00\u65b9\u9762\u4e24\u5f20\u56fe\u7247\u7684\u5185\u5bb9\u5dee\u522b\u6bd4\u8f83\u5927(\u5c31\u76f8\u5f53\u4e8e\u4ece\u4e24\u4e2a\u76f8\u5dee\u8f83\u8fdc\u7684\u89c6\u89d2\u770b\u4e00\u5f20\u56fe\uff0c\u5149\u7ebf\u50cf\u7d20\u7b49\u5185\u5bb9\u5c31\u4f1a\u4e0d\u4e00\u6837)\uff0c\u6a2a\u5411\u8bef\u5dee\u589e\u5927\uff0c\u6bd4\u8f83\u96be\u641c\u7d22\u5230\u5339\u914d\u7684\u70b9\u3002</p> <p>Possible Cause of Error</p> <ul> <li>Camera calibration errors</li> <li>Poor image resolution</li> <li>Occlusions</li> <li>Violations of brightness constancy</li> <li>Textureless regions</li> </ul> <p>\u7ed3\u6784\u5149</p> <p>\u5bf9\u4e8e\u6ca1\u6709\u7eb9\u7406\u7684\u533a\u57df(\u6bd4\u5982\u8bf4\u955c\u9762\uff0c\u91d1\u5c5e\u8868\u9762)\uff0c\u7acb\u4f53\u5339\u914d\u6b67\u4e49\u6027\u592a\u5f3a\uff0c\u65e0\u6cd5\u8fdb\u884c\u6df1\u5ea6\u4f30\u8ba1\u3002\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u65b9\u6cd5\u5c31\u662f\u7ed3\u6784\u5149:</p> <p>\u76f8\u673a\u7684\u5149\u5f71\u4f1a\u7ed9\u65e0\u7eb9\u7406\u7684\u533a\u57df\u6253\u4e0a\u5149\u6591\uff0c\u5c5e\u4e8e\u4e3b\u52a8\u65b9\u5f0f\u7684\u6df1\u5ea6\u4f30\u8ba1\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec8/#multi-view-stereo","title":"Multi-view Stereo","text":"<p>\u548cSfM\u4e00\u6837\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5c06\u4e24\u4e2a\u89c6\u89d2\u7684\u6df1\u5ea6\u4f30\u8ba1\u62d3\u5c55\u5230\u591a\u4e2a\u89c6\u89d2\u3002</p> <p></p> <p>Advantages of MVS</p> <ul> <li> <p>Can match windows using more than 1 neighbor, giving a stronger constraint</p> </li> <li> <p>If you have lots of potential neighbors, can choose the best subset of neighbors to match per reference image</p> </li> <li> <p>Can reconstruct a depth map for each reference frame, and the merge into a complete 3D model</p> </li> </ul> <p>basic idea</p> <p>\u5982\u679c\u6309\u7167\u524d\u8ff0\u65b9\u6cd5\uff0c\u5c06\\(n\\)\u5f20\u56fe\u7247\u4e24\u4e24\u4f9d\u6b21\u5339\u914d\u5e76\u4f9d\u6b21\u8ba1\u7b97\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u90a3\u4e48\u6548\u7387\u6781\u4f4e\u3002\u56e0\u6b64\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u5047\u8bbe\u5b9e\u9645\u7269\u4f53\u4e2d\u70b9\u7684\u6df1\u5ea6\uff0c\u5728\u6240\u6709\u56fe\u4e2d\u8ba1\u7b97\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u5373\u4f9d\u6b21\u679a\u4e3e\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u4eec\u7684\u65b9\u6cd5\u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a\u5bf9\u4e8e\u53c2\u8003\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7684\u6bcf\u4e00\u4e2a\u53ef\u80fd\u6df1\u5ea6\u503c\uff0c\u53bb\u8ba1\u7b97\u91cd\u6295\u5f71\u8bef\u5dee\u3002\u6211\u4eec\u5f97\u5230\u7684\u8bef\u5dee\u662f\u4e2a\u4e09\u7ef4\u4f53\u7d20\uff0c\u957f\u5bbd\u5bf9\u5e94\u56fe\u50cf\uff0c\u9ad8\u5bf9\u5e94\u6df1\u5ea6\u503c\u4e2a\u6570\uff0c\u79f0\u4f5ccost volumn</p> <p>\u4e3a\u4e86\u5f97\u5230cost volumn, \u6211\u4eec\u91c7\u7528\u5982\u4e0b\u65b9\u6cd5\uff1a</p>"},{"location":"AI/cv/icv/lec8/#plane-sweep","title":"Plane-Sweep","text":"<p>\u6211\u4eec\u5148\u5047\u8bbe\u53c2\u8003\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u6df1\u5ea6\u90fd\u662f\u540c\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u5bf9\u5e94\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u9762\uff0c\u6211\u4eec\u505a\u7684\u662f\u5c06\u8fd9\u4e2a\u9762\u6295\u5f71\u5230\u5176\u5b83\u7684\u56fe\u50cf\u4e2d\uff0c\u8be5\u6295\u5f71\u662f\u4e2a\u5355\u5e94\u6027\u53d8\u6362\u3002\u636e\u6b64\u8ba1\u7b97\u91cd\u6295\u5f71\u8bef\u5dee\u3002</p> <p>cost volumn\u8bb0\u4e0b\u4e86\u6bcf\u4e2a\u50cf\u7d20\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u5bf9\u5e94\u7684\u8bef\u5dee\uff0c\u6700\u540e\u6211\u4eec\u63d0\u53d6\u6bcf\u4e2a\u50cf\u7d20\u8868\u73b0\u6700\u597d\u7684\u6df1\u5ea6\u503c,\u5f97\u5230\u6df1\u5ea6\u56fe\u3002</p> <p></p> <p>\u5f53\u7136\uff0c\u8ba1\u7b97cost volumn\u5f00\u9500\u662f\u6bd4\u8f83\u5927\u7684, \u6709\u4e00\u79cd\u66f4\u52a0\u9ad8\u6548\u7684\u7acb\u4f53\u5339\u914d\u7b97\u6cd5\uff1a</p>"},{"location":"AI/cv/icv/lec8/#patchmatch","title":"PatchMatch","text":"<p>\u9996\u5148\u6211\u4eec\u8fdb\u884c\u968f\u673a\u521d\u59cb\u5316\uff0c\u8d4b\u4e88\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u4e00\u4e2a\u968f\u673a\u7684\u6df1\u5ea6\u503c\uff0c\u603b\u4f1a\u6709\u90e8\u5206\u50cf\u7d20\u731c\u5bf9\u3002\u5176\u6b21\u6211\u4eec\u5047\u8bbe\u76f8\u90bb\u7684\u50cf\u7d20\u662f\u76f8\u4f3c\u7684\uff0c\u5373\u5728\u4e24\u5f20\u56fe\u50cf\u4e0a\u7684\u89c6\u5dee\u76f8\u4f3c\u3002</p> <p></p> <ul> <li>Initialization: \u968f\u673a\u521d\u59cb\u5316\uff0c\u5927\u90e8\u5206\u662f\u9519\u7684\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u4f1a\u8499\u5bf9\uff0c\u5728\u4e0a\u56fe\u4e2d\u6211\u4eec\u5047\u8bbe\u7ea2\u8272\u662f\u5bf9\u7684\u3002</li> <li>Propagation: \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u56fe\u50cf\u5757\uff0c\u5c06\u4e0e\u5176\u76f8\u90bb\u7684\u56fe\u50cf\u5757\u8ba1\u7b97\u8bef\u5dee\uff0c\u5982\u679c\u8bef\u5dee\u53d8\u5c0f\uff0c\u5219\u66f4\u65b0\u3002</li> <li>Search: \u867d\u7136\u76f8\u90bb\u7684\u50cf\u7d20\u76f8\u4f3c\u4f46\u662f\u4e0d\u5b8c\u5168\u4e00\u81f4\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u5c0f\u8303\u56f4\u5185\u8fdb\u884c\u5fae\u8c03\u3002</li> </ul> <p>\u53ef\u4ee5\u628aPatchMatch\u7c7b\u6bd4\u4e3a\u56fe\u50cf\u5339\u914d\u4e2d\u7684\u68af\u5ea6\u4e0b\u964d\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec8/#3d-reconstruction","title":"3D reconstruction","text":"<p>\u73b0\u5728\u6211\u4eec\u7684\u76ee\u6807\u662f\u4ece\u6df1\u5ea6\u56fe\u5f97\u5230\u5b9e\u9645\u7269\u4f53\u7684\u4e09\u89d2\u7f51\u683c\u3002</p> <p>3D reconsturction Pipeline</p> <ul> <li> <p>Compute depth map per image</p> </li> <li> <p>Fuse the depth maps into a 3D surface</p> </li> <li> <p>Texture mapping</p> </li> </ul>"},{"location":"AI/cv/icv/lec8/#3d-representations","title":"3D representations","text":""},{"location":"AI/cv/icv/lec8/#point-cloud","title":"Point Cloud","text":"<p>\u70b9\u4e91\u8868\u793a\u5c31\u662f\u4e00\u7cfb\u5217\u4e09\u7ef4\u70b9\u3002\u4e0a\u4e00\u8bb2\u7684SfM\u6211\u4eec\u5f97\u5230\u7684\u5c31\u662f\u4e09\u7ef4\u70b9\u4e91\u3002</p>"},{"location":"AI/cv/icv/lec8/#volume","title":"Volume","text":"<p>Occupancy volumn</p> <p></p> <p>\u8be5\u65b9\u6cd5\u4f1a\u6bd4\u70b9\u4e91\u66f4\u7a20\u5bc6\uff0c\u4f46\u662f\u95ee\u9898\u662f\u5360\u7528\u7a7a\u95f4\u5927\uff0c\u9020\u6210\u7a7a\u95f4\u5206\u8fa8\u7387\u8f83\u4f4e\u3002\u4f1a\u7f3a\u5931\u7ec6\u8282\u3002</p> <p>Signed Distance Function(SDF)</p> <p></p>"},{"location":"AI/cv/icv/lec8/#mesh","title":"Mesh","text":"<p>\u4e00\u822c\u4f7f\u7528\u4e09\u89d2\u7f51\u683c\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec8/#3d-surface-reconsturction","title":"3D surface reconsturction","text":"<p>\u73b0\u5728\u6211\u4eec\u60f3\u8981\u77e5\u9053\u5982\u4f55\u4ece\u6df1\u5ea6\u56fe\u5f97\u5230\u4e09\u89d2\u7f51\u683c\u3002</p> <p>\u57fa\u672c\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>Depth maps-&gt;Occupancy volume: Poisson reconsturction</li> <li>Occupancy volume-&gt;mesh: Marching cubes</li> </ul> <p>\u4f46\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5148\u5c06\u6df1\u5ea6\u56fe\u53d8\u6210\u4f53\u7d20\u8868\u793a\u518d\u53d8\u4e3a\u7f51\u683c\u5462\uff1f</p> <p>\u5c3d\u7ba1volume\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u4f46\u662f\u5b83\u662f\u4e00\u4e2a\u89c4\u5219\u7684\u6570\u636e\uff0c\u975e\u5e38\u4fbf\u4e8e\u8ba1\u7b97\u673a\u5904\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u597d\u5730\u53bb\u566a\u3002</p>"},{"location":"AI/cv/icv/lec8/#poisson-reconstruction","title":"Poisson Reconstruction","text":"<p>\u6cca\u677e\u91cd\u5efa\u662f\u4ece\u6df1\u5ea6\u56fe\u5230\u4e09\u7ef4\u4f53\u7d20\u7684\u4e00\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u9996\u5148\u5c06\u6df1\u5ea6\u56fe\u8f6c\u5316\u4e3a\u70b9\u4e91\u3002</p> <p></p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u5806\u70b9\uff0c\u5176\u5b9e\u8fd9\u4e9b\u70b9\u5df2\u7ecf\u8fd1\u4f3c\u6784\u6210\u4e86\u4e00\u4e2a\u4e09\u7ef4\u8868\u9762\uff0c\u53ea\u662f\u6bd4\u8f83noisy\u3002</p> <p></p> <p>\u7b2c\u4e8c\u6b65\uff0c\u6211\u4eec\u8981\u8ba1\u7b97\u8fd9\u5806\u5206\u5e03\u5728\u8868\u9762\u9644\u8fd1\u7684\u4e09\u7ef4\u70b9\u5404\u4e2a\u5c40\u90e8\u7684\u6cd5\u5411\uff0c\u53ef\u4ee5\u5229\u7528\u4e3b\u6210\u5206\u5206\u6790\uff0c\u5bf9\u5e94\u5c0f\u7279\u5f81\u503c\u7684\u7279\u5f81\u5411\u91cf\u5373\u4e3a\u5c40\u90e8\u8868\u9762\u6cd5\u5411\u3002</p> <p>\u7b2c\u4e09\u6b65\uff0c\u6211\u4eec\u6839\u636e\u5f97\u5230\u7684\u6cd5\u5411\u6784\u5efa0-1\u7684\u4f53\u7d20,\u5373\u7528\u4f53\u7d20\u62df\u5408\u70b9\u4e91\uff0c\u4f7f\u5f970-1\u4ea4\u754c\u7684\u5730\u65b9\u5c31\u662f\u70b9\u4e91\u6240\u5728\u4e4b\u5904\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4f18\u5316\u95ee\u9898\uff1a\u4f18\u5316\u53d8\u91cf\u5c31\u662f\u6bcf\u4e2a\u4f53\u7d20\u7684\u503c\uff0c\u4e3a0\u62161\u3002</p> <p></p> <p>\u5bf9\u4e8e\u76ee\u6807\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u601d\u8003\uff1a\u5bf9\u4e8e\u4f53\u7d20\u7684\u8fb9\u754c\uff0c\u7269\u4f53\u5185\u90e8\u503c\u4e3a1\uff0c\u5916\u90e8\u503c\u4e3a0\uff0c\u5219\u8be5\u5904\u7684\u68af\u5ea6\u5c31\u6cbf\u7740\u8868\u9762\u7684\u6cd5\u5411\u3002\u800c\u6211\u4eec\u53c8\u5df2\u77e5\u6cd5\u5411\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f18\u5316\u68af\u5ea6\u4e0e\u6cd5\u5411\u4e4b\u95f4\u7684Loss\u3002</p> <p></p> <p>Poisson Reconstruction</p> <ul> <li> <p>Represent the oriented points by a vector field \\(V\\)</p> </li> <li> <p>Find the function \\(X\\) (\u4f53\u7d20\u573a) whose gradient best approximates \\(V\\) (\u68af\u5ea6\u5411\u91cf\u573a) by minimizing: \\(\\Vert \\nabla_{X}-V\\Vert^2\\)</p> </li> <li> <p>Solved by Poisson equation</p> </li> </ul>"},{"location":"AI/cv/icv/lec8/#marching-cubes","title":"Marching Cubes","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u4ece\u4f53\u7d20\u8868\u793a\u4e2d\u63d0\u53d6\u8868\u9762\u4e09\u7ef4\u7f51\u683c\u3002</p> <p>\u8fd9\u4e2a\u505a\u6cd5\u5176\u5b9e\u5f88\u76f4\u89c2\uff0c\u5c31\u662f\u5bfb\u627e\u4f53\u7d20\u4e2d\u67090\u548c1\u8f6c\u5316\u7684\u5730\u65b9\uff0c\u63d0\u53d6\u4e2d\u70b9\uff0c\u751f\u6210\u4e09\u89d2\u9762\u7247\u3002\u4e0b\u56fe\u5f88\u76f4\u89c2\u5730\u5c55\u793a\u4e8c\u7ef4\u548c\u4e09\u7ef4\u7684\u60c5\u51b5\u3002</p> <p></p> <p></p>"},{"location":"AI/cv/icv/lec8/#texture-mapping","title":"Texture Mapping","text":"<p>\u76ee\u524d\u6211\u4eec\u5f97\u5230\u7684\u4e09\u89d2\u7f51\u683c\u662f\u6ca1\u6709\u989c\u8272\u7684\uff0ctexture mapping(\u7eb9\u7406\u6620\u5c04)\u505a\u7684\u5c31\u662f\u5f80mesh\u4e0a\u4e0a\u8272\u3002</p> <p>\u5bf9\u4e8e\u4e09\u7ef4\u7269\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u9762\u526a\u5f00\uff0c\u94fa\u5e73\u6210\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5c31\u5f62\u6210\u4e86\u7eb9\u7406\u56fe\u3002\u7eb9\u7406\u56fe\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u4e0e\u4e09\u7ef4\u8868\u9762\u6709\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\u3002\u5bf9\u4e8e\u4e09\u89d2\u7f51\u683c\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\uff0c\u6211\u4eec\u4e0d\u4ec5\u6709\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5750\u6807\uff0c\u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u8be5\u9876\u70b9\u5728\u7eb9\u7406\u56fe\u4e2d\u7684\u50cf\u7d20\u5750\u6807\u3002\u800c\u9762\u7247\u91cc\u7684\u70b9\u5219\u901a\u8fc7\u9876\u70b9\u63d2\u503c\u5f97\u5230\u3002</p>"},{"location":"AI/cv/icv/neus/","title":"\u57fa\u4e8e\u795e\u7ecf\u8868\u793a\u7684\u91cd\u5efa\u65b9\u6848","text":"<p> \u7ea6 362 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/icv/neus/#_2","title":"\u4f53\u6e32\u67d3","text":"<p>\u4f53\u6e32\u67d3\u8003\u8651\u5149\u7ebf\u5728\u7269\u4f53\u5185\u90e8\u7684\u4f20\u64ad\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u4e91\u3001\u70df\u3001\u679c\u51bb\u8fd9\u7c7b\u975e\u521a\u6027\u7269\u4f53\u7684\u6e32\u67d3\u5efa\u6a21\u3002\u5b83\u628a\u6c14\u4f53\u7b49\u7269\u8d28\u62bd\u8c61\u6210\u7c92\u5b50\u7fa4\uff0c\u5149\u7ebf\u7a7f\u8fc7\u8fd9\u7c7b\u7269\u4f53\u5c31\u662f\u5149\u5b50\u548c\u7c92\u5b50\u53d1\u751f\u78b0\u649e\u7684\u8fc7\u7a0b\u3002</p> <p>\u6574\u4e2a\u8fc7\u7a0b\u6709\u56db\u79cd\u7c7b\u578b\uff1a</p> <ul> <li>absorption</li> <li>emission: \u7c92\u5b50\u81ea\u53d1\u5149</li> <li>out-scattering</li> <li>in-scattering\uff1a\u5176\u5b83\u65b9\u5411\u7684\u5149\u6253\u5728\u4ecb\u8d28\u4f8b\u5b50\u4e0a\u6563\u5c04\u5230\u8be5\u65b9\u5411</li> </ul> <p>\u6211\u4eec\u5047\u8bbe\u5149\u5b50\u53ea\u548c\u5b83\u9644\u8fd1\u7684\u7c92\u5b50\u53d1\u751f\u4f5c\u7528\uff0c\u5c06\u4f5c\u7528\u8303\u56f4\u9650\u5236\u5728\u5c0f\u5706\u67f1\u4f53\u4e4b\u95f4\u3002</p>"},{"location":"AI/cv/icv/neus/#_3","title":"\u5438\u6536","text":"<p>\u5047\u8bbe\u5706\u67f1\u4f53\u4e2d\u7c92\u5b50\u7684\u5bc6\u5ea6\u4e3a\\(\\rho\\), \u5706\u67f1\u4f53\u5e95\u9762\u79ef\\(E\\), \u7c92\u5b50\u90fd\u662f\u534a\u5f84\u4e3a\\(r\\)\u7684\u7403\u4f53\uff0c\u6bcf\u4e2a\u7c92\u5b50\u7684\u6295\u5f71\u9762\u79ef\\(A=\\pi r^2\\)\uff08\u6bcf\u4e2a\u7c92\u5b50\u5bf9\u5149\u7ebf\u7684\u906e\u6321\u9762\u79ef\uff09\u3002\u5f53\u5706\u67f1\u4f53\u539a\u5ea6\\(\\Delta s\\)\u5f88\u8584\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u7c92\u5b50\u4e4b\u95f4\u4e0d\u4f1a\u76f8\u4e92\u91cd\u53e0\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u5706\u67f1\u4f53\u4e2d\u6240\u6709\u7c92\u5b50\u603b\u6570\\(n=\\rho E\\Delta s\\), \u603b\u906e\u6321\u9762\u79ef\u4e3a\\(nA\\)\u3002\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5165\u5c04\u7684\u5149\u7ebf\u6709\\(\\rho E\\Delta s A\\)\u7684\u6982\u7387\u88ab\u906e\u6321\u3002\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a $$ I_o-I_i=-\\rho (s)AI(s)ds $$ \u5373 $$ \\frac{dI}{ds}=-\\rho(s)AI(s)\\equiv -\\tau_a(s)I(s) $$ \u89e3\u5f97 $$ I(s)=I_0 e^{-\\int_0^s \\tau_a(t)dt} $$ \u8bb0\\(T(s)=\\frac{I_o}{I_i}=e^{-\\int _i^o \\tau_a(t)dt}\\)\u4e3a\u900f\u5c04\u6bd4\uff0c\u8868\u793a\u7c92\u5b50\u7fa4\u67d0\u4e00\u70b9\u7684\u900f\u660e\u5ea6\u3002</p>"},{"location":"AI/iai/ch2/","title":"\u77e5\u8bc6\u8868\u8fbe\u4e0e\u63a8\u7406","text":"<p> \u7ea6 2601 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p>"},{"location":"AI/iai/ch2/#_2","title":"\u547d\u9898\u903b\u8f91","text":"<ul> <li>\u547d\u9898\uff1a\u786e\u5b9a\u4e3a\u771f\u6216\u4e3a\u5047\u7684\u9648\u8ff0\u53e5\u3002</li> <li>\u539f\u5b50\u547d\u9898\uff1a\u4e0d\u5305\u542b\u5176\u4ed6\u547d\u9898\u4f5c\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u7684\u547d\u9898\uff0c\u53c8\u79f0\u7b80\u5355\u547d\u9898\u3002</li> <li>\u590d\u5408\u547d\u9898\uff1a\u5305\u542b\u5176\u4ed6\u547d\u9898\u4f5c\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u7684\u547d\u9898\u3002</li> <li>\u547d\u9898\u8054\u7ed3\u8bcd\uff1a\u4e0e\uff0c\u6216\uff0c\u975e\uff0c\u6761\u4ef6\uff0c\u53cc\u5411\u6761\u4ef6(bi-conditional)</li> <li>\u6761\u4ef6\u547d\u9898\u8054\u7ed3\u8bcd\u4e2d\u524d\u4ef6\u4e3a\u5047\u65f6\uff0c\u65e0\u8bba\u540e\u4ef6\u53d6\u503c\u5982\u4f55\uff0c\u590d\u5408\u547d\u9898\u5747\u4e3a\u771f\u3002</li> <li>\u903b\u8f91\u7b49\u4ef7\uff1a\u5177\u6709\u76f8\u540c\u7684\u771f\u5047\u7ed3\u679c\uff0c\u7528\\(\\equiv\\)\u6765\u8868\u793a\u3002</li> </ul> <p>\u547d\u9898\u903b\u8f91\u63a8\u7406\u7684\u624b\u6bb5\u548c\u65b9\u6cd5\uff1a</p> <p></p>"},{"location":"AI/iai/ch2/#_3","title":"\u8c13\u8bcd\u903b\u8f91","text":"<p>\u5728\u547d\u9898\u903b\u8f91\u4e2d\uff0c\u539f\u5b50\u547d\u9898\u662f\u6700\u57fa\u672c\u7684\u5355\u4f4d\u3002\u7531\u539f\u5b50\u547d\u9898\u51fa\u53d1\uff0c\u901a\u8fc7\u4f7f\u7528\u547d\u9898\u8054\u7ed3\u8bcd\uff0c\u6784\u6210\u590d\u5408\u547d\u9898\u3002\u547d\u9898\u903b\u8f91\u53ea\u80fd\u628a\u590d\u5408\u547d\u9898\u5206\u89e3\u4e3a\u7b80\u5355\u547d\u9898\uff08\u5373\u539f\u5b50\u547d\u9898\uff09\uff0c\u65e0\u6cd5\u5bf9\u539f\u5b50\u547d\u9898\u6240\u5305\u542b\u7684\u4e30\u5bcc\u8bed\u4e49\uff08\u5982\u4e2a\u4f53\u3001\u90e8\u5206\u6216\u5168\u4f53\u7b49\uff09\u8fdb\u884c\u523b\u753b\u3002\u56e0\u6b64\uff0c\u547d\u9898\u903b\u8f91\u65e0\u6cd5\u8868\u8fbe\u5c40\u90e8\u4e0e\u6574\u4f53\u3001\u4e00\u822c\u4e0e\u4e2a\u522b\u7684\u5173\u7cfb\u3002</p> <p>\u8c13\u8bcd\u903b\u8f91\u662f\u523b\u753b\u4e3b\u4f53(\u4e2a\u4f53\u548c\u7fa4\u4f53)\u4e4b\u95f4\u903b\u8f91\u5173\u7cfb\u7684\u65b9\u6cd5\u3002</p> <ul> <li>\u4e2a\u4f53\uff1a\u7814\u7a76\u9886\u57df\u4e2d\u53ef\u4ee5\u72ec\u7acb\u5b58\u5728\u7684\u5177\u4f53\u6216\u62bd\u8c61\u7684\u6982\u5ff5\u3002</li> <li>\u8c13\u8bcd\uff1a\u7528\u6765\u523b\u753b\u4e2a\u4f53\u5c5e\u6027\u6216\u8005\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u5173\u7cfb\u5b58\u5728\u6027\u7684\u5143\u7d20\uff0c\u5176\u503c\u4e3a\u771f\u6216\u4e3a\u5047\u3002</li> </ul> <p>\u5305\u542b\u4e00\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u8868\u793a\u4e00\u5143\u5173\u7cfb\uff0c\u901a\u5e38\u7528\u4e8e\u523b\u753b\u4e2a\u4f53\u662f\u5426\u5305\u542b\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u5982\\(P(x)\\) \uff1ax\u662f\u8d28\u6570\uff0c\u8868\u793a\u67d0\u4e2a\u6570\u662f\u5426\u662f\u8d28\u6570;</p> <p>\u5305\u542b\u591a\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u591a\u5143\u8c13\u8bcd\uff0c\u7528\u4e8e\u8868\u793a\u4e2a\u4f53\u4e4b\u95f4\u7684\u591a\u5143\u5173\u7cfb\uff0c\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7684\u5173\u8054\uff0c\u5982Father(x,  y)\u8868\u793a x\u662fy\u7684\u7236\u4eb2\u3002</p> <p>\u51fd\u6570\u662f\u4ece\u5b9a\u4e49\u57df\u5230\u503c\u57df\u7684\u6620\u5c04\uff1b\u8c13\u8bcd\u662f\u4ece\u5b9a\u4e49\u57df\u5230{True,  False}\u7684\u6620\u5c04\u3002</p> <ul> <li>\u5168\u79f0\u91cf\u8bcd\uff1a\u8868\u793a\u4e00\u5207\u7684\uff0c\u6240\u6709\u7684\uff0c\u51e1\u662f\uff0c\u6bcf\u4e00\u4e2a\u7b49\uff0c\u7528\\(\\forall\\)\u8868\u793a\u3002</li> <li>\u5b58\u5728\u91cf\u8bcd\uff1a\u8868\u793a\u5b58\u5728\uff0c\u6709\u4e00\u4e2a\uff0c\u67d0\u4e9b\u7b49\uff0c\u7528\\(\\exist\\)\u8868\u793a</li> </ul> <p></p> <p>\u8c13\u8bcd\u903b\u8f91\u63a8\u7406\u7684\u624b\u6bb5\u548c\u65b9\u6cd5</p> <p></p>"},{"location":"AI/iai/ch2/#_4","title":"\u77e5\u8bc6\u56fe\u8c31\u63a8\u7406","text":"<ul> <li> <p>\u77e5\u8bc6\u56fe\u8c31(knowledge graph)\u7531\u6709\u5411\u56fe\u6784\u6210\uff0c\u88ab\u7528\u6765\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u662f\u4eba\u5de5\u667a\u80fd\u4e2d\u8fdb\u884c\u77e5\u8bc6\u8868\u8fbe\u7684\u91cd\u8981\u65b9\u5f0f\u3002\u5728\u77e5\u8bc6\u56fe\u8c31\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u5ba2\u89c2\u4e16\u754c\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\u8868\u793a\u8282\u70b9\u5177\u6709\u67d0\u4e00\u5173\u7cfb\u3002\u77e5\u8bc6\u56fe\u8c31\u4e2d\u5b58\u5728\u8fde\u7ebf\u7684\u4e24\u4e2a\u5b9e\u4f53\u53ef\u8868\u8fbe\u4e3a\u5f62\u5982\\(&lt;leftnode,relation,rightnode&gt;\\)\u7684\u4e09\u5143\u7ec4\u5f62\u5f0f\u3002\u4e5f\u53ef\u4ee5\u8868\u8fbe\u4e3a\u4e00\u9636\u903b\u8f91(first order logic, FOL)\u7684\u5f62\u5f0f\u3002</p> </li> <li> <p>\u5173\u7cfb\u63a8\u7406\u662f\u7edf\u8ba1\u5173\u7cfb\u5b66\u4e60\u7814\u7a76\u7684\u57fa\u672c\u95ee\u9898,\u4e5f\u662f\u5f53\u524d\u77e5\u8bc6\u56fe\u8c31\u9886\u57df\u7814\u7a76\u7684\u70ed\u70b9\u95ee\u9898\u3002</p> </li> </ul> <p></p> <p></p> <ul> <li>\u5f52\u7eb3\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1(inductive logic programming, ILP)\u662f\u673a\u5668\u5b66\u4e60\u548c\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\u4ea4\u53c9\u9886\u57df\u7684\u7814\u7a76\u5185\u5bb9\u3002ILP\u4f7f\u7528\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\u8fdb\u884c\u77e5\u8bc6\u8868\u793a\uff0c\u901a\u8fc7\u4fee\u6539\u548c\u6269\u5145\u903b\u8f91\u8868\u8fbe\u5f0f\u5bf9\u73b0\u6709\u77e5\u8bc6\u5f52\u7eb3\uff0c\u5b8c\u6210\u63a8\u7406\u4efb\u52a1\u3002</li> <li>\u4f5c\u4e3aILP\u7684\u4ee3\u8868\u6027\u65b9\u6cd5\uff0cFOIL(First Order Inductive Learner)\u901a\u8fc7\u5e8f\u8d2f\u8986\u76d6\u5b66\u4e60\u63a8\u7406\u3002</li> </ul>"},{"location":"AI/iai/ch2/#foil","title":"FOIL\u7b97\u6cd5","text":"<ul> <li>\u8f93\u5165\uff1a\u76ee\u6807\u8c13\u8bcd\\(P\\),\u76ee\u6807\u8c13\u8bcd\u7684\u8bad\u7ec3\u6837\u4f8b(\u6b63\u4f8b\u96c6\u5408\\(E^{+}\\)\u548c\u53cd\u4f8b\u96c6\u5408\\(E^{-}\\))\u4ee5\u53ca\u5176\u4ed6\u80cc\u666f\u77e5\u8bc6\u6837\u4f8b\u3002</li> <li> <p>\u8f93\u51fa\uff1a\u53ef\u5f97\u5230\u76ee\u6807\u8c13\u8bcd\\(P\\)\u8fd9\u4e00\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219\u3002</p> </li> <li> <p>\u8fc7\u7a0b\uff1a</p> <ul> <li>\u5c06\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u6240\u5b66\u4e60\u63a8\u7406\u89c4\u5219\u7684\u7ed3\u8bba\u3002</li> <li>\u5c06\u5176\u4ed6\u8c13\u8bcd\u9010\u4e00\u4f5c\u4e3a\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u63a8\u7406\u89c4\u5219\uff0c\u8ba1\u7b97\u6240\u5f97\u5230\u63a8\u7406\u89c4\u5219\u7684FOIL\u4fe1\u606f\u589e\u76ca\u503c\uff0c\u9009\u53d6\u53ef\u5e26\u6765\u6700\u5927\u4fe1\u606f\u589e\u76ca\u503c\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u539f\u6765\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5f97\u5230\u65b0\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5e76\u5c06\u8bad\u7ec3\u6837\u4f8b\u96c6\u5408\u4e2d\u4e0e\u8be5\u63a8\u7406\u89c4\u5219\u4e0d\u7b26\u5408\u7684\u6837\u4f8b\u53bb\u6389\u3002</li> <li>\u91cd\u590d2\uff0c\u76f4\u5230\u6240\u5f97\u5230\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b\u3002</li> </ul> </li> </ul> <p>FOIL\u7b97\u6cd5\u4ece\u4e00\u822c\u5230\u7279\u6b8a\uff0c\u9010\u6b65\u6dfb\u52a0\u76ee\u6807\u8c13\u8bcd\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\uff0c\u76f4\u5230\u6240\u6784\u6210\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b\u3002\u4ece\u4e00\u822c\u5230\u7279\u6b8a\u6307\u7684\u662f\u5bf9\u76ee\u6807\u8c13\u8bcd\u6216\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u4e2d\u7684\u53d8\u91cf\u8d4b\u4e88\u5177\u4f53\u503c\u3002</p> <p>\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\uff0c\u6dfb\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u6240\u5f97\u63a8\u7406\u89c4\u5219\u7684\u8d28\u91cf\u597d\u574f\u7531\u4fe1\u606f\u589e\u76ca\u503c\u6765\u5224\u65ad\u3002</p> \\[ FOIL_Gain=\\hat{m}_{+}\\cdot (\\log _2\\frac{\\hat{m}_{+}}{\\hat{m}_{+}+\\hat{m}_{-}}-\\log _2\\frac{{m}_{+}}{{m}_{+}+{m}_{-}}) \\] <p>\u5176\u4e2d\\(\\hat{m}_{+},\\hat{m}_{+}\\)\u662f\u589e\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u6240\u5f97\u65b0\u63a8\u7406\u89c4\u5219\u80fd\u591f\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee\uff0c\\({m}_{+},{m}_{-}\\)\u662f\u539f\u63a8\u7406\u89c4\u5219\u6240\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee\u3002</p> <p>\u4e0a\u9762\u7684\u77e5\u8bc6\u56fe\u8c31</p> <p>\u5047\u8bbe\u76ee\u6807\u8c13\u8bcd\u662fFather(x,y)\uff0cx\u548cy\u5728\u5206\u522b\u53d6\u503c\u4e3aDavid\u548cMike\u65f6\uff0cFather(x,y)\u4e3a\u771f\u3002</p> <p>\u76ee\u6807\u8c13\u8bcd\u662f\u9700\u8981\u63a8\u65ad\u89c4\u5219\u7684\u7ed3\u8bba\uff0c\u79f0\u4f5c\u89c4\u5219\u5934\u3002\u5728\u7ed9\u5b9a\u63a8\u7406\u7ed3\u8bba\u540e\uff0cFOIL\u7b97\u6cd5\u5b66\u4e60\u5f97\u5230\u4f7f\u5f97\u7ed3\u8bba\u6ee1\u8db3\u7684\u524d\u63d0\u6761\u4ef6\uff0c\u5373\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219\u3002</p> <p>\u8be5\u77e5\u8bc6\u56fe\u8c31\u4e2dFather(x,y)\u53ea\u6709\u4e00\u4e2a\u6b63\u4f8b\u96c6\u5408Father(David,Mike)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u5728\u5df2\u77e5\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\u4e14\u786e\u5b9a\u8fd9\u4e00\u5173\u7cfb\u4e0e\u76ee\u6807\u8c13\u8bcd\u76f8\u6096\u65f6\uff0c\u624d\u80fd\u5c06\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u7528\u4e8e\u6784\u5efa\u76ee\u6807\u8c13\u8bcd\u7684\u53cd\u4f8b\u3002</p> <p>\u80cc\u666f\u77e5\u8bc6\u6765\u81ea\u4e8e\u76ee\u6807\u8c13\u8bcd\u4e4b\u5916\u7684\u5176\u4ed6\u8c13\u8bcd\u7684\u5b9e\u4f8b\u5316\u7ed3\u679c\u3002\u5982Sibling(Ann,Mike)\u3002</p>"},{"location":"AI/iai/ch2/#pra","title":"\u8def\u5f84\u6392\u5e8f\u63a8\u7406(PRA)","text":"<ul> <li>\u57fa\u672c\u601d\u60f3\uff1a\u5c06\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u8054\u8def\u5f84\u4f5c\u4e3a\u7279\u5f81\uff0c\u6765\u5b66\u4e60\u76ee\u6807\u5173\u7cfb\u7684\u5206\u7c7b\u5668\u3002</li> <li>\u6b65\u9aa4\uff1a<ul> <li>\u7279\u5f81\u62bd\u53d6\uff1a\u751f\u6210\u5e76\u9009\u62e9\u8def\u5f84\u7279\u5f81\u96c6\u5408\u3002\u751f\u6210\u8def\u5f84\u7684\u65b9\u6cd5\u6709\u968f\u673a\u6e38\u8d70\uff0cBFS,DFS\u7b49</li> <li>\u7279\u5f81\u8ba1\u7b97\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u8bad\u7ec3\u6837\u4f8b\u7684\u7279\u5f81\u503c\\(P(s\\rightarrow t;\\pi_j)\\)\u3002\u8868\u793a\u4ece\u5b9e\u4f53\u7ed3\u70b9\\(s\\)\u51fa\u53d1\uff0c\u901a\u8fc7\u5173\u7cfb\u8def\u5f84\\(\\pi _j\\)\u5230\u8fbe\u5b9e\u4f53\u7ed3\u70b9\\(t\\)\u7684\u6982\u7387\u3002\u4e5f\u53ef\u4ee5\u8868\u793a\u5e03\u5c14\u503c\uff0c\u6216\u9891\u7387\u3002</li> <li>\u5206\u7c7b\u5668\u8bad\u7ec3\uff1a\u6839\u636e\u8bad\u7ec3\u6837\u4f8b\u7684\u7279\u5f81\u503c\uff0c\u4e3a\u76ee\u6807\u5173\u7cfb\u8bad\u7ec3\u5206\u7c7b\u5668\u3002</li> </ul> </li> </ul>"},{"location":"AI/iai/ch2/#_5","title":"\u6982\u7387\u56fe\u63a8\u7406","text":"<p>\u5728\u56fe\u6570\u636e\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u8fde\u8fb9\uff0c\u5219\u53ef\u89c6\u4e3a\u8fd9\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u5177\u6709\u6982\u7387\u4f9d\u8d56\u5173\u7cfb\u800c\u76f8\u4e92\u5f71\u54cd\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6982\u7387\u63cf\u8ff0\u4e24\u4e2a\u76f8\u8fde\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u8054\u3002</p> <p>\u6982\u7387\u63a8\u7406\u53cd\u6620\u4e86\u63a8\u7406\u8fc7\u7a0b\u4e2d\u5b58\u5728\u7684\u4e0d\u786e\u5b9a\u6027\u7279\u70b9\u3002</p>"},{"location":"AI/iai/ch2/#_6","title":"\u8d1d\u53f6\u65af\u7f51\u7edc","text":"<p>\u8d1d\u53f6\u65af\u7f51\u7edc\u7528\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u6765\u8868\u793a\uff0c\u5176\u7528\u6709\u5411\u8fb9\u6765\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u5355\u5411\u6982\u7387\u4f9d\u8d56\u3002</p> <p>\u8d1d\u53f6\u65af\u7f51\u7edc\u6ee1\u8db3\u5c40\u90e8\u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u7236\u4eb2\u8282\u70b9\u6709\u6761\u4ef6\u5730\u72ec\u7acb\u4e8e\u5b83\u7684\u975e\u540e\u4ee3\u8282\u70b9\u3002</p> <p>\u8d1d\u53f6\u65af\u7f51\u7edc\u4e2d\u6240\u6709\u56e0\u7d20\u7684\u8054\u5408\u5206\u5e03\u7b49\u4e8e\u6240\u6709\u8282\u70b9\u7684\\(P(\u8282\u70b9|\u7236\u8282\u70b9)\\)\u7684\u4e58\u79ef\u3002</p>"},{"location":"AI/iai/ch2/#_7","title":"\u9a6c\u5c14\u53ef\u592b\u7f51\u7edc","text":"<p>\u8868\u793a\u6210\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u7528\u65e0\u5411\u8fb9\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u76f8\u4e92\u6982\u7387\u4f9d\u8d56\u3002</p> <p>\u4ece\u6982\u7387\u7edf\u8ba1\u89d2\u5ea6\u6765\u770b\uff0c\u9a6c\u5c14\u53ef\u592b\u903b\u8f91\u7f51\u7edc\u4e0d\u4ec5\u7b80\u6d01\u660e\u4e86\u63cf\u8ff0\u4e86\u9a6c\u5c14\u53ef\u592b\u7f51(Markov networks\uff0c\u7b80\u79f0MNs)\u4e2d\u6240\u5b58\u5728\u4fe1\u606f\u4e4b\u95f4\u5173\u8054\uff0c\u8fd8\u56e0\u5728\u9a6c\u5c14\u53ef\u592b\u7f51\u7edc\u4e2d\u5f15\u5165\u8c13\u8bcd\u903b\u8f91\u878d\u5165\u4e86\u7ed3\u6784\u5316\u77e5\u8bc6\uff1b\u4ece\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\u89d2\u5ea6\u6765\u770b\uff0c\u9a6c\u5c14\u53ef\u592b\u903b\u8f91\u7f51\u5728\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\u4e2d\u6dfb\u52a0\u4e86\u4e0d\u786e\u5b9a\u6027\u800c\u5bf9\u4e25\u683c\u63a8\u7406\u8fdb\u884c\u4e86\u677e\u7ed1\uff0c\u66f4\u597d\u53cd\u6620\u4e86\u5ba2\u89c2\u4e16\u754c\u7684\u590d\u6742\u6027\u3002</p>"},{"location":"AI/iai/ch2/#_8","title":"\u56e0\u679c\u63a8\u7406","text":""},{"location":"AI/iai/ch2/#_9","title":"\u8f9b\u666e\u68ee\u6096\u8bba","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5ffd\u7565\u6f5c\u5728\u7684\u7b2c\u4e09\u4e2a\u53d8\u91cf\u53ef\u80fd\u6539\u53d8\u5df2\u6709\u7684\u7ed3\u8bba\uff1a\u5728\u603b\u4f53\u6837\u672c\u4e0a\u6210\u7acb\u7684\u67d0\u79cd\u5173\u7cfb\u5374\u5728\u5206\u7ec4\u6837\u672c\u91cc\u6070\u597d\u76f8\u53cd\u3002\u56e0\u679c\u63a8\u7406\u5c31\u662f\u4ece\u89c2\u6d4b\u7ed3\u679c\u4e2d\u5bfb\u627e\u5f15\u53d1\u7ed3\u679c\u7684\u539f\u56e0\uff0c\u8003\u8651\u6570\u636e\u751f\u6210\u7684\u8fc7\u7a0b\uff0c\u7531\u679c\u6eaf\u56e0\u3002</p>"},{"location":"AI/iai/ch2/#_10","title":"\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u4e0e\u56e0\u679c\u56fe","text":"<p>SCM, \u4e5f\u79f0\u4f5c\u56e0\u679c\u6a21\u578b\u6216Neyman-Rubin\u56e0\u679c\u6a21\u578b\u3002 \u56e0\u679c\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\u3002\u6bcf\u4e00\u4e2a\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u90fd\u4e0e\u4e00\u4e2a\u56e0\u679c\u56fe\u76f8\u5bf9\u5e94\u3002</p> <ul> <li> <p>\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u7531\u4e24\u7ec4\u53d8\u91cf\\(U,V\\)\u4ee5\u53ca\u4e00\u7ec4\u51fd\u6570\\(f\\)\u7ec4\u6210\u3002\u5176\u4e2d\\(f\\)\u662f\u6839\u636e\u6a21\u578b\u4e2d\u5176\u4ed6\u53d8\u91cf\u53d6\u503c\u800c\u7ed9\\(V\\)\u4e2d\u6bcf\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u7684\u51fd\u6570\u3002</p> </li> <li> <p>\u5982\u679c\u53d8\u91cf\\(X\\)\u51fa\u73b0\u5728\u7ed9\u53d8\u91cf\\(Y\\)\u8d4b\u503c\u7684\u51fd\u6570\u4e2d\uff0c\u5219\\(X\\)\u662f\\(Y\\)\u7684\u76f4\u63a5\u539f\u56e0\u3002</p> </li> <li> <p>\\(U\\)\u4e2d\u7684\u53d8\u91cf\u88ab\u79f0\u4e3a\u5916\u751f\u53d8\u91cf(exogenous variables)\uff0c\\(V\\)\u4e2d\u7684\u53d8\u91cf\u79f0\u4e3a\u5185\u751f\u53d8\u91cf\u3002</p> </li> <li> <p>\u56e0\u679c\u56fe\u4e2d\u7684\u539f\u56e0\uff1a\u82e5\u53d8\u91cf\\(Y\\)\u662f\u53e6\u4e00\u4e2a\u53d8\u91cf\\(X\\)\u7684\u5b69\u5b50\uff0c\u5219\\(X\\)\u662f\\(Y\\)\u7684\u76f4\u63a5\u539f\u56e0\uff1b\u82e5\\(Y\\)\u662f\\(X\\)\u7684\u540e\u4ee3\uff0c\u5219\\(X\\)\u662f\\(Y\\)\u7684\u6f5c\u5728\u539f\u56e0\u3002</p> </li> <li> <p>\u4e58\u79ef\u5206\u89e3\u89c4\u5219\uff1a\u4efb\u610f\u6709\u5411\u65e0\u73af\u56fe\u6a21\u578b\uff0c\u8054\u5408\u6982\u7387\u5206\u5e03\u7531\u6bcf\u4e2a\u7ed3\u70b9\u4e0e\u5176\u7236\u8282\u70b9\u4e4b\u95f4\u7684\u6761\u4ef6\u6982\u7387\\(P\\)\u7ed9\u51fa\u3002</p> </li> <li> <p>\u56e0\u679c\u56fe\u7684\u57fa\u672c\u7ed3\u6784\uff1a</p> </li> <li> <p>\u94fe\uff1a\u4e09\u4e2a\u7ed3\u70b9\u4e24\u6761\u8fb9\uff0c\u5176\u4e2d\u4e00\u6761\u8fb9\u7531\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u6307\u5411\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\uff0c\u53e6\u4e00\u6761\u8fb9\u7531\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u6307\u5411\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u3002\u5bf9\u4e8e\u53d8\u91cf\\(X,Y\\), \u82e5\\(X,Y\\)\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u5355\u5411\u7684\u8def\u5f84\uff0c\u53d8\u91cf\\(Z\\)\u662f\u622a\u65ad\u8be5\u8def\u5f84\u7684\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u53d8\u91cf\u3002\u5219\u7ed9\u5b9a\\(Z\\)\u65f6\uff0c\\(X,Y\\)\u6761\u4ef6\u72ec\u7acb\u3002</p> </li> <li>\u5206\u8fde\uff1a\u4e24\u6761\u8fb9\u5206\u522b\u7531\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u6307\u5411\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u548c\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u3002\u82e5\u53d8\u91cf\\(Z\\)\u662f\\(X,Y\\)\u7684\u5171\u540c\u539f\u56e0\uff0c\u4e14\\(X\\)\u5230\\(Y\\)\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u7ed9\u5b9a\\(Z\\)\u65f6\uff0c\\(X,Y\\)\u6761\u4ef6\u72ec\u7acb\u3002</li> <li> <p>\u6c47\u8fde(\u78b0\u649e)\uff1a\u4e24\u6761\u8fb9\u5206\u522b\u7531\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u548c\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u6307\u5411\u7b2c\u4e09\u4e2a\u7ed3\u70b9\u3002\u82e5\u53d8\u91cf\\(Z\\)\u662f\\(X,Y\\)\u7684\u6c47\u8fde\u7ed3\u70b9\uff0c\u4e14\\(X\\)\u5230\\(Y\\)\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\\(X,Y\\)\u76f8\u4e92\u72ec\u7acb\uff0c\u4f46\u5728\u7ed9\u5b9a\\(Z\\)\u6216\\(Z\\)\u7684\u540e\u4ee3\u65f6\uff0c\\(X,Y\\)\u76f8\u5173\u3002</p> </li> <li> <p>\\(D\\)-\u5206\u79bb\uff1a\u8def\u5f84\\(p\\)\u88ab\u9650\u5b9a\u96c6\\(Z\\)\u963b\u585e\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a</p> </li> <li> <p>\u8def\u5f84\u4e2d\u542b\u6709\u94fe\u7ed3\u6784\u6216\u5206\u8fde\u7ed3\u6784\uff0c\u4e14\u4e2d\u95f4\u8282\u70b9\u5728\\(Z\\)\u4e2d\u3002</p> </li> <li>\u6216\u8def\u5f84\u542b\u6709\u6c47\u8fde\u7ed3\u6784\uff0c\u4e14\u6c47\u8fde\u7ed3\u70b9\u53ca\u5176\u540e\u4ee3\u90fd\u4e0d\u5728\\(Z\\)\u4e2d\u3002</li> </ul> <p>\u82e5\\(Z\\)\u963b\u585e\u4e86\u7ed3\u70b9\\(X,Y\\)\u4e4b\u95f4\u7684\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u5219\u79f0\u7ed9\u5b9a\\(Z\\)\u65f6\uff0c\\(X,Y\\)\u662f\\(D\\)-\u5206\u79bb\uff0c\u5373\u7ed9\u5b9a\\(Z\\)\u65f6\uff0c\\(X,Y\\)\u6761\u4ef6\u72ec\u7acb\u3002</p> <ul> <li>\u5e72\u9884\u6307\u7684\u662f\u56fa\u5b9a\u7cfb\u7edf\u4e2d\u7684\u53d8\u91cf\uff0c\u7136\u540e\u6539\u53d8\u7cfb\u7edf\uff0c\u89c2\u5bdf\u5176\u4ed6\u53d8\u91cf\u7684\u53d8\u5316\u3002\u5f15\u5165do\u7b97\u5b50\u3002</li> </ul>"},{"location":"English/reading/note/","title":"\u5916\u520a\u9605\u8bfb\u7b14\u8bb0","text":"<p> \u7ea6 814 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"English/reading/note/#20231130","title":"2023.11.30","text":"<p>The small consolations of office irritations</p> <ul> <li>gripe \u62b1\u6028</li> </ul> <p>Even people who excel at their work have their share of worries.</p> <ul> <li>resume a focused state of mind \u6062\u590d\u4e13\u6ce8</li> <li>balm \u9999\u6cb9\uff0c\u62a4\u80a4\u818f\uff0c\u4ee4\u4eba\u611f\u5230\u5b89\u6170\u7684\u4e8b\u52a1 </li> <li>teeth-grinding \u54ac\u7259\u5207\u9f7f</li> </ul> <p>Every company has its share of toadies who specialize in managing up: flattering the bosses and claiming more credit than is their due.</p> <ul> <li> <p>toady: \u9a6c\u5c41\u7cbe</p> </li> <li> <p>imposter \u5192\u540d\u9876\u66ff\u8005</p> </li> <li>narcolepsy \u55dc\u7761\u75c7</li> <li>beyond redemption \u65e0\u53ef\u6551\u836f\uff0c\u65e0\u53ef\u633d\u56de</li> </ul>"},{"location":"English/reading/note/#20231127","title":"2023.11.27","text":"<p>What is 'Bigorexia'?</p> <p>For many boys and young men, muscle worship has become practically a digital rite of passage in today's beefcake-saturated culture.</p> <ul> <li>rite of passage: \u6210\u4eba\u4eea\u5f0f</li> <li>beefcake-saturated: \u6ee1\u662f\u5065\u7f8e\u7537\u5b50\u7684  saturate \u9971\u548c\uff0c\u5145\u65a5</li> <li>mesomorphic: \u4f53\u80b2\u578b\u4f53\u8d28 a person whose natural body shape is neither thin nor fat, with quite a lot of muscle.   mesomorphic superheros</li> <li>top grossing \u7968\u623f\u6536\u5165\u6700\u9ad8</li> <li>adulation: \u5439\u6367\uff0c\u5949\u627f the online adulation of muscular male bodies can have a toxic effect on the self-esteem of young men, with never-ending scroll of six packs and boy-band faces.</li> </ul> <p>We know there is a ton of pressure on guys, but disordered behaviors that fall specifically on the more muscular end of the spectrum tend to get a pass publicly, since goal-oriented habits around the gym are socially accepted, glamorized even.</p> \u7ffb\u8bd1 <p>\u6211\u4eec\u4e86\u89e3\u7537\u6027\u8eab\u4e0a\u80cc\u8d1f\u7740\u5404\u79cd\u5404\u6837\u7684\u538b\u529b\uff0c\u4f46\u5f53\u4ed6\u4eec\u67d0\u4e9b\u5931\u8c03\u7684\u884c\u4e3a\u6070\u5de7\u5c5e\u4e8e\u589e\u808c\u7684\u8303\u7574\u65f6\uff0c\u516c\u4f17\u4fbf\u4f1a\u5bf9\u6b64\u89c1\u602a\u4e0d\u602a\uff0c\u56e0\u4e3a\u4ee5\u5065\u8eab\u4e3a\u4e2d\u5fc3\u5c55\u5f00\u7684\u5404\u79cd\u76ee\u6807\u5bfc\u5411\u7684\u884c\u4e3a\u4e60\u60ef\uff0c\u5728\u793e\u4f1a\u4e0a\u662f\u5e7f\u53d7\u8ba4\u540c\u7684\uff0c\u751a\u81f3\u81ea\u5e26\u7f8e\u5316\u6ee4\u955c\u3002</p>"},{"location":"English/reading/note/#20231129","title":"2023.11.29","text":"<p>Why NASA report is significant\u2014and what it means for search for extraterrestrial life</p> <ul> <li>extraterrestrial \u5730\u5916\u7684</li> <li>catchy \u60a6\u8033\u7684\uff0c\u7405\u7405\u4e0a\u53e3\u7684 a catchy song</li> <li>sensationalism \u54d7\u4f17\u53d6\u5ba0\uff0c\u8038\u4eba\u542c\u95fb The newspaper has been accused of sensationalism in its coverage of the murders.</li> <li>stigma \u6c61\u540d\uff0c\u803b\u8fb1\uff0c\u7f9e\u8fb1 There was a social stigma attached to single parenthood.</li> </ul>"},{"location":"English/reading/note/#2023121","title":"2023.12.1","text":"<ul> <li>memory lane \u611f\u6000\u5f80\u4e8b</li> </ul> <p>Toy entrepreneurs are in heated chases for the licensing right to decades-old toys, looking to cash in on the enduring appeal of nostalgia.</p> <ul> <li>cash in: \u83b7\u5229</li> </ul>"},{"location":"English/reading/note/#2023125","title":"2023.12.5","text":"<p>Rock Band Mayday Faces Music Over Lip-Sync Claims at Shanghai Gig</p> <ul> <li>lip-sync \u5047\u5531 out of sync \u80cc\u9053\u800c\u9a70</li> <li>allege \u6307\u63a7  be confronted with the allegations, deny the allegations of lip-syncing, conduct an investigation into the allegations</li> <li>dismiss \u4e0d\u4e88\u8003\u8651\uff0c\u6452\u5f03\uff0c\u5426\u5b9a </li> </ul> <p>He dismissed the opinion polls as worthless \u4ed6\u8ba4\u4e3a\u6c11\u610f\u68c0\u6d4b\u6beb\u65e0\u7528\u5904\u800c\u4e0d\u4e88\u8003\u8651</p> <ul> <li>damage his clean-cut image \u635f\u5bb3\u4e86\u9ad8\u96c5\u5f62\u8c61</li> <li>in due course \u5728\u9002\u5f53\u7684\u65f6\u5019\uff0c\u5230\u65f6\u5019</li> </ul> <p>Future details will be announced in due course</p> <ul> <li>set/put the record straight \u6f84\u6e05\u95ee\u9898\uff0c\u5f04\u6e05\u771f\u76f8</li> </ul>"},{"location":"English/reading/note/#2023126","title":"2023.12.6","text":"<p>The Vision is stuffed with innovations that eclipse every other headset on the market.</p> <p>Vision Pro\u96c6\u6210\u4e86\u5404\u79cd\u521b\u65b0\u5143\u7d20\uff0c\u4ee4\u5e02\u9762\u4e0a\u4efb\u4f55\u4e00\u4e2a\u5934\u663e\u8bbe\u5907\u90fd\u9eef\u7136\u5931\u8272\u3002</p> <p>The product is dusted with Apple's user-friendly design magic. \u5f97\u5230\u6dcb\u6f13\u5c3d\u81f4\u7684\u4f53\u73b0</p> <p>be sprinkled with errors </p> <ul> <li>expand one's understanding of \u52a0\u6df1\u5bf9\u2026\u2026\u7684\u7406\u89e3</li> <li>add more dimensions to sth \u62d3\u5bbd\u5e7f\u5ea6</li> </ul> <p>Genomics has added a new dimension to the study of life and evolution. \u6253\u5f00\u65b0\u7684\u601d\u8def</p> <ul> <li>the nascent industry \u65b0\u5174\u4ea7\u4e1a emerging</li> <li>turmoil, upheaval, fallout \u52a8\u4e71\uff0c\u6fc0\u53d8\uff0c\u4f59\u6ce2\uff0c\u4e0d\u826f\u5f71\u54cd</li> <li>exodus \u5927\u6279\u4eba\u6d8c\u79bb\uff0ca mass exodus of , the exodus from A to B</li> </ul>"},{"location":"English/reading/note/#2023127","title":"2023.12.7","text":"<p>Novel affairs</p> <p>Having shared the general literary snobbery that clings to romance novels, she is now evangelical about the genre.</p> <p>\u6b64\u524d\u5979\u4e5f\u548c\u6587\u5316\u7cbe\u82f1\u4e4b\u6d41\u4e00\u6837\uff0c\u5bf9\u8a00\u60c5\u5c0f\u8bf4\u5b58\u5728\u9119\u89c6\u60c5\u7ed3\uff0c\u4f46\u5b83\u73b0\u5728\u6c89\u8ff7\u4e8e\u8fd9\u7c7b\u5c0f\u8bf4\u3002</p> <ul> <li>snobbery \u52bf\u5229\uff0c\u81ea\u547d\u4e0d\u51e1</li> <li>evangelical \u72c2\u70ed\u7684\uff0c\u70ed\u8877\u7684</li> <li>whimsical \u602a\u5f02\u7684\uff0c\u53cd\u590d\u65e0\u5e38\u7684\uff0c\u4e0d\u5207\u5b9e\u9645\u7684</li> <li>ravish \u4f7f\u72c2\u559c\uff0c\u4f7f\u9500\u9b42</li> <li>reassuring \u4f7f\u4eba\u5b89\u5fc3\u7684 a reassuring smile</li> <li>pillar \u6838\u5fc3\uff0c\u652f\u67f1</li> </ul>"},{"location":"English/reading/reading/","title":"\u6258\u798f\u9605\u8bfb\u6587\u7ae0\u603b\u7ed3","text":"<p> \u7ea6 318 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"English/reading/reading/#_2","title":"\u6587\u5316\u827a\u672f","text":""},{"location":"English/reading/reading/#the-actor-and-the-audienceofficial-66","title":"The Actor and the Audience(Official 66)","text":"<ul> <li>crumble \u5d29\u6e83\uff0c\u5f04\u788e</li> </ul> <p>The actor who has been brilliant in rehearsal can crumble before an audience.</p> <p>An actor who seemed fairly unexciting at rehearsal can suddenly take fire and dazzle the audience with unexpected energy.</p> <ul> <li>soberly \u51b7\u9759\u5730\uff0c\u4e25\u8083\u5730\uff0c\u6734\u7d20\u5730</li> </ul> <p>Opening night recklessness is viewed as a sure sign of the amateur, who relies primarily on guts and adrenaline to get through the performance.</p> <ul> <li>recklessness: \u9c81\u83bd\uff0c\u8f7b\u7387\uff0c\u4e0d\u987e\u540e\u679c</li> <li> <p>guts: \u80c3\uff0cadrenaline:\u80be\u4e0a\u817a\u7d20</p> </li> <li> <p>veteran: \u8001\u5175\uff0c\u9000\u4f0d\u519b\u4eba\uff0c\u7ecf\u9a8c\u4e30\u5bcc\u7684\u4eba</p> </li> <li>crest: \u9876\u5cf0\uff0c\u5230\u8fbe\u5c71\u9876</li> </ul> <p>The veteran actor can determine quickly how to ride the crest of audience laughter and how to hold the line just long enough that it will pierce the lingering chuckles but not to be overridden by them.</p>"},{"location":"English/reading/reading/#the-development-of-instrumental-musicofficial-58","title":"The Development of Instrumental Music(Official 58)","text":"<ul> <li>secular \u4e16\u4fd7\u7684</li> <li>The seventeenth century marked the rise of music that lacked extramusical meaning. \u6807\u5fd7\u7740\u62e5\u6709\u97f3\u4e50\u610f\u4e49\u7684\u97f3\u4e50\u5174\u8d77</li> <li>explicit narrative content \u660e\u786e\u7684\u53d9\u4e8b\u5185\u5bb9</li> <li>a vehicle of religious expression \u5b97\u6559\u8868\u8fbe\u7684\u5de5\u5177</li> <li>communal \u516c\u5171\u7684</li> <li>refinement \u51c0\u5316\uff0c\u7eaf\u51c0\uff0c\u9ad8\u5c1a\uff0c\u7cbe\u5236</li> <li>violin, viola, cello \u5c0f\u63d0\u7434\u4e2d\u63d0\u7434\u5927\u63d0\u7434</li> <li>whereby \u5373</li> <li>sonota \u594f\u9e23\u66f2\uff0csuite \u7ec4\u66f2, concerto \u534f\u594f\u66f2</li> <li>tempo and texture \u8282\u594f\u548c\u8d28\u611f</li> <li>genre \u7c7b\u578b</li> </ul>"},{"location":"English/reading/reading/#_3","title":"\u5929\u6587\u5b66","text":"<ul> <li>ultraviolet \u7d2b\u5916\u7ebf</li> <li>ion \u79bb\u5b50</li> <li>luminosity of the coma \u5f57\u53d1\u7684\u4eae\u5ea6</li> <li>solar wind sweeps through \u592a\u9633\u98ce\u626b\u8fc7</li> <li>strew \u6492\u6ee1 some of this debris may get strewn across Earth's orbit.</li> <li>deplete \u67af\u7aed\uff0c\u7a7a\u4e4f</li> </ul>"},{"location":"English/writing/Writing/","title":"Writing","text":"<p> \u7ea6 61 \u4e2a\u5b57 </p>"},{"location":"English/writing/Writing/#template","title":"Template","text":"<ul> <li>The beginning</li> <li>point1+reasoning</li> <li>point2+exemplification</li> <li>point3+concession</li> <li>The end</li> </ul> <p>A little structure</p>"},{"location":"English/writing/Writing/#brainstorming","title":"Brainstorming","text":""},{"location":"English/writing/Writing/#a-reservoir-of-high-level-points","title":"A reservoir of high-level points","text":"<ul> <li>Effectiveness and efficiency</li> <li>Economy and finance</li> <li>Environment and health</li> <li>Equality and fairness</li> <li>Feasibility and compatibility</li> <li>Culture and globalization</li> <li>Technology and internet</li> </ul> <p>For example:</p> <p>Government should invest more in education than infrastructure to improve the society?</p>"},{"location":"English/writing/Writing/#prompt-analysis-and-response","title":"Prompt analysis and response","text":""},{"location":"English/writing/Writing/#idea-generation-and-examples","title":"Idea generation and examples","text":""},{"location":"English/writing/topic/","title":"Topic","text":"<p> \u7ea6 207 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"English/writing/topic/#do-grades-encourage-students-to-learn","title":"Do grades encourage students to learn?","text":"<p>Having a glimpse of the current situation in education around the globe, we may marvel at the large variety of examinations students must take each semester.</p>"},{"location":"English/writing/topic/#movies-serious-or-entertaining","title":"Movies: serious or entertaining?","text":"<p>The world's movie industry has witnessed unprecedented boom in recent years. (\u73b0\u8c61) Among these popular productions, serious movies and entertaining movies are the most influential. Some viewers are in favor of the former, saying serious ones evoke deeper thoughts, while other fans support the latter due to their humor.(\u4e24\u65b9\u89c2\u70b9) According to my preference, I would express my appreciation for serious movies.(\u6211\u7684\u89c2\u70b9)</p> <p>Therefore, the merits encompassed within serious movies far outweigh those of funny movies. </p> <p>memorable works.</p>"},{"location":"English/writing/topic/#do-grades-encourage-students-to-learn_1","title":"Do grades encourage students to learn?","text":"<p>Having a glimpse of the current situation in education around the globe, we may marvel at the large variety of examinations students must take each semester. Apparently, giving grades is considered the most common method to evaluate the performance of a student. In a sense, pursuing high grades is indeed an essential stimulus for students to concentrate on their textbooks. It is admitted that marks really encourage the students to learn, but their importance should not be exaggerated.</p>"},{"location":"cs/","title":"Computer Science","text":"<p> \u7ea6 2 \u4e2a\u5b57 </p>"},{"location":"cs/dm/","title":"\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840","text":"<p> \u7ea6 323 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201d\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u201c \u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a \u300aDiscrete Mathematics and its Application\u300b</p> <p>\u8bfe\u7a0b\u5185\u5bb9\uff1a\u79bb\u6563\u6570\u5b66\u7684\u7279\u70b9\u5c31\u662f\u77e5\u8bc6\u70b9\u96f6\u6563\uff08\u79bb\u6563\u6570\u5b66\u79bb\u6563\u5b66(^_^)\uff09\u4e3b\u8981\u5206\u4e3a\u547d\u9898\u903b\u8f91\u4e0e\u8bc1\u660e\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u6570\u8bba\uff0c\u8ba1\u6570\uff0c\u5173\u7cfb\uff0c\u56fe\u8bba\u51e0\u4e2a\u90e8\u5206\u3002\u56fd\u5185\u7684\u79bb\u6563\u4f3c\u4e4e\u5728\u903b\u8f91\u8bba\u8fd9\u4e00\u7ae0\u4e0a\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u800c\u6bd4\u8f83\u91cd\u8981\u7684\u751f\u6210\u51fd\u6570\uff0c\u56fe\uff0c\u6811\u76f8\u5173\u6982\u5ff5\u4e0e\u7b97\u6cd5\u4e0d\u80fd\u5f88\u8be6\u7ec6\u5168\u9762\u7684\u9610\u8ff0\u3002\u56e0\u6b64ZJU\u7684\u8fd9\u95e8\u8bfe\u7531\u4e8e\u8bfe\u7a0b\u8bbe\u7f6e\u4ee5\u53ca\u4efb\u8bfe\u6559\u5e08\u539f\u56e0\uff0c\u4f53\u9a8c\u5e76\u4e0d\u597d\u3002\u8fd9\u91cc\u63a8\u8350UCB\u7684CS70\uff0c\u867d\u7136\u8bfe\u7a0b\u5185\u5bb9\u4e0a\u4e0e\u8fd9\u95e8\u8bfe\u6709\u8f83\u5927\u533a\u522b\uff0c\u4f46\u662f\u8bfe\u7a0b\u7684note\u975e\u5e38\u8be6\u5c3d\uff0c\u8fd8\u6709discussion\u548chomework\u5e2e\u52a9\u638c\u63e1\u77e5\u8bc6\uff0c\u4f53\u9a8c\u6781\u4f73\u3002</p> <p>\u7531\u4e8e\u8fd9\u95e8\u8bfe\u4e0a\u8bfe\u6240\u5b66\u7684\u4e1c\u897f\u6709\u9650\uff0c\u4f46\u662f\u5c0f\u6d4b\u4e0e\u8003\u8bd5\u975e\u5e38\u7075\u6d3b\uff0c\u6240\u6709\u77e5\u8bc6\u70b9\u9700\u8981\u719f\u7ec3\u638c\u63e1\u5e76\u4e14\u5b66\u4f1a\u8fd0\u7528\u3002\u4ee5\u4e0b\u662f\u6211\u7684\u671f\u672b\u590d\u4e60\u624b\u5199\u7b14\u8bb0\uff0c\u5305\u542b\u4e86ZJU\u7248\u79bb\u6563\u7684\u77e5\u8bc6\u70b9\uff08\u81ea\u8ba4\u4e3a\u662f\u6bd4\u8f83\u5168\u4e86\uff09\u3002\u53ef\u4ee5\u5728\u590d\u4e60\u65f6\u7528\u6765\u8fc7\u77e5\u8bc6\u70b9\uff0c\u4f46\u662f\u5b66\u8fd9\u95e8\u8bfe\u5c3d\u91cf\u8ba4\u771f\u770b\u4e66\u548cslide\u3002</p> <p>\u79bb\u6563\u6570\u5b66\u671f\u672b\u590d\u4e60\u7b14\u8bb0</p>"},{"location":"cs/CLDF/","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840","text":"<p> \u7ea6 52 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u201d \u8bfe\u7a0b\u7b14\u8bb0</p> <p>\u6388\u8bfe\u6559\u5e08\uff1a\u8463\u4e9a\u6ce2</p> <p>\u53c2\u8003\u6559\u6750\uff1aLogic and Computer Design Fundamental, M. Morris R. Mano, Charles R. Kime, Tom Martin</p>"},{"location":"cs/CLDF/lec1/","title":"Digital Systems and Information","text":"<p> \u7ea6 1384 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"cs/CLDF/lec1/#digital-system","title":"Digital System","text":"<ul> <li>Takes a set of discrete information inputs and discrete internal information (system state) and generates a set of discrete information outputs.</li> </ul>"},{"location":"cs/CLDF/lec1/#tyoes-of-digital-systems","title":"Tyoes of Digital Systems","text":"<ul> <li>No state present:<ul> <li>Combinational Logic System</li> <li>Output = Fuction(Input)</li> </ul> </li> <li>State present:<ul> <li>State updated at discrete times: Sychronous Sequential System\uff08\u7cfb\u7edf\u91cc\u6709\u7edf\u4e00\u7684\u65f6\u949f, \u6bcf\u4e00\u79d2\u949f\u51b3\u5b9a\u8981\u4e0d\u8981\u66f4\u65b0, \u8fd9\u4e2a\u66f4\u65b0\u53ea\u4f1a\u5728\u6bcf\u79d2\u949f\u7684\u8fb9\u754c\u4ea7\u751f\uff09</li> <li>State updated at any time: Asynchronous Sequential System</li> <li>State = Function(State,Input)</li> <li>Output = Function(State) or Function(State,Input)</li> </ul> </li> </ul> <p>Example</p> <p>\u6c7d\u8f66\u4e0a\u7684\u91cc\u7a0b\u8868\uff0c\u8f93\u5165count up\u548creset\u4fe1\u53f7\uff0c\u5982\u679ccount up\u5c31\u628a\u91cc\u7a0b\u52a0\u4e00\uff0c\u8f93\u51fa\u662f\u53ef\u89c6\u5316\u7684\u91cc\u7a0b\u3002\u72b6\u6001\u5c31\u662f\u91cc\u7a0b\u8868\u91cc\u7684\u503c \u8be5\u6570\u5b57\u7cfb\u7edf\u662fasynchronous\u7684\uff0c\u56e0\u4e3a\u66f4\u65b0\u4fe1\u53f7\u7684\u65f6\u95f4\u4e0d\u4f9d\u8d56\u7edf\u4e00\u65f6\u949f\uff0c\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u53d1\u751f</p>"},{"location":"cs/CLDF/lec1/#embedded-systems","title":"Embedded Systems","text":"<ul> <li>Computers as integral parts of other products</li> <li>Examples of embedded computers\uff1a<ul> <li>Microcomputers</li> <li>Microcontrollers</li> <li>Digital signal processors</li> </ul> </li> <li>Block Diagram of Embedded Systems </li> </ul> <p>Note</p> <p>\u8fd9\u91cc\u9700\u8981\u5c06\u7269\u7406\u7684\u4fe1\u606f\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u5316\u4e3a\u5904\u7406\u5668\u53ef\u4ee5\u5904\u7406\u7684\u6570\u5b57\u4fe1\u53f7\u3002A-to-D:\u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cD-to-A\uff1a\u5904\u7406\u540e\u628a\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6a21\u62df\u4fe1\u53f7\uff0c\u8fd9\u4e24\u4e2ablock\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0e\u666e\u901a\u8ba1\u7b97\u673a\u7684\u4e3b\u8981\u533a\u522b</p> <p>Example: Temperature Measurement and Display</p> <p>\u5bf9\u4e8e\u7a7a\u8c03\u6765\u8bf4\uff0cinput \u662f\u4e00\u4e2a\u7535\u538b\u503c\uff08\u7531\u6e29\u5ea6\u4f20\u611f\u5668\u5c06\u4fe1\u53f7\u8f6c\u5316\u4e3a\u7535\u538b\uff09\uff0c\u4ee5\u4e0b\u662f\u7a7a\u8c03\u7406\u89e3\u7535\u538b\u53d8\u5316\u7684\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u5176\u4e2d\u5468\u671f\u6027\u91c7\u6837\u8fd0\u7528\u5230\u4e86\u9999\u519c\u91c7\u6837\u5b9a\u7406\uff1a\u4e3a\u4e86\u4e0d\u5931\u771f\u5730\u6062\u590d\u6a21\u62df\u4fe1\u53f7\uff0c\u91c7\u6837\u9891\u7387\u5e94\u5927\u4e8e\u7b49\u4e8e\u6a21\u62df\u4fe1\u53f7\u9891\u8c31\u4e2d\u6700\u9ad8\u9891\u7387\u76842\u500d\u3002</p>"},{"location":"cs/CLDF/lec1/#signal-examples-over-time","title":"Signal Examples Over Time","text":""},{"location":"cs/CLDF/lec1/#information-representation","title":"Information Representation","text":"<ul> <li>Information variables represented by physical quantities.</li> <li>For digital systems, the variables take on discreye values.</li> <li>Binary values are represented abstractly by:<ul> <li>digits 0 and 1</li> <li>words F and T</li> <li>words Low(L) and High(H)</li> <li>words On and Off</li> </ul> </li> <li>Binary values are represented by values or ranges of values of physical quantities.</li> </ul> <p>Why binary is most prevalent in digital systems? </p>"},{"location":"cs/CLDF/lec1/#number-systems-representation","title":"Number Systems - Representation","text":"<ul> <li>A number with radix \\(r\\) is represented by a string of digits: \\(A_{n-1}A_{n-2}\u2026\u2026A_1A_0.A_{-1}\u2026\u2026A_{-m+1}A_{-m}\\) in which \\(0\\leq A_i&lt;r\\) and . is the radix point</li> </ul> \\[ (Number)_r = (\\sum_{i=0}^{i=n-1}A_ir^i)+(\\sum_{j=-m}^{j=-1}A_jr^j) \\] <ul> <li>The string of digits represents the power series:</li> </ul>"},{"location":"cs/CLDF/lec1/#special-powers-of-2","title":"Special Powers of 2","text":"<ul> <li>\\(2^{10}\\) is Kilo, denoted \"K\"</li> <li>\\(2^{20}\\) is Mega, denoted \"M\"</li> <li>\\(2^{30}\\) is Giga, denoted \"G\"</li> <li>\\(2^{40}\\) is Tera, denoted \"T\"</li> </ul>"},{"location":"cs/CLDF/lec1/#binary-arithmetic","title":"Binary Arithmetic","text":"<ul> <li>Single Bit Binary Subtraction with Borrow </li> <li>Binart Multiplication </li> </ul>"},{"location":"cs/CLDF/lec1/#conversion-between-bases","title":"Conversion Between Bases","text":"<ul> <li>Convert the Integer Part</li> <li>Convert the Fraction Part Repeatedly multiply the fraction by the new radix and save the integer digits that result.  The digits for the new radix are the integer digits in order of their computation. If the new radix is &gt; 10, then convert all integers &gt; 10 to digits A, B, \u2026  </li> </ul> <p>\u8fd9\u91cc\u6ce8\u610f\u8865\u96f6\u65f6\u96f6\u7684\u4f4d\u7f6e\uff0c\u6574\u6570\u90e8\u5206\u4ece\u5c0f\u6570\u70b9\u5f00\u59cb\u5f80\u5de6\uff0c\u5c0f\u6570\u90e8\u5206\u4ece\u5c0f\u6570\u70b9\u5f00\u59cb\u5f80\u53f3\uff1a\\((11 \\:111\\:101.010\\:011\\:11)_2\\) = \\((011\\:111\\:101.010\\:011\\:110)_2\\)</p> <ul> <li>Join the two results with a radix point</li> </ul>"},{"location":"cs/CLDF/lec1/#binary-coding","title":"Binary Coding","text":"<ul> <li> <p>Numeric</p> <ul> <li>Must represent range of data needed</li> <li>Very desirable to represent data such that simple,straightforward computation for common arithmetic operations permitted</li> <li>Tight relation to binary numbers</li> </ul> </li> <li> <p>Non-numeric</p> <ul> <li>Greater flexibility since arithmetic operations not applied(\u7075\u6d3b\u6027\u662f\u6307\u4fdd\u8bc1\u7f16\u7801\u6620\u5c04\u5173\u7cfb\u552f\u4e00\u7684\u60c5\u51b5\u4e0b\u7684\u7f16\u7801\u90fd\u53ef\u4ee5\u79f0\u4f5c\u5408\u6cd5\u7f16\u7801)</li> <li>Not tied to binary numbers</li> </ul> </li> <li> <p>Number of bits requierd: Given M elements to be represented by a binary code, the minimum number of bits \\(n\\) needed satisfies the following relationships: \\(2^n\\ge M\\ge 2^{n-1}\\) \\(n=\\lceil log_2M\\rceil\\)</p> </li> </ul> <p>Example</p> <p>You can represent 4 elements in radix r=2 with n=2 digits:(00,01,10,11)</p> <p>Also, you can use n=4 digits: (0001,0010,0100,1000) (\"one hot\" code\uff0c\u8981\u6c42\u6bd4\u7279\u5411\u91cf\u4e2d\u53ea\u6709\u4e00\u4f4d\u662f1\uff0c\u4f7f\u7528\u8be5\u7f16\u7801\u7684\u597d\u5904\u662f\u51b3\u5b9a\u6216\u6539\u53d8\u72b6\u6001\u673a\u76ee\u524d\u7684\u72b6\u6001\u6210\u672c\u76f8\u5bf9\u8f83\u4f4e\uff0c\u5bb9\u6613\u8bbe\u8ba1\u4e5f\u5bb9\u6613\u68c0\u6d4b\u975e\u6cd5\u884c\u4e3a\uff0c\u7f3a\u70b9\u662f\u4fe1\u606f\u8868\u793a\u7387\u8f83\u4f4e)</p> <p>Decimal Codes-binary codes for decimal digits \u4ee5\u4e0b\u662f\u5e38\u89c1\u7684\u5bf9\u5341\u8fdb\u5236\u5341\u4e2a\u6570\u5b57\u8fdb\u884c\u7684\u7f16\u7801\uff1a </p>"},{"location":"cs/CLDF/lec1/#excess-3-code-and-84-2-1-code","title":"Excess 3 Code and 8,4,-2,-1 Code","text":"<p>\u5176\u4e2dExcess 3\u5373\u4e8c\u8fdb\u5236\u8868\u793a\u4e0a\u52a03 Excess 3 \u548c 8,4,-2,-1\u7f16\u7801\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u7f16\u7801\u6210\u5bf9\u51fa\u73b0\uff0c\\(i\\)\u548c\\(9-i\\)\u4e92\u4e3a\u53cd\u7801\uff0c\u8fd9\u4e48\u505a\u7684\u597d\u5904\u5c31\u662f\u5728\u901a\u4fe1\u4e2d\uff0c\u6570\u5b571-9\u51fa\u73b0\u7684\u6982\u7387\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u7b49\u53ef\u80fd\u7684\u51fa\u73b0\uff0c\u8fd9\u6837\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d0\u548c1\u7684\u9891\u7387\u4e5f\u662f\u63a5\u8fd1\u7684</p>"},{"location":"cs/CLDF/lec1/#binary-coded-decimalbcd","title":"Binary Coded Decimal(BCD)","text":"<ul> <li>The BCD code is the 8,4,2,1 code</li> <li>BCD is the weighted code, 8,4,2,1 are weights</li> <li>only encodes 0-9</li> <li>\\(1001(9)=1000(8)+0001(1)\\)</li> </ul> <p>Warning</p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610fconversion \u548c coding\u7684\u533a\u522b\uff1a 13=1101(This is conversion) 13: 0001|0011(This is coding)</p> <p>Why do we need BCD</p> <p>\u7535\u5b50\u8868\u4e2d\u6709\u65f6\u9488\u79d2, \u5982\u679c\u7528\u5341\u516d\u8fdb\u5236\u4fdd\u5b58\u65f6\u9488\u79d2, \u90a3\u4e48 \u52a0\u52309\u4ee5\u4e0a\u5f97\u5230 ABCD..., \u5f53\u6211\u4eec\u60f3\u8981\u663e\u793a\u8fd9\u4e9b\u503c\u65f6, \u6211\u4eec\u8981\u5148\u505a\u8fdb\u5236\u8f6c\u6362, \u518d\u663e\u793a(\u5982 A \u8f6c\u4e3a 10) \u8fd9\u5176\u4e2d\u8981\u505a\u9664\u6cd5\uff0c\u6548\u7387\u4f4e\u3002\u4f46\u662f\u7528\u4e24\u4f4dBCD\u7801\u8868\u793a, \u5c31\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u7ed3\u679c\u3002</p> <ul> <li>BCD Arithmetic \u5982\u679c\u5927\u4e8e9\uff0c\u5219\u52a0\u4e0a6\uff080110\uff09 </li> </ul>"},{"location":"cs/CLDF/lec1/#ascii-character-codes","title":"ASCII Character Codes","text":"<ul> <li>American Standord Code for Information Interchange</li> <li>It uses 7-bits to represent:<ul> <li>94 Graphic printing characters</li> <li>34 Non-printing characers</li> </ul> </li> <li><code>0</code>: \\(30_{16}\\)</li> <li><code>A</code>: \\(41_{16}\\)</li> <li><code>a</code>: \\(61_{16}\\)</li> <li><code>Delete</code>: all bits set</li> </ul>"},{"location":"cs/CLDF/lec1/#parity-bit-error-detection-codes","title":"Parity bit error-detection codes","text":"<ul> <li>Rebundancy (extra information), in the form of extra bits, can be incorporated into binary code words to detect and correct errors.</li> <li>Parity: an extra bit appended onto the code word to make the number of 1's odd or even. It can detect all single-bit errors<ul> <li>A code word has even parity if the number of 1's in the code word is even</li> <li>A code word has odd parity if the number of 1's in the code word is odd</li> </ul> </li> </ul> <p>Question</p> <p>\u4e0d\u592a\u7406\u89e3\u5177\u4f53\u673a\u5236</p>"},{"location":"cs/CLDF/lec1/#gray-code-decimal","title":"Gray Code-Decimal","text":"<p>\u53ef\u4ee5\u770b\u5230gray code\u7684\u6027\u8d28\u5c31\u662f\u76f8\u90bb\u7684\u4e24\u4f4d\u53ea\u76f8\u5dee\u4e00\u4e2abit\uff0c\u5176\u4f5c\u7528\u53ef\u4ee5\u5728optical shaft encoder\u4e2d\u5c55\u73b0\u51fa\u6765 </p> <p>\u5149\u5b66\u7f16\u7801\u5668\u5305\u542b\u900f\u660e\u533a\u57df\u548c\u4e0d\u900f\u660e\u533a\u57df\uff0c\u4e24\u4e2a\u76f8\u90bb\u533a\u57df\u989c\u8272\u8f6c\u53d8\u4ee3\u8868\u5176\u5bf9\u5e94\u7684binary code\u53d8\u5316\uff0c\u5f53\u4e09\u4e2a\u533a\u57df\u7684\u4f20\u611f\u5668\u4e0d\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\u65f6\uff08\u5373\u5b58\u5728\u5b89\u88c5\u8bef\u5dee\uff09\uff0c\u666e\u901a\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u4f1a\u51fa\u73b0\u4e2d\u95f4\u60c5\u51b5\uff0c\u800cgray\u7801\u7531\u4e8e\u76f8\u90bb\u53ea\u5dee\u4e00\u4e2abit\uff0c\u5219\u4e0d\u4f1a\u4ea7\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u4f8b\u5982\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801 011 \u548c 100 \u6765\u8bf4\uff0c\u8fd8\u6709\u53ef\u80fd\u51fa\u73b0 000, 001, 010, 110, 101, 111; \u4f46\u5bf9\u4e8e\u683c\u96f7\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u4ed6\u90fd\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7f16\u53f7\u3002</p>"},{"location":"cs/CLDF/lec1/#unicode","title":"Unicode","text":"<ul> <li>Unicode extends ASCII to 65536 universal characters codes</li> <li>is able to encode characters in world languages(Ascii only can deal with English)</li> <li>2 byte(16-bit) code words</li> </ul>"},{"location":"cs/CLDF/lec2/","title":"Combinational Logic Circuits","text":"<p> \u7ea6 2790 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p>"},{"location":"cs/CLDF/lec2/#gate-circuits-and-boolean-equations","title":"Gate Circuits and Boolean Equations","text":""},{"location":"cs/CLDF/lec2/#binary-logic-and-gates","title":"Binary Logic and Gates","text":"<ul> <li>Binary variables take on one of two values</li> <li>Logical operators operate on binary values and binary variables</li> <li>Basic logical operators are the logic functions AND(\\(\\cdot\\)), OR(+) and NOT(\\(\\overline{}\\)).</li> <li>Logic gates implement logic functions</li> </ul> <p>Truth Tables: a tabular listing of the values of a function for all possible combinations of values on its arguments</p> <p>Logic Function Implementation: </p> <p></p> <p>Logic Gates</p> <p></p> <p>NAND\u548cNOR\u662f\u6700\u57fa\u672c\u7684\u95e8\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u6240\u6709\u7684\u95e8\u7535\u8def</p> <p>Logical Gate Symbols and Behavior</p> <p></p> <p>Gate Delay</p> <ul> <li>In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously.</li> <li>The delay between an input change(s) and the resulting output change is the gate delay </li> </ul> <p></p>"},{"location":"cs/CLDF/lec2/#boolean-algebra","title":"Boolean Algebra","text":"<p>Basic identities:</p> <p></p> <p>Note</p> <p>1.\u5de6\u53f3\u516c\u5f0f\u662f\u5bf9\u5076\u7684(The dual of an algebraic expression is obtained by interchanging + and \u00b7 and interchanging 0\u2019s and 1\u2019s. )</p> <p>2.\u516c\u5f0f15\u7684\u7279\u6b8a\u6027</p> <p>Boolean Operator Precedence: Parenthese&gt;NOT&gt;AND&gt;OR</p> <p>Example: Proof\\(\\overline{(X+Y)}Z+X\\overline{Y}=\\overline{Y}(X+Z)\\) $$ \\overline{(X+Y)}Z+X\\overline{Y}=\\overline{Y}(X+\\overline{X}Z)=\\overline{Y}(X+\\overline{X})(X+Z) $$</p> <p>Complementing Functions: </p> <p>Use DeMorgan's Theorem to complement a function:</p> <ul> <li>Interchange AND and OR operators</li> <li>Complement each constant value and literal</li> </ul> <p>Note</p> <p>\u6ce8\u610f\u4fdd\u6301\u8fd0\u7b97\u987a\u5e8f\u4e0d\u53d8\uff08by adding parenthese)</p>"},{"location":"cs/CLDF/lec2/#canonical-forms","title":"Canonical Forms","text":"<p>\u4efb\u4f55\u903b\u8f91\u51fd\u6570\u53ef\u4ee5\u5199\u6210SOM\u6216POM\u7684\u5f62\u5f0f(Sum of Minterms or Product of Maxterms)</p>"},{"location":"cs/CLDF/lec2/#minterms-and-maxterms","title":"Minterms and Maxterms","text":"<ul> <li>Minterms are AND terms with every variable present in either true or complemented form. </li> <li>Maxterms are OR terms with every variable in true or complemented form.</li> <li>There are \\(2^n\\) minterms or maxterms for \\(n\\) variables.</li> </ul> <p>Note</p> <p>The index above(convert to binary form,with 1 corresponding to true) is important for describing which variables in the terms are true and which are complemented.  \u5373index\u662f\u4f7f\u5f97minterm=1(maxterm=0)\u7684\u552f\u4e00\u53d6\u503c\u3002</p> <p>Standard Order: All variables will be present in a minterm or maxterm and will be listed in the same order (usually alphabetically) </p>"},{"location":"cs/CLDF/lec2/#canonical-sum-of-minterms","title":"Canonical Sum of Minterms","text":"<ul> <li>Any boolean function can be expressed as a sum of minterms.</li> <li>Expand all terms first to explicitly list all minterms(\"ANDing\" any term missing a varaible \\(v\\) with a term \\((v+\\overline{v})\\))</li> </ul>"},{"location":"cs/CLDF/lec2/#canonical-product-of-maxterms","title":"Canonical Product of Maxterms","text":"<ul> <li>Any Boolean Function can be expressed as a product of maxterms</li> <li>expand all terms first to explicitly list all maxterms.  Do this by first applying the second distributive law , \u201cORing\u201d terms missing variable \\(v\\) with a term equal to \\(v\\cdot \\overline{v}\\) and then applying the distributive law again</li> </ul>"},{"location":"cs/CLDF/lec2/#standard-forms","title":"Standard Forms","text":"<ul> <li>Standard Sum-of-Products(SOP) form: equations are written as an OR of AND terms </li> <li>Standard Product-of-Sums(POS) form: equations are written as an AND of OR terms</li> </ul> <p>SOP and POS are two-level network of gates.</p>"},{"location":"cs/CLDF/lec2/#observations","title":"Observations","text":"<ul> <li>Canonical Forms (Sum-of-minterms, Product-of-Maxterms), or other standard forms (SOP, POS) differ in complexity</li> <li>Boolean algebra can be used to manipulate equations into simpler forms</li> <li>Simpler equations lead to simpler two-level implementations</li> </ul> <p>\u5373\u6211\u4eec\u5f15\u5165Canonical Forms\u662f\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528minterm\u6216maxterm\u8868\u8fbe\u6240\u6709\u903b\u8f91\u51fd\u6570\uff08\u4f7f\u7528index\u7684\u65b9\u5f0f\u4f7f\u8868\u8fbe\u5f0f\u770b\u8d77\u6765\u66f4\u7b80\u6d01\uff09\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5e03\u5c14\u4ee3\u6570\u7684\u5185\u5bb9\u5bf9canonical forms \u6216standord forms \u8fdb\u884c\u5316\u7b80\uff0c\u4f7f\u5f97\u903b\u8f91\u51fd\u6570\u66f4\u4e3a\u7b80\u6d01\uff0c\u51cf\u5c11\u95e8\u7535\u8def\u7684\u7ea7\u6570\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u5f15\u5165\u95e8\u7535\u8def\u4f18\u5316\u7684\u539f\u56e0\u3002</p>"},{"location":"cs/CLDF/lec2/#circuit-optimization","title":"Circuit Optimization","text":"<p>Goal: obtain the simplest implementation for a given function</p> <p>Optimization requires a cost criterion to measure the simplicity of a circuit:</p> <ul> <li>Literal cost</li> <li>Gate input cost</li> <li>Gate input cost with NOTs</li> </ul>"},{"location":"cs/CLDF/lec2/#two-level-optimization","title":"Two-Level Optimization","text":""},{"location":"cs/CLDF/lec2/#literal-cost","title":"Literal Cost","text":"<ul> <li>Literal : a variable or its complement</li> <li>Literal cost : the number of literal appearances in a Boolean expression          corresponding to the logic circuit diagram.</li> </ul>"},{"location":"cs/CLDF/lec2/#gate-input-cost","title":"Gate Input Cost","text":"<ul> <li>the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations.</li> <li>For SOP and POS equations, it can be found from the equation(s) by finding the sum of:<ul> <li>all literal appearances</li> <li>the number of terms excluding single literal terms(G), and optionally, the number of distinct complemented single literals(GN)</li> </ul> </li> </ul> <p>Example: \\(F=BD+A\\overline{B}C+A\\overline{B}\\overline{D}+AB\\overline{C} \\,,L=11,G=L+4=15,GN=G+3=18(only\\,BCD)\\)</p> <p></p> <p>\u77e5\u9053\u4e86\u5982\u4f55\u901a\u8fc7cost \u5224\u65ad\u95e8\u7535\u8def\u7684\u7b80\u6d01\u7a0b\u5ea6\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4f18\u5316\u7535\u8def\uff08\u5373\u5316\u7b80\u8868\u8fbe\u5f0f\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u5316\u7b80\uff0c\u4ec0\u4e48\u65f6\u5019\u5316\u7b80\u7684\u7ed3\u679c\u662f\u6700\u4f18\u7684\uff1f\u8fd9\u5c31\u9700\u8981\u5f15\u5165\u5361\u8bfa\u56fe\u3002</p>"},{"location":"cs/CLDF/lec2/#karnaugh-mapsk-map","title":"Karnaugh Maps(K-map)","text":"<p>A K-map is a collection of squares:</p> <ul> <li>Each square represents a minterm</li> <li>The collection of squares is a graphical  representation of a Boolean function</li> <li>Adjacent squares differ in the value of one variable</li> <li>Alternative algebraic expressions for the same function are derived by recognizing patterns of squares</li> </ul> <p>The K-map can be viewed as:</p> <ul> <li>A reorganized version of the truth table</li> <li>A topologically-warped Venn diagram as used to visualize sets in algebra of sets.</li> </ul>"},{"location":"cs/CLDF/lec2/#two-variable-maps","title":"Two Variable Maps","text":""},{"location":"cs/CLDF/lec2/#three-variable-maps","title":"Three Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u7531\u4e8eK-Map\u7684\u8981\u6c42\uff0c\u76f8\u90bb\u7684\u683c\u5b50\u53ea\u80fd\u5dee\u4e00\u4f4d\uff0c\u6240\u4ee5\u6ce8\u610fMinterm\u7684\u987a\u5e8f0,1,3,2\uff0c4,5,7,6</p> <p>Alternative Map Labeling:</p> <p></p> <p>\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5de6\u56fe\u7684\u6807\u8bc6\u65b9\u6cd5</p> <p>Example: </p> <p></p> <p>Combining Squares</p> <p>By combining squares, we reduce number of literals in a product term, reducing the literal cost, thereby reducing the other two cost criteria.</p> <p>\u6ce8\u610f\u53ea\u80fd\u753b\\(2^n\\)\u5927\u5c0f\u7684squares</p> <p>On a 3-variable K-Map:</p> <ul> <li>One square represents a minterm with three variables</li> <li>Two adjacent squares represent a product term with two variables</li> <li>Four \u201cadjacent\u201d terms represent a product term with one variable</li> <li>Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1.</li> </ul> <p>Example:</p> <p></p> <ul> <li>Reduced literal product terms for SOP standard forms correspond to rectangles on K-maps containing cell counts that are powers of 2. </li> <li>Topological warps of 3-variable K-maps that show all adjacencies:(\u5373\u53ef\u4ee5\u628a\u56fe\u5377\u8d77\u6765\uff0c\u4e24\u4e2a\u8fb9\u8fb9\u5982\u679c\u90fd\u662f1\u4e5f\u53ef\u5708\u5708)</li> </ul> <p></p> <p>\u5316\u7b80\u601d\u8def\uff1a\u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9)</p> <p></p>"},{"location":"cs/CLDF/lec2/#four-variable-maps","title":"Four Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u987a\u5e8f\u548c\u4f4d\u7f6e\uff01</p> <p>and \u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5708\uff080\uff0c2\uff0c8\uff0c10\uff09</p>"},{"location":"cs/CLDF/lec2/#dont-cares-in-k-maps","title":"Don't Cares in K-Maps","text":"<p>Sometimes  a function table or map contains entries for which it is known:</p> <ul> <li>the input values for the minterm will never occur</li> <li>the output value for the minterm is not used</li> </ul> <p>In these cases the output value is defined as a \u201cdon't care\u201d, By placing \u201cdon't cares\u201d ( an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered.</p> <p>Example :  A logic function having the binary codes for the BCD digits as its inputs. Only the codes for 0 through 9 are used.  The six codes, 1010 through 1111 never occur, so the output values for these codes are \u201cx\u201d to represent \u201cdon\u2019t cares.\u201d</p> <p></p> <p>\u5bf9\u4e8e\u65e0\u5173\u9879\uff0c\u5708\u4e0e\u4e0d\u5708\u53d6\u51b3\u4e8e\u600e\u6837\u624d\u80fd\u628a\u5361\u8bfa\u56fe\u5316\u4e3a\u6700\u7b80\u3002</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u66f4\u719f\u6089minterm, \u6240\u4ee5\u8003\u8651\u5148\u5f97\u5230SOP\u540e\u53d6\u53cd\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u6b64\u65f6\u5708\u5f97\u662f\u7a7a\u683c\u800c\u975e1\uff01</p>"},{"location":"cs/CLDF/lec2/#systematic-simplification","title":"Systematic Simplification","text":"<ul> <li>A Prime Implicant is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.</li> <li>A prime implicant is called an Essential Prime Implicant if it is the only prime implicant that covers (includes) one or more minterms.</li> </ul> <p>\u5373\u5982\u679c\u67d0\u4e2a \"1\" \u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\uff08\u8fd9\u4e2a\u5708\u5708\u4e00\u5b9a\u6709\uff09</p> <p></p> <p>Example:</p> <p></p> <p>Prime Implicants are AB, B C' D', A' C' D', A' B' D', A' B' C, A' C D, B C D. only AB is essential.</p>"},{"location":"cs/CLDF/lec2/#optimization-algorithmsummary","title":"Optimization Algorithm(Summary)","text":"<ul> <li>Find all prime implicants.</li> <li>Include all essential prime implicants in the solution</li> <li>Select a minimum cost set of non-essential prime implicants to cover all minterms not yet covered</li> <li>Selection Rule: Minimize the overlap among prime implicants as much as possible. In particular, in the final solution, make sure that each prime implicant selected includes at least one minterm not included in any other prime implicant selected.</li> </ul>"},{"location":"cs/CLDF/lec2/#multi-level-circuit-optimization","title":"Multi-Level Circuit Optimization","text":"<p>\u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46\u6210\u672c\u9ad8\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u8981\u6c42\u975e\u5e38\u4f4e\u7684\u5ef6\u8fdf\uff0c\u5c31\u8003\u8651\u4f7f\u7528\u903b\u8f91\u51fd\u6570\u5c06\u8868\u8fbe\u5f0f\u5316\u7b80\uff0c\u5c06\u4e24\u7ea7\u95e8\u8f6c\u53d8\u4e3a\u591a\u7ea7\u7535\u8def\u3002</p>"},{"location":"cs/CLDF/lec2/#additional-gates-and-circuits","title":"Additional Gates and Circuits","text":""},{"location":"cs/CLDF/lec2/#integrated-circuits","title":"Integrated Circuits","text":"<p>Integrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.</p> <p>Terminology-Levels of chip integration\uff08\u7528\u95e8\u4e2a\u6570\u8861\u91cf\u89c4\u6a21\uff09</p> <ul> <li>SSI(small-scale integrated)-fewer than 10 gates</li> <li>MSI(medium-scale integrated)-10 to 100 gates</li> <li>LSI (large-scale integrated) - 100 to thousands of gates</li> <li>VLSI(very-large-scale-integrated)-thousands to 100s of millions of gates</li> </ul> <p>Technology Parameters</p>"},{"location":"cs/CLDF/lec2/#fan-in","title":"Fan-in(\u6247\u5165\u7cfb\u6570)","text":"<p>the number of inputs available on a gate,\u5373\u4e00\u4e2a\u95e8\u8f93\u5165\u7aef\u7684\u4e0a\u9650</p>"},{"location":"cs/CLDF/lec2/#fan-out","title":"Fan-out(\u6247\u51fa\u7cfb\u6570)","text":"<p>the number of standard loads driven by a gate output</p>"},{"location":"cs/CLDF/lec2/#cost","title":"Cost","text":"<p>The cost of a gate is proportional to the chip area occupied by the gate, the gate area is roughly proportional to the number and size of transistors and the amount of wiring connecting them, ignoring the wiring area, the gate area is roughly proportional to the gate input count, so gate input count can be a rough measure of gate cost.</p>"},{"location":"cs/CLDF/lec2/#propagation-delay","title":"Propagation Delay","text":"<p>the time for a change on an input of a gate to propagate to the output. - Delay is usually measured at the 50% point with respect to the H and L output voltage levels.\uff08\u8f93\u5165\u7535\u538b\u6539\u53d8\u7684\u4e2d\u70b9\u5230\u8f93\u51fa\u7535\u538b\u6539\u53d8\u7684\u4e2d\u70b9\uff09 - High-to-low(\\(t_{PHL}\\)) and low-to-high(\\(t_{PLH}\\)) output signal changes may have different propagation delays.(\u6ce8\u610f\u662f\u8f93\u51fa\u7aef\uff01\uff01) - \u5b9a\u4e49\u4f20\u8f93\u5ef6\u8fdf\\(t_{pd}=\\frac{t_{PHL}+t_{PLH}}{2}\\)</p> <p></p> <p>Delay Mode - Transport delay: a change in the output in response to a change on the inputs occurs after a fixed specified delay - Inertial delay - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time, the output changes do not occur.(\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\u4f1a\u88ab\u6d88\u9664\u6389)</p> <p></p> <p>\u5728inertial delay\u4e2d\uff0cab,de\u8109\u51b2\u53d8\u5316\u65f6\u95f4\u5c0f\u4e8erejection time\uff0c\u56e0\u6b64\u4e0d\u4f1a\u53d1\u751f</p> <p>Circuit Delay \u5728\u95e8\u4e0a\u6807\u6570\u5b57\u8868\u793a\u8be5\u95e8\u7684\u4f20\u8f93\u5ef6\u8fdf\u65f6\u95f4</p> <p></p> <ul> <li>\u6700\u5f00\u59cbS\u4ece0\u53d8\u4e3a1\uff0c0.9s\u540eY\u4ece0\u53d8\u4e3a1</li> <li>\u5f53S\u4ece1\u53d8\u4e3a0\uff0c\u4e0a\u9762\u7684\u95e80.6s\u540e\u53d8\u4e3a1\uff0c\u4e0b\u9762\u7684\u95e80.4s\u540e\u53d8\u4e3a0\uff0c\u65450.9s\u540eY\u5148\u53d8\u4e3a0\uff0c\u518d\u8fc70.2s\u53d8\u4e3a1(\u7531\u4e8e\u4e24\u6761\u4f20\u8f93\u8def\u5f84\u5bfc\u81f4\u5728\u6ce2\u5f62\u56fe\u4e2d\u51fa\u73b0\u5c16\u5cf0\uff0c\u79f0\u4e4b\u4e3a\u7535\u8def\u7684\u7ade\u4e89\u4e0e\u5192\u9669)</li> </ul> <p>Fan-out and Delay The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay SL(Standard Load): \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5373\u5e26\u52a8\u4e00\u4e2a\u975e\u95e8\u9700\u8981\u591a\u5c11\u7684\u8d1f\u8f7d</p>"},{"location":"cs/CLDF/lec2/#costperformance-tradeoffs","title":"Cost/Performance Tradeoffs","text":""},{"location":"cs/CLDF/lec2/#other-gate-types","title":"Other Gate Types","text":"<p>Gate classifications</p> <ul> <li>Primitive gate: a gate that can be described using a single primitive operation type (AND or OR) plus an optional inversion(s).</li> <li>Complex gate - a gate that requires more than one primitive operation type for its description</li> </ul>"},{"location":"cs/CLDF/lec2/#buffer","title":"Buffer","text":"<ul> <li>A buffer is a gate with the function \\(F=X\\)</li> <li>In terms of Boolean function, a buffer is the same as a connection!</li> <li>The reason we use it: A buffer is an electronic amplifier used to improve circuit voltage levels and increase the speed of circuit operation(\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf).</li> </ul>"},{"location":"cs/CLDF/lec2/#nand-gate","title":"NAND Gate","text":"<p>Applying DeMorgan's Law gives Invert-OR(NAND)</p> <p></p> <ul> <li>AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier.</li> <li>A NAND gate with one input degenerates to an inverter.</li> </ul>"},{"location":"cs/CLDF/lec2/#nor-gate","title":"NOR Gate","text":"<p>Applying DeMorgan's Law gives Invert-AND(NOR)</p> <p></p> <ul> <li>OR-Invert and Invert-AND both represent the NOR gate. Having both makes visualization of circuit function easier.</li> <li>A NOR gate with one input degenerates to an inverter.</li> </ul> <p></p> <ul> <li> <p>The NOR gate and the NAND gate is a natural implementation for some technologies other than CMOS in terms of chip area and speed.</p> </li> <li> <p>They are universal gate-a gate type that can implement any Boolean function.</p> </li> <li>They usually doesn't have a operation symbol defined(\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4e0d\u65b9\u4fbf\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4e0e\u6216\u975e\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\uff0c\u6700\u540e\u7535\u8def\u5b9e\u73b0\u65f6\u8f6c\u5316\u4e3a\u4e0e\u975e\u548c\u6216\u975e\u95e8)</li> </ul>"},{"location":"cs/CLDF/lec2/#exclusive-orexclusive-nor","title":"Exclusive OR/Exclusive NOR","text":"<p>Uses for the XOR and XNORs gate include:</p> <ul> <li>Adders/subtractors/multipliers</li> <li>Counters/incrementers/decrementers</li> <li>Parity generators/checkers</li> </ul> <p>Definitions</p> <p></p> <ul> <li>XOR function: \\(X\\oplus Y=X\\overline{Y}+\\overline{X}Y\\) (X or Y, but not both)</li> <li>XNOR function(known as equivalence): \\(\\overline{X\\oplus Y}=XY+\\overline{X}\\overline{Y}\\)</li> <li>XOR and XNOR gates do no exist for more than two inputs. Instead, they are replaced by odd and even functions. </li> </ul> <p></p> <p>Implementations</p> <p></p>"},{"location":"cs/CLDF/lec2/#odd-and-even-functions","title":"Odd and Even Functions","text":"<p>The XOR function can be extended to 3 or more variables. For more than 2 variables, it is called an odd function or modulo 2 sum (Mod 2 sum), not an XOR\uff0cthe complement of the odd function is the even function.</p> <ul> <li>The odd and even functions on a K-map form \u201ccheckerboard\u201d patterns.\uff08\u9ed1\u767d\u68cb\u76d8\u7684\u6837\u5b50\uff09</li> <li>The 1s of an odd function correspond to minterms having an index with an odd number of 1s.</li> <li>The 1s of an even function correspond to minterms having an index with an even number of 1s</li> </ul> <p>Implementation</p> <p></p> <p>Recall: Parity Generators and Checkers</p> <p></p> <p>\u5bf9\u7b2c\u4e00\u7ae0\u4ecb\u7ecd\u7684\u5947\u5076\u6821\u9a8c\u7801\u7684\u673a\u7406\u6709\u4e86\u5f88\u597d\u7684\u89e3\u91ca\uff1a \u5047\u8bbeX,Y,Z\u5206\u522b\u4e3a0,0,1. \u56e0\u6b64\u6211\u4eec\u901a\u8fc7\\(P=X\\oplus Y\\oplus Z\\)\u6784\u9020\u51fa\u5076\u6821\u9a8c\u7801(X,Y,Z,P\u4e2d\u67091\u7684\u4e2a\u6570\u4e3a\u5076\u6570)\uff0c\u56e0\u6b64\\(E=X\\oplus Y\\oplus Z\\oplus P\\)\u5e94\u8be5\u4e3a\\(0\\), \u82e5E\u8f93\u51fa\u4e3a1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u4f20\u8f93\u4e2d\u67d0\u4e00\u4f4d\u51fa\u73b0\u4e86\u9519\u8bef\u3002</p> <p></p>"},{"location":"cs/CLDF/lec2/#hi-impedance-outputs","title":"Hi -Impedance Outputs","text":"<p>Logic gates introduced thus far\uff1a</p> <ul> <li>have 1 and 0 output values</li> <li>cannot have their outputs connected together</li> <li>transmit signals on connections in only one direction</li> </ul> <p>Three-state logic adds a third logic value, Hi-Impedance (Hi-Z), giving three states: 0, 1, and Hi-Z on the outputs.</p> <p>Hi-Z:</p> <ul> <li>The Hi-Z value behaves as an open circuit, which means the output appeas to be disconnected</li> <li>It is as if a switch between the internal circuitry and the output has been opened.</li> </ul> <p>3-state buffer</p> <p></p> <p><code>IN</code>: the data input, <code>EN</code>: the control input</p> <ul> <li>For <code>EN = 0</code>, regardless of the value on <code>IN</code> (denoted by X), the output value is Hi-Z.</li> <li>For <code>EN = 1</code>, the output value follows the input value.</li> </ul> <p>\u5f53\u6211\u4eec\u60f3\u628a\u591a\u4e2a\u95e8\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u65f6\uff0c\u5e94\u8be5\u4fdd\u8bc1\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u95e8\u5177\u6709\u6709\u6548\u8f93\u51fa\uff08\u4e0d\u7136\u4f1a\u70e7\u574f\u7535\u8def\uff09</p> <p>3-State Logic Circuit</p> <p></p> <p>\u8be5\u4e09\u6001\u903b\u8f91\u95e8\u7684<code>EN0</code>\u548c<code>EN1</code>\u5c31\u4e0d\u4f1a\u540c\u65f6\u4f7f\u80fd</p>"},{"location":"cs/CLDF/lec3/","title":"Lec 3 : Combinational Logic Design","text":"<p> \u7ea6 3277 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 11 \u5206\u949f</p>"},{"location":"cs/CLDF/lec3/#implementation-technology-and-logic-design","title":"Implementation Technology and Logic Design","text":""},{"location":"cs/CLDF/lec3/#combinational-circuits","title":"Combinational Circuits","text":"<p>A combinational logic circuit has:</p> <ul> <li>A set of \\(m\\) Boolean inputs</li> <li>A set of \\(n\\) Boolean outputs</li> <li>\\(n\\) switching functions, each mapping the \\(2^m\\) input combinations to an output such that the current output depends only on the current input values</li> </ul> <p></p>"},{"location":"cs/CLDF/lec3/#hierarchical-design","title":"Hierarchical Design","text":"<p>To control the complexity of the function mapping inputs to outputs:</p> <ul> <li>Decompose the function into smaller pieces called blocks</li> <li>Decompose each block`s function into smaller blocks, repeating as necessary until all blocks are small enough</li> <li>Any block not decomposed is called a primitive block</li> <li>The collection of all blocks including the decomposed ones is a hierarchy</li> </ul> <p>Reusable Functions</p> <p>\u5c31\u7c7b\u4f3cC or python\u8bed\u8a00\u4e2d\u7684\u5e93\uff0c\u63d0\u524d\u8bbe\u8ba1\u597d\uff0c\u9700\u8981\u7684\u65f6\u5019\u76f4\u63a5\u62ff\u6765\u7528</p> <p>Whenever possible, we try to decompose a complex design into common, reusable function blocks, which are verified and well-documented, and placed in libraries for future use.</p> <p>Top-Down versus Bottom-Up</p> <ul> <li>A top-down design proceed from an abstract, high-level specification to a more and more detailed design by decomposition and successive refinement</li> <li>A bottom-up design starts with detailed primitive blocks and combines them into larger and more complex functional blocks</li> <li>Design usually proceeds top-down to known building blocks ranging from complete CPUs to primitive logic gates or electronic components.</li> </ul>"},{"location":"cs/CLDF/lec3/#design-procedure","title":"Design Procedure","text":"<ol> <li>Specification: write a specification for the circuit if one is not already available</li> <li>Formulation: Derive a truth table or initial Boolean equations that define the required relationships between the inputs and outputs, if not in the specification and apply hierarchical design if appropriate</li> <li>Optimization: Apply 2-level and multiple-level optimization, and draw a logic diagram or provide a netlist for the resulting circuit using ANDs, ORs, and inverters</li> <li>Technology Mapping: Map the logic diagram or netlist to the implementation technology selected\uff08\u5373\u5c06\u4e0e\u6216\u95e8\u6620\u5c04\u4e3a\u5b9e\u9645\u7535\u8def\u4e2d\u7684\u4e0e\u975e\uff0c\u6216\u975e\u95e8\uff09</li> <li>Verification\uff1aVerify the correctness of the final design manually or using simulation \u3002</li> </ol> BCD to Excess-3 code converter <ol> <li>Specification: - Transforms BCD code  for the decimal digits to Excess-3 code for the decimal digits.</li> </ol> <ul> <li> <p>BCD code words for digits 0 through 9: 4-bit patterns 0000 to 1001, respectively</p> </li> <li> <p>Don't Cares BCD 1010 to 1111</p> </li> <li> <p>Excess-3 code words for digits 0 through 9: 4-bit patterns consisting of 3 (binary 0011) added to each BCD code word</p> </li> <li> <p>Implementation: </p> <ul> <li> <p>multiple-level circuit</p> </li> <li> <p>NAND gates(including inverters)</p> </li> </ul> </li> </ul> <ol> <li>Formulation</li> </ol> <ul> <li>Conversion of 4-bit codes can be most easily formulated by a truth table</li> </ul> <p></p> <p>3.Optimization</p> <p>W,X,Y,Z\u56db\u4e2a\u8f93\u51fa\u9700\u8981\u56db\u4e2a\u903b\u8f91\u51fd\u6570\u8fdb\u884c\u5316\u7b80\uff0c\u6240\u4ee5\u6709\u56db\u4e2a\u5361\u8bfa\u56fe\uff0c\u5bf9\u5e94\u7684\u8f93\u5165\u4e3aABCD  </p> <p>\u4e3a\u4ec0\u4e48\u8981\u7b97\u4e0a\\(\\overline{T_1}\\)\u7684\u6210\u672c\u5462\uff1f\u6211\u4eec\u8bf4\\(G\\)\u4e0d\u8ba1\u7b97\u975e\u95e8\u6210\u672c\u662f\u56e0\u4e3aABCD\u662f\u5916\u90e8\u8f93\u5165\u7684\uff0c\u5b83\u4eec\u7684\u975e\u6709\u53ef\u80fd\u662f\u524d\u7ea7\u7535\u8def\u63d0\u4f9b\u7684\uff0c\u4f46\u662f\\(T_1\\)\u662f\u6211\u4eec\u5185\u90e8\u4ea7\u751f\u7684\u975e\u95e8\uff0c\u5fc5\u987b\u8981\u8ba1\u7b97\u5728\\(G\\)\u4e2d</p> <p>4.Technology Mapping - Mapping with a library containing inverters and 2-input NAND, 2-input NOR, and 2-2 AOI gates</p> <p></p> <p>\u5373\u5168\u90e8\u7528\u4e0e\u975e\uff0c\u6216\u975e\u95e8\u6765\u5b9e\u73b0</p> <p>5.Verification</p>"},{"location":"cs/CLDF/lec3/#chip-design-styles","title":"Chip Design Styles","text":"<ul> <li>Full custom: the entire design of the chip down to the smallest detail of the layout is performed</li> <li>Standord cell: blocks have been design ahead of time or as part of previous designs(\u6807\u51c6\u5e93)\uff0c\u6709\u65f6\u4f1a\u4ea7\u751f\u5197\u4f59\u4ee3\u7801</li> <li>Gate array: \u9884\u5148\u8bbe\u8ba1\u597d\u53ef\u7f16\u7a0b\u5355\u5143\uff0c\u5373\u4e70\u4e86\u73b0\u6210\u82af\u7247\uff0c\u5728\u91cc\u9762\u5199\u4ee3\u7801\u5373\u53ef\u6267\u884c\uff0c\u6210\u672c\u6700\u4f4e\u3002</li> </ul> <p>Cell Libraries - a pre-designed primitive block - cell library: a collection of cells available for design using a particular implementation technology - cell characterization: a detailed specification of a cell for use by a designer-often based on actual cell design and fabrication and measured values (schematic, area of cell, input loding,delays,technology mapping,hardware description language models\u2026\u2026)</p> <p>Example</p> <p></p>"},{"location":"cs/CLDF/lec3/#mapping-to-nandnor-gates","title":"Mapping to NAND/NOR gates","text":"<p>\u53ea\u7528NAND\u548cNOR\u505atechnology mapping</p> <p>1.Replace ANDs and ORs: \\(AB=\\overline{\\overline{AB}}\\)</p> <p>\u5373\u4e0e\u95e8\u7b49\u4e8e\u4e0e\u975e+\u975e,\u6216\u95e8\u540c\u7406</p> <p></p> <p>2.Pushing inverters through circuit fan-out points:</p> <p></p>"},{"location":"cs/CLDF/lec3/#verification","title":"Verification","text":"<p>Basic Verfication Methods: - Manual Logic Analysis - Simulation</p> <p></p>"},{"location":"cs/CLDF/lec3/#combinational-logic","title":"Combinational Logic","text":""},{"location":"cs/CLDF/lec3/#functions-and-functional-blocks","title":"Functions and Functional Blocks","text":"<p>Corresponding to each of the functions is a combinational circuit implementation called a functional block.</p>"},{"location":"cs/CLDF/lec3/#rudimentary-logic-functions","title":"Rudimentary Logic Functions","text":"<ul> <li>Functions of a single variable \\(X\\)</li> </ul>"},{"location":"cs/CLDF/lec3/#multiple-bit-rudimentary-functions","title":"Multiple-bit Rudimentary Functions","text":"<ul> <li>A wide line is used to represent a bus which is a vector signal, as \\(F=(F_3,F_2,F_1,F_0)\\) shown in (b)</li> <li>The bus can be split into individual bits as shown in (b)</li> <li>Sets of bits can be split from the bus as shown in (c) for bits 2 and 1 of \\(F\\)</li> <li>The sets of bits need not be continuous as shown in (d)</li> </ul>"},{"location":"cs/CLDF/lec3/#enabling-function","title":"Enabling Function","text":"<ul> <li>Enabling permits an input signal to pass through to an output</li> <li>Disabling blocks an input signal from passing through to an output, replacing it with a fixed value</li> <li>The value on the output when it is disable can be Hi-Z (as for three-state buffers and transmission gates), 0 , or 1</li> </ul>"},{"location":"cs/CLDF/lec3/#decoding","title":"Decoding","text":"<p>(\u4e24\u79cd\u4e0d\u540c\u7f16\u7801\u4e4b\u95f4\u7684\u8f6c\u5316\uff0c\u8f93\u5165\u5c11\uff0c\u8f93\u51fa\u591a)</p> <ul> <li>Decoding: the conversion of an \\(n\\)-bit input code to an \\(m\\)-bit output code with \\(n\\le m\\le 2^n\\) such that each valid code word produces a unique output code</li> <li>Circuits that perform decoding are called decoders</li> <li>So the functional blocks for decoding are called \\(n-to-m\\) line decoders, where \\(m\\le 2^n\\), and generate \\(2^n\\)(or fewer) minterms for the \\(n\\) input variables</li> </ul> <p>Example</p> <p></p> <p>\u6bcf\u4e00\u4f4d\u8f93\u51fa\u5f15\u811a\u5bf9\u5e94\u4e00\u4e2a\u6700\u5c0f\u9879\u8f93\u51fa</p> <p>\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\uff0c\\(n-2^n\\)\u8bd1\u7801\u5668\uff0c\u6bcf\u4e2a\u8f93\u51fa\u90fd\u8fde\u4e00\u4e2a\\(n\\)\u8f93\u5165\u4e0e\u95e8,\u603b\u5171\u6210\u672c\u4e3a\\(n2^n\\)\u3002\u6210\u672c\u592a\u9ad8\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u964d\u4f4e\u6210\u672c</p>"},{"location":"cs/CLDF/lec3/#decoder-expansion","title":"Decoder Expansion","text":"<p>\u884c\u5217\u8bd1\u7801\u5668: \u5c06n\u8f93\u5165\u62c6\u6210\u4e24\u534a\uff0c\u4e00\u7ec4\\(\\frac{n}{2}\\)\u4f5c\u4e3a\u884c\uff0c\u53e6\u4e00\u7ec4\u4f5c\u4e3a\u5217\uff0c\u884c\u4e0e\u5217\u7684\u4ea4\u70b9\u518d\u7528\u4e00\u4e2a1-2\u8bd1\u7801\u5668</p> 3-to-8 line decoder <p></p> <p>\u5206\u4e3a\u4e00\u4e2a2-4\u8bd1\u7801\u5668\u4e0e\u4e00\u4e2a1-2\u8bd1\u7801\u5668\uff0c\u6700\u540e\u75288\u4e2a2\u8f93\u5165\u4e0e\u95e8\uff0c\u4e24\u4e24\u4e00\u4e0e\u5373\u5f97\u5230\u7ed3\u679c\u3002</p> <p>\u6210\u672c: \\(2^n\\)\u4e2a\u4e24\u8f93\u5165\u4e0e\u95e8,\u800c\u4e2d\u95f4\u7684\u6210\u672c\u76f8\u6bd4\u4e0e\u95e8\u8981\u5c0f\u5f97\u591a.</p> <p>\u4f46\u662f\u6027\u80fd\u6709\u6240\u964d\u4f4e.</p>"},{"location":"cs/CLDF/lec3/#decoder-with-enable","title":"Decoder with Enable","text":"<p>\u589e\u52a0\u4e00\u4e2a\u4e0e\u95e8</p> <p></p> <p>\u6362\u4e2a\u89d2\u5ea6\u7406\u89e3,\u53ef\u4ee5\u5c06\u8bd1\u7801\u5668\u4f5c\u4e3a\u4f7f\u80fd\u4fe1\u53f7(\u4e0d\u540c\u8f93\u5165\u7ec4\u5408\u53ea\u6709\u4e00\u6839\u7ebf\u4e3a1\uff0c\u6700\u7ec8\u7ed3\u679c\u5219\u53d6\u51b3\u4e8eEN\u4fe1\u53f7\uff0c\u800c\u5176\u5b83\u95e8\u88ab\u7981\u6b62)\uff0c\u770b\u4f5c\u662f\u4e00\u4e2a\u5206\u914d\u7684\u7535\u8def(demultiplexer)</p>"},{"location":"cs/CLDF/lec3/#combinational-logic-implementation-decoder-and-or-gates","title":"Combinational Logic Implementation-Decoder and OR Gates","text":"<p>\u4e4b\u524d\u63d0\u5230\u4efb\u4f55\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u4e3a\u6700\u5c0f\u9879\u7684\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u8bd1\u7801\u5668\u6765\u5b9e\u73b0\u4efb\u4f55\u4e00\u4e2a\u903b\u8f91\u51fd\u6570</p> <p>Implement \\(m\\) functions of \\(n\\) variables with: - Sum-of-minterms expressions - One \\(n-to-2^n-line\\) decoder - \\(m\\) OR gates, one for each output</p> <p>Example</p> <p></p> BCD-to-Segment Decoder <p></p> <p>\u6ce8\u610f\u4e03\u6bb5\u6570\u7801\u7ba1\u5b57\u6bcd\u7684\u6392\u5217\u987a\u5e8f</p> <p>\u6807\u51c6\u7684\u4e03\u6bb5\u6570\u7801\u7ba1\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2dh\u63a7\u5236\u5c0f\u6570\u70b9\uff0c\u53e6\u5916\u4e24\u4e2aCom.\u51b3\u5b9a\u8be5\u6570\u7801\u7ba1\u662f\u5171\u9634\u63a7\u5236\u8fd8\u662f\u5171\u9633\u63a7\u5236\uff0c\u5171\u9633\u63a7\u5236\u65f6\u8f93\u5165\u4e3a0\u624d\u80fd\u4eae</p> <p></p>"},{"location":"cs/CLDF/lec3/#encoding","title":"Encoding","text":"<ul> <li>the conversion of an m-bit input code to a n-bit output code with \\(n\\le m\\le 2^n\\) such that each valid code produces a unique output code</li> <li>An encoder has \\(2^n\\)(or fewer) input lines and \\(n\\) output lines which generate the binary code corresponding to the input values</li> </ul> decimal-to-BCD encoder <ul> <li> <p>Inputs:  10 bits corresponding to decimal digits 0 through 9, \\((D_0,\\cdots,D_9)\\)</p> </li> <li> <p>Outputs: 4 bits with BCD codes</p> </li> <li> <p>Function: If input bit \\(D_i\\) is a 1, the the ouput \\((A_3,A_2,A_1,A_0)\\) is the BCD code for \\(i\\)</p> </li> </ul> <p></p> <p>\u4f46\u662f\u5f53\u8f93\u5165\u4fe1\u53f7\u6709\u591a\u4e2a1\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u65e0\u6548\u7f16\u7801</p>"},{"location":"cs/CLDF/lec3/#priority-encoder","title":"Priority Encoder","text":"<p>Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with  the corresponding binary code for that position.</p> <p>Example</p> <p></p>"},{"location":"cs/CLDF/lec3/#selecting","title":"Selecting","text":"<ul> <li>A set of information inputs from which the selection is made</li> <li>A single output</li> <li>A set of control lines for making the selection</li> </ul> <p>Logic circuits that perform selcting are called multiplexers</p> <ul> <li>A multiplexer selects information from an input line and directs the information to an output line</li> <li>A typical multiplexer has \\(n\\) control inputs \\((S_{n-1},\\cdots,S_0)\\) called selection inputs, \\(2^n\\) information inputs \\((I_{2^n-1},\\cdots,I_0)\\) and one output Y</li> <li>could be designed to have \\(m\\le 2^n\\) information inputs as well</li> </ul> <p>2-to-1-Line Multiplexer</p> <p></p> <p>\u6574\u4f53\u7ed3\u6784\u5373\u4e3a\u4e00\u4e2a1-2\u8bd1\u7801\u5668\u52a0\u4e0a\u4e00\u4e2a\u4e0e\u6216\u7ed3\u6784</p> <p>In general, for an \\(2^n\\)-to-1-line multiplexer: - \\(n-to-2^n\\)-line decoder - \\(2^n\\times 2\\) AND-OR</p> <p>4-to-1-line Multiplexer</p> <p></p> <p>In practice, we select \"vectors of bits\" instead of \"bits\"</p> <p>Example</p> <p></p> <p>\u6bcf\u4e00\u4f4d\u8981\u9009\u62e9\u7684\u4fe1\u53f7\u90fd\u662fvector,\u5305\u542b\u56db\u4e2a\u4fe1\u53f7,\u8bd1\u7801\u5668\u53ef\u4ee5\u5171\u7528</p>"},{"location":"cs/CLDF/lec3/#other-selection-implementation","title":"Other Selection Implementation","text":"<p>\u4f7f\u7528\u4e09\u6001\u95e8</p> <p>Example</p> <p></p> <p>\u7531\u4e8e\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u662f1\uff0c\u6240\u4ee5\u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u80fd\u88ab\u4f7f\u80fd</p> <p>\u6210\u672c\u964d\u4f4e(\u7701\u6389\u4e86\u6216\u95e8)</p> <p>\u5206\u5c42\u9009\u62e9</p> <p></p> <p>\\(S_0\\)\u8fdb\u884c\u7b2c\u4e00\u5c42\u9009\u62e9\uff0c\\(S_1\\)\u8fdb\u884c\u7b2c\u4e8c\u5c42</p>"},{"location":"cs/CLDF/lec3/#combinational-logic-implementation","title":"Combinational Logic Implementation","text":"<p>1.Implement \\(m\\) functions of \\(n\\) variables</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\\(n\\)\u53d8\u91cf\u7684\u903b\u8f91\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u771f\u503c\u8868,\u5229\u7528\u9009\u62e9\u5668\u5bf9\u6bcf\u4e2a\\(n\\)\u8f93\u5165\u9009\u62e9\u5bf9\u5e94\u7684\u771f\u503c\u8868\u7684\u67d0\u4e00\u884c,\u8f93\u51fa\u7ed3\u679c.</p> <p>Gray to Binary Code</p> <ul> <li> <p>connecting A, B, and C to the multiplexer select inputs</p> </li> <li> <p>placing y and z on the two multiplexer outputs</p> </li> <li> <p>connecting their respective truth table values to the inputs</p> </li> </ul> <p></p> <p>2.Implement any \\(m\\) functions of \\(n+1\\) variables</p> <p>For each pair and output, define a rudimentary function of the final variable \\((0,1,X,\\overline{X})\\)</p> <p>\u6bd4\u5982\u8bf4\\(F(A,B,C)\\),\u5f53\\(A,B\\)\u786e\u5b9a\u65f6\uff0c\u6700\u540e\u8f93\u51fa\u53ea\u53ef\u80fd\u4e3a \\(1,0,C,\\overline{C}\\)</p> <p>Example</p> <p></p> <p></p> <p>\u5373\u6211\u4eec\u4f7f\u7528\u5c0f\u4e00\u534a\u7684\u9009\u62e9\u5668\u6765\u5b9e\u73b0.</p>"},{"location":"cs/CLDF/lec3/#arithmetic-functions","title":"Arithmetic Functions","text":""},{"location":"cs/CLDF/lec3/#iterative-combinational-circuits","title":"Iterative combinational circuits","text":"<p>\u76f4\u63a5\u4f7f\u7528\u771f\u503c\u8868\u4ee5\u53ca\u5361\u8bfa\u56fe\u5316\u7b80\u7684\u65b9\u5f0f\u8fdb\u884c\u5b9e\u9645\u7535\u8def\u8bbe\u8ba1\u662f\u4e0d\u53ef\u884c\u7684 \u6240\u4ee5\u6211\u4eec\u9700\u8981iterative combinational circuits(\u8fed\u4ee3\u9635\u5217) \u5c06\u8ba1\u7b97\u673a\u91cc\u7684\u591a\u4f4d\u903b\u8f91\u64cd\u4f5c\u5206\u89e3\u6210\u4e00\u4e2a\u4e2a\u5355\u4f4d\u64cd\u4f5c\u7684\u7ec4\u5408\u3002</p>"},{"location":"cs/CLDF/lec3/#binary-adders","title":"Binary adders","text":"<p>Half adder</p> <p></p> <p>Logic Simplification:</p> <p>\\(S=X\\oplus Y,C=XY\\)</p> <p></p> <p>\u5f02\u6216\u53ef\u4ee5\u5206\u89e3\u6210\u56db\u4e2a\u4e0e\u975e\uff0c\u8981\u654f\u611f</p>"},{"location":"cs/CLDF/lec3/#full-adder","title":"Full Adder","text":"<p>\u4e0e\u534a\u52a0\u5668\u4e0d\u540c\u7684\u662f\uff0c\u5168\u52a0\u5668\u5305\u542b\u4e86\u4e00\u4e2a\u8fdb\u4f4d(carry-in bit from lower stages)</p> <p></p> <p>\\(S=X\\oplus Y\\oplus Z\\)(\u8fd9\u662f\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4ecb\u7ecd\u7684\u5947\u51fd\u6570)</p> <p>The Carry bit C is 1 if both X and Y are 1 (the sum is 2), or if the sum is 1 and a carry-in (Z) occurs.   Thus C can be re-written as:</p> <p>\\(C=XY+(X\\oplus Y)Z\\)</p> <ul> <li>The term \\(X\\cdot Y\\) is carry generate(\u8fdb\u4f4d\u4ea7\u751f\u4fe1\u53f7)</li> <li>The term \\(X\\oplus Y\\) is carry propagate(\u8fdb\u4f4d\u4f20\u64ad\u4fe1\u53f7)</li> </ul>"},{"location":"cs/CLDF/lec3/#implementation","title":"Implementation","text":""},{"location":"cs/CLDF/lec3/#binary-adders_1","title":"Binary Adders","text":"<p>\u6839\u636e\u7b97\u672f\u7684\u57fa\u672c\u539f\u5219\uff0c\u6700\u57fa\u672c\u7684\u60f3\u6cd5\u5c31\u662f\u5c06\u5168\u52a0\u5668\u4e32\u8d77\u6765</p> <p></p> <p>\u4f46\u662f\u8fd9\u4e2a\u7535\u8def\u7684\u7f3a\u70b9\u5c31\u662f\u968f\u7740\u52a0\u6cd5\u5668\u4f4d\u6570\u7684\u589e\u52a0\uff0c\u8fdb\u4f4d\u4f20\u9012\u8fc7\u7a0b\u592a\u957f\uff0c\u4f20\u8f93\u5ef6\u8fdf\u8d8a\u6765\u8d8a\u9ad8\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p>"},{"location":"cs/CLDF/lec3/#carry-lookahead","title":"Carry Lookahead","text":"<p>\u7535\u8def\u6162\u7684\u539f\u56e0\u5c31\u5728\u4e8e\u8fdb\u4f4d\u4f20\u9012\u7684\u8fc7\u7a0b, \u56e0\u6b64\u601d\u8003\u80fd\u4e0d\u80fd\u4f7f\u5f53\u524d\u7684\u8fdb\u4f4d\\(C_n\\)\u4e0d\u4f9d\u8d56\u4e8e\\(C_{n-1}\\),\u800c\u662f\u76f4\u63a5\u4f9d\u8d56\u4e8e\\(A_i,B_i,C_0\\). (\\(A_i,B_i\\)\u603b\u662f\u5b58\u5728\u7684)\u3002</p> <p>In the ripple carry adder: - \\(G_i,P_i,S_i\\) are local to each cell of the adder - \\(C_i\\) is also local each cell</p> <p>Defining the equations for the FULL Adder in term of the \\(P_i,G_i\\): </p> <p>\\(P_i=A\\oplus B_i,\\,G_i=A_iB_i,\\,S_i=P_i\\oplus C_i,\\,C_{i+1}=G_i+P_iC_i\\)</p> <p></p> <p>\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230Carry Lookahead Adder\u7684\u539f\u7406\u56fe \u53ef\u5206\u4e3a\u4e24\u90e8\u5206,\u4e0a\u9762\u90a3\u90e8\u5206\u79f0\u4f5c\u90e8\u5206\u5168\u52a0\u5668,\u4f5c\u7528\u662f\u4ea7\u751f\\(G_i,P_i,S_i\\)\uff0c\u4e0b\u9762\u7684\u4e00\u5757\u662f\u8fdb\u4f4d\u8ba1\u7b97\u90e8\u5206\uff0c\u7b80\u79f0CLA\u5757\u3002\u6bcf\u4e2a\\(C_i\\)\u53ea\u4f9d\u8d56\u4e00\u4e2a\u4e0e\u6216\u5757\u3002</p> <p></p> <p>\u4f46\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u7535\u8def\u7684\u590d\u6742\u5ea6\u9ad8\u4e86\u5f88\u591a,\u5927\u5e45\u5ea6\u589e\u52a0\u7535\u8def\u6210\u672c\\(N^2\\)\u3002 \u4f46\u662f\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u8fdb\u4f4d\u4f20\u9012\u8fc7\u591a\u800c\u9020\u6210\u5ef6\u8fdf\u8fc7\u5927\u7684\u95ee\u9898\u3002</p> <p>\u5982\u679c\u8981\u6309\u8fd9\u4e2a\u601d\u8def\u7b80\u5355\u590d\u5236\u6765\u6269\u5c55\u6210\u66f4\u9ad8\u4f4d\u7684\u52a0\u6cd5\u5668,\u4e00\u65b9\u9762\u5927\u5e45\u5ea6\u589e\u52a0\u6210\u672c\uff0c\u53e6\u4e00\u65b9\u9762\\(G_0,P_0\\)\u8981\u9a71\u52a8\\(N\\)\u7ea7\u95e8,\u95e8\u7684\u6247\u51fa\u6570\u91cf\u589e\u52a0\uff0c\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u3002</p> <p>\u4f46\u662f\u53ef\u4ee5\u4ee54\u4f4d\u52a0\u6cd5\u5668\u4e3a\u57fa\u7840\uff0c\u5c06\u5b83\u4eec\u62fc\u8d77\u6765(\u4f8b\u598216\u4f4d\u52a0\u6cd5\u5668\u5c31\u53ef\u4ee5\u75314\u4e2a4\u4f4d\u52a0\u6cd5\u5668\u62fc\u63a5\u7ec4\u6210)</p> <p>Group Carry Lookahead Logic</p> <p></p> <p></p> <p>\u5bf9\u6bd4\u56db\u4f4d\u52a0\u6cd5\u5668\u548c16\u4f4d\u52a0\u6cd5\u5668\uff0c\u4e8c\u8005\u7684\u8ba1\u7b97\u903b\u8f91\u76f8\u540c\u7684</p> <p></p> <p>Group</p> <p></p> <p>\u6700\u4e0a\u9762\u90a3\u4e2a\u957f\u6761\u662f\u90e8\u5206\u5168\u52a0\u5668,\u7b2c\u4e8c\u884c\u7684\u56db\u4e2aCLA\u4ece\u53f3\u5230\u5de6\u5206\u522b\u6784\u62100-3,4-7,8-11,12-15\u7684\u5168\u52a0\u5668,\u6700\u4e0b\u9762\u4e00\u4e2aCLA\u5757\u4ea7\u751f\\(C_4,C_8,C_{12},C_{16}\\)\uff0c\u5373\u6bcf\u56db\u4f4d\u4e4b\u95f4\uff0c\u6bcf\u56db\u4f4d\u4e00\u7ec4\u4e4b\u95f4\u3002</p> <p>Question</p> <p>longest delay?</p>"},{"location":"cs/CLDF/lec3/#unsigned-subtraction","title":"Unsigned Subtraction","text":"<p>\u4f46\u662f\u8fd9\u6837\u5b50\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u5f88\u590d\u6742\uff0c\u6211\u4eec\u5728\u60f3\u80fd\u4e0d\u80fd\u5229\u7528\u52a0\u6cd5\u5668\u6765\u641e\u5b9a\u51cf\u6cd5\u5668\u3002</p>"},{"location":"cs/CLDF/lec3/#complements","title":"Complements","text":"<ul> <li>Diminished Radix Complement of \\(N\\): Defined as \\((r^n-1)-N\\). \u5728\u4e8c\u8fdb\u5236\u91cc,\\(r^n-1\\)\u662f\u5168\u4e3a1\u7684\u4e8c\u8fdb\u5236\u6570,\u7528\u5b83\u51cfN\u5373\u53ef\u5f97\u5230N\u6309\u4f4d\u53d6\u53cd\u7684\u7ed3\u679c</li> <li>Radix Complement: \\(r^n-N\\). </li> <li>\u8865\u7801\u7b49\u4e8e\u53cd\u7801\u52a01,\u6216\u8005\u4ece\u53f3\u5f80\u5de6\u7b2c\u4e00\u4e2a1\u4e4b\u524d\u4e0d\u53d8\uff0c\u4e4b\u540e\u5176\u5b83\u4f4d\u5168\u90e8\u6c42\u53cd</li> </ul> <p>\u6709\u4e86\u8865\u7801\u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u52a0\u6cd5\u5668\u6765\u5b9e\u73b0\u51cf\u6cd5\u5668: \u8981\u8ba1\u7b97\\(M-N\\),\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\\(M\\)\u52a0\u4e0a\\(N\\)\u7684\u4e8c\u8fdb\u5236\u8865\u7801: $$ M+2^n-N=M-N-2^n $$</p> <ul> <li>\u5982\u679c\\(M\\ge N\\), \u90a3\u4e48M-N\u662f\u4e00\u4e2a\u6b63\u6570,\u52a0\u4e0a\\(2^n\\)\u540e\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8fdb\u4f4d,\u5728\u6709\u6548\u4f4d\u4e2d\u4fdd\u7559\u7684\u662f\u6b63\u786e\u7684\u7ed3\u679c</li> <li>\u5982\u679c\\(M&lt;N\\),,\u90a3\u4e48\u539f\u5f0f\u7b49\u4e8e\\(2^n-(N-M)\\)</li> <li>\u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\uff0c\u53ea\u9700\u5224\u65ad\u9ad8\u4f4d\u7684\u8fdb\u4f4d:\u82e5\u8fdb\u4f4d\u4e3a1\uff0c\u5219\u4e3a\u6b63\uff0c\u8fdb\u4f4d\u4e3a0\uff0c\u7ed3\u679c\u4e3a\u8d1f\u3002</li> </ul> <p>Example</p> <p></p> <p></p>"},{"location":"cs/CLDF/lec3/#signed-integers","title":"Signed Integers","text":"<p>$$ sa_{n-2}\\cdots a_1a_0 $$ where s=0 for positive numbers,s=1 for negative numbers</p>"},{"location":"cs/CLDF/lec3/#representations","title":"Representations","text":"<ul> <li>Signed-Magnitude(\u6709\u7b26\u53f7\u771f\u503c)</li> <li>Signed-Complement<ul> <li>Signed 1's Complement(\u6709\u7b26\u53f7\u53cd\u7801)</li> <li>Signed 2's Complement(\u6709\u7b26\u53f7\u8865\u7801)</li> </ul> </li> </ul> <p>Example</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u4e09\u79cd\u8868\u793a\u65b9\u6cd5\u4e2d+0\u548c-0\u7684\u533a\u522b</p>"},{"location":"cs/CLDF/lec3/#signed-magnitude-arithmetic","title":"Signed-Magnitude Arithmetic","text":"<p>\u6211\u4eec\u75280\u4ee3\u8868\u52a0\u6cd5\uff0c1\u4ee3\u8868\u51cf\u6cd5\uff0c\u68c0\u9a8c\u4e09\u4e2a\u7b26\u53f7\u4f4d\u7684\u5947\u5076\u6027\uff0c\u5e76\u4e14\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u6ea2\u51fa</p> <ul> <li> <p>If the parity of the three signs is 0:</p> <ul> <li>Add the magnitudes</li> <li>Check for overflow</li> <li>The sign of the result is the same as the sign of the first operand</li> </ul> </li> <li> <p>If the parity of the three signs is 1:</p> <ul> <li>Subtract the second magnitude from the first</li> <li>If a borrow occurs:<ul> <li>take the two's compement of result</li> <li>make the result sign the complement of the sign of the first operand</li> </ul> </li> <li>Overflow never occurs</li> </ul> </li> </ul>"},{"location":"cs/CLDF/lec3/#signed-complement-arithmetic","title":"Signed-Complement Arithmetic","text":"<p>Addition: - Add the numbers including the sign bits, discarding a carry out of the sign bits - If the sign bits were the same for both numbers and the sign of the result is different, an overflow has occurred. - The sign of the result is computed in step 1</p> <p>Substraction Form the complement of the number you are subtracting and follow the rules for addition.</p> <p>Example</p> <p>1101+0011=0000 1101-0011=1010</p>"},{"location":"cs/CLDF/lec3/#2s-compement-addersubtractor","title":"2's Compement Adder/Subtractor","text":"<p>S=0\u4ee3\u8868\u51cf\u6cd5\uff0cS=0\u4ee3\u8868\u52a0\u6cd5\uff0c\u8fd9\u4e2a\u7535\u8def\u7684\u8f93\u5165\u4e3aA,B,S\u3002\u6211\u4eec\u8981\u8ba1\u7b97A+B\u548cA-B\uff0c\u4e8e\u662f\u5e0c\u671b\u5229\u7528S\u6765\u63a7\u5236B\uff0c\u51b3\u5b9a\u662f\u5426\u8981\u53d6\u53cd</p> <p>\u53ef\u4ee5\u5229\u7528\u5f02\u6216\u95e8,\u5f53S=0\u65f6\u5f02\u6216\u95e8\u4fdd\u6301\u53e6\u4e00\u4e2a\u4fe1\u53f7,\u5f53S=1\u65f6\u5f02\u6216\u95e8\u5bf9\u53e6\u4e00\u4e2a\u4fe1\u53f7\u53d6\u53cdr,\u800c\u5bf9\u4e8e\u53d6\u53cd\u540e\u52a01\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u52a0\u5230\\(C_0\\)\u91cc, \u5373\\(A-B=A+\\overline{B}+1\\)</p> <p></p> <p>Overflow Detection</p> <p>Overflow can occur for:</p> <ul> <li>Addition of two operands with the same sign</li> <li>Subtraction of operands with different signs</li> </ul> <p>Simplest way to implement overflow: \\(V=C_n\\oplus C_{n+1}\\)</p>"},{"location":"cs/CLDF/lec4/","title":"Sequential Circuits","text":"<p> \u7ea6 3867 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f</p>"},{"location":"cs/CLDF/lec4/#storage-elements-and-sequential-circuit-analysis","title":"Storage Elements and Sequential Circuit Analysis","text":""},{"location":"cs/CLDF/lec4/#introduction","title":"Introduction","text":"<ul> <li> <p>\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def\u5305\u542b\u5b58\u50a8\u5143\u4ef6\u548c\u7ec4\u5408\u903b\u8f91\u7535\u8def\u3002</p> </li> <li> <p>\u5b58\u50a8\u5143\u4ef6\u7684\u72b6\u6001\u7531\u6b21\u6001\u65b9\u7a0b\u51b3\u5b9a: \\(Next\\,State=f(Inputs,State)\\)</p> </li> <li>Output function(Mealy): Outputs=g(Inputs,State)(\u7531\u8f93\u5165\u548c\u5f53\u524d\u72b6\u6001\u5171\u540c\u51b3\u5b9a)</li> <li>Output function(Moore): Outputs=h(State)(\u4ec5\u7531\u5f53\u524d\u72b6\u6001\u51b3\u5b9a)</li> </ul>"},{"location":"cs/CLDF/lec4/#types-of-sequential-circuits","title":"Types of sequential circuits","text":"<p>Depends on the times at which:</p> <ul> <li>storage elements observe their inputs,and</li> <li>storage elements change their state</li> </ul> <p>Synchronous: \u8981\u6c42\u6bd4\u8f83\u4e25\u683c\uff1a\u7535\u8def\u4e2d\u6240\u6709\u5143\u4ef6\u5fc5\u987b\u540c\u65f6\u66f4\u65b0\uff0c\u4e14\u66f4\u65b0\u7684\u65f6\u95f4\u5468\u671f\u4e00\u81f4\u3002</p> <p>Asynchronous: \u72b6\u6001\u7684\u66f4\u65b0\u4efb\u610f\u65f6\u523b\u90fd\u53ef\u53d1\u751f\u3002\u5982\u679c\u65f6\u949f\u88ab\u770b\u4f5c\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f\u5f02\u6b65\u7684\u3002\u4f46\u662f\u5f02\u6b65\u7684\u65f6\u5e8f\u7535\u8def\u4f7f\u8bbe\u8ba1\u53d8\u5f97\u590d\u6742\u3002</p>"},{"location":"cs/CLDF/lec4/#storage-elements","title":"Storage elements","text":"Storing State <p>\u56de\u987e\u6211\u4eec\u4e4b\u524d\u5b66\u7684\u95e8\u4f20\u8f93\u5ef6\u8fdf\u7535\u8def\uff0c\u73b0\u5728\u6211\u4eec\u628a\u8f93\u51fa\u7aefY\u4e0eA\u8fde\u63a5\uff0c\u5c31\u5c06\u7ec4\u5408\u903b\u8f91\u7535\u8def\u53d8\u6210\u4e86\u65f6\u5e8f\u7535\u8def\u3002</p> <p></p> <p></p>"},{"location":"cs/CLDF/lec4/#latches","title":"Latches(\u9501\u5b58\u5668)","text":"<p>\\(\\overline{S}-\\overline{R}\\) Latch</p> <p></p> <p>\u53ef\u5f97\u5230\u5982\u4e0b\u7684\u65f6\u5e8f\u72b6\u6001\uff1a</p> <p></p> <p>\u6ce8\u610f\u5f53\\(R=0,S=0\\)\u65f6\uff0c\\(Q,\\overline{Q}\\)\u90fd\u4e3a1\uff0c\u5982\u679c\u6211\u4eec\u5c06\\(R,S\\)\u6539\u4e3a1\uff0c\\(Q\\)\u548c\\(overline{Q}\\)\u8c01\u4e3a1\u53d6\u51b3\u4e8e\u95e8\u7684\u4f20\u8f93\u5ef6\u8fdf\u3002\u56e0\u6b64\\(R=0,S=0\\) is forbidden as input pattern.</p> <p>S-R Latch</p> <p></p> <p>Clocked S-R Latch</p> <p>\u5728\u4e4b\u524d\u7684\u57fa\u7840\u4e0a\u6211\u4eec\u589e\u52a0\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7(clock or control)</p> <p></p> <p></p> <ul> <li>Has a time sequence behavior similar to the basic S-R latch except that the S and R inputs are only observed when the line C is high.</li> </ul> <p>\u4e0e\u4e4b\u524dSR\u9501\u5b58\u5668\u76f8\u540c\uff0cC=1,S=1,R=1\u662f\u975e\u6cd5\u7684\u3002</p> <p>D-Latch</p> <p>\u6211\u4eec\u60f3\u907f\u514d\u975e\u6cd5\u8f93\u5165\uff0c\u907f\u514d\u672a\u5b9a\u4e49\u60c5\u51b5\uff0c\u56e0\u6b64\u5f15\u5165D\u9501\u5b58\u5668\u3002</p> <p></p> <p></p> <p>Note</p> <p>\u5728chapter3\u8ba1\u7b97\u95e8\u8f93\u5165\u6210\u672c\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u8ba1\u7b97G\u800c\u4e0d\u8ba1\u7b97GN\uff0c\u662f\u56e0\u4e3a\u7535\u8def\u4e2d\u7684\u9501\u5b58\u5668\u540c\u65f6\u63d0\u4f9b\u4e86\\(Q\\) \u548c\\(\\overline{Q}\\)\u3002</p>"},{"location":"cs/CLDF/lec4/#flip-flops","title":"Flip-flops","text":"<p>Example</p> <p></p> <p>\u5728\u9501\u5b58\u5668\u4e2d\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u7a7a\u7ffb\u73b0\u8c61\uff0c\u5373\u4e0d\u80fd\u505a\u5230\u5728\u65f6\u949f\u4fe1\u53f7\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u72b6\u6001\u53ea\u66f4\u65b0\u4e00\u6b21\u3002</p> <p>A solution to the latch timing problem is to break the closed path from Y to Y within the storage element. \u5373\u5207\u65ad\u9501\u5b58\u5668\u8f93\u5165\u548c\u8f93\u51fa\u7684\u76f4\u63a5\u8054\u7cfb\uff0c\u91c7\u7528\u89e6\u53d1\u5668\u7684\u8bbe\u8ba1\u3002</p> <p>\u4e3b\u8981\u6709\u4e24\u79cd\u89e6\u53d1\u5668\uff1a</p> <ul> <li>\u5728\u65f6\u949f\u4fe1\u53f7\u9ad8\u7535\u5e73\u65f6\u4fee\u6539\u7b2c\u4e00\u4e2a\u9501\u5b58\u5668\u7684\u503c\uff0c\u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u9501\u5b58\u5668\u7684\u503c\uff1b\u5728\u4f4e\u7535\u5e73\u65f6\u4fdd\u5b58\u7b2c\u4e00\u4e2a\uff0c\u4fee\u6539\u7b2c\u4e8c\u4e2a\uff0c\u6b64\u65f6\u66f4\u65b0\u89e6\u53d1\u5668\u7684\u72b6\u6001\uff0c\u79f0\u4e3a\u4e3b\u4ece\u89e6\u53d1\u5668\u3002</li> <li>\u4ec5\u5728\u65f6\u949f\u7535\u5e73\u53d8\u6362\u7684\u8fb9\u6cbf\u89e6\u53d1\uff0c\u5373\u5728\u7279\u5b9a\u65f6\u523b\u4ec5\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165\uff0c\u5206\u4e3a\u4e0a\u5347\u6cbf\u89e6\u53d1\u548c\u4e0b\u964d\u6cbf\u89e6\u53d1\uff0c\u7edf\u79f0\u4e3a\u8fb9\u6cbf\u89e6\u53d1\u5668\u3002</li> </ul> <p>S-R Master-Slave Flip-Flop</p> <p></p> <p>\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898</p> <p>\u5047\u5982\u5728\\(C=1\uff0cS=0\uff0cR=0\\)\u65f6\uff0cS\u6216\u8005R\u53d1\u751f\u5fae\u5c0f\u7684\u6270\u52a8(\u7a81\u7136\u53d8\u62101\u540e\u53c8\u56de\u52300)\uff0c\u4e3b\u9501\u5b58\u5668\u7531\u539f\u5148\u7684\u4fdd\u6301\u72b6\u6001\u53d8\u4e3a\u4fee\u6539\u72b6\u6001,\u4f46\u662f\u5f53S\u53d8\u56de0\u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u53c8\u56de\u5230\u4fdd\u6301\u72b6\u6001\uff0c\u4fdd\u6301\u7684\u503c\u4ecd\u7136\u4e3aS=1\u800c\u4e0d\u4f1a\u53d8\u56de\u539f\u6765\u76840\uff0c\u8be5\u503c\u5c31\u4f1a\u88ab\u4f20\u5230\u4ece\u9501\u5b58\u5668\u4e2d\u3002</p> <p>\u4e3a\u89e3\u51b3\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u6211\u4eec\u91c7\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668\u3002</p> <p>Edge-Triggered D Flip-Flop</p> <p></p> <p>\u6211\u4eec\u7528\u4e0a\u56fe\u6765\u7406\u89e3\u8fb9\u6cbf\u89e6\u53d1\u5668\u7684\u884c\u4e3a\u3002\u5728\u4e0a\u5347\u6cbf\u524d\u4e00\u523b\uff0c\u4e3b\u9501\u5b58\u5668\u53ef\u5199\uff0c\u4ece\u9501\u5b58\u5668\u53ea\u8bfb\uff1b\u800c\u5728\u4e0a\u5347\u6cbf\u540e\u4e00\u523b\uff0c\u4e3b\u9501\u5b58\u5668\u53ea\u8bfb\uff0c\u4ece\u9501\u5b58\u5668\u5199\u5165\u4e3b\u9501\u5b58\u5668\u5b58\u50a8\u7684\u503c\uff0c\u5373\u4e0a\u5347\u6cbf\u524d\u4e00\u523b\u5199\u5165\u4e3b\u9501\u5b58\u5668\u7684\u5185\u5bb9\u3002</p> <p>\u5728\u5b9e\u9645\u7535\u8def\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u91c7\u7528\u5982\u4e0b\u7684\u7535\u8def\u56fe\uff0c\u5b83\u51cf\u5c11\u4e86\u95e8\u8f93\u5165\u6210\u672c\u3002</p> <p></p>"},{"location":"cs/CLDF/lec4/#standard-symbols-for-storage-elements","title":"Standard Symbols for Storage Elements","text":"<p>\u6ce8\u610f\u7b26\u53f7\u56fe\u4e0a\u7684\u5c0f\u5706\u5708\uff0c\u4ee3\u8868\u975e\u3002\u7528\u6765\u5224\u65ad\u662f\u4f55\u79cd\u9501\u5b58\u5668/\u89e6\u53d1\u5668</p>"},{"location":"cs/CLDF/lec4/#direct-input","title":"Direct Input","text":"<p>\u6211\u4eec\u901a\u5e38\u4f1a\u5bf9\u65f6\u5e8f\u7535\u8def\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5373\u5728\u5b83\u5f00\u59cb\u8fd0\u884c\u4e4b\u524d\u8d4b\u4e88\u7535\u8def\u4e00\u4e2a\u786e\u5b9a\u7684\u72b6\u6001\uff0c\u79f0\u4e3a\u76f4\u63a5\u8f93\u5165\u3002\u8fd9\u4e9b\u8f93\u5165\u901a\u5e38\u662f\u5f02\u6b65\u7684\u3002</p> <p></p> <p>\u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff0cS\u548cR\u5c31\u4f5c\u4e3a\u76f4\u63a5\u8f93\u5165\uff0c\u5f53\\(\\overline{S}\\)\u7aef\u4e3a0\u65f6\u6211\u4eec\u5c06\u9501\u5b58\u5668\u7f6e\u4e3a1\uff0c\u5f53\\(\\overline{R}\\)\u7aef\u4e3a0\u65f6\u6211\u4eec\u590d\u4f4d\u4e3a0</p>"},{"location":"cs/CLDF/lec4/#sequential-circuit-analysis","title":"Sequential Circuit Analysis","text":"<p>\u76f8\u6bd4\u7ec4\u5408\u7535\u8def\uff0c\u65f6\u5e8f\u7535\u8def\u5177\u6709\u72b6\u6001\uff0c\u56e0\u6b64\u9664\u4e86\u8f93\u51fa\u4e0e\u8f93\u5165\u7684\u5173\u7cfb\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u5173\u6ce8\u6b21\u6001\u65b9\u7a0b\uff0c\u5373\u5f53\u524d\u7684\u72b6\u6001\u548c\u8f93\u5165\u5982\u4f55\u5f71\u54cd\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002</p> <p>Example</p> <p></p> <p>\u5bf9\u4e8e\u5982\u4e0a\u7684\u7535\u8def,\u8f93\u5165\u662f\\(x(t)\\),\u8f93\u51fa\u662f\\(y(t)\\),\u72b6\u6001\u662f\\((A(t),B(t))\\),\u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u8f93\u51fa\u65b9\u7a0b\u4e0e\u6b21\u6001\u65b9\u7a0b\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u91c7\u7528D\u9501\u5b58\u5668\uff0c\u56e0\u6b64\u72b6\u6001\u5c31\u662f\u9501\u5b58\u5668D\u7684\u8f93\u5165\u3002\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u5e03\u5c14\u65b9\u7a0b\uff1a</p> <p></p>"},{"location":"cs/CLDF/lec4/#state-table","title":"State Table","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u72b6\u6001\u8868\u6765\u63cf\u8ff0\u65f6\u5e8f\u7535\u8def\u7684\u903b\u8f91\u3002\u5206\u4e3a\u56db\u5217\uff1a\u5f53\u524d\u72b6\u6001\uff0c\u8f93\u5165\uff0c\u6b21\u6001\uff0c\u8f93\u51fa\u3002\u4e3a\u4e86\u5f97\u5230\u72b6\u6001\u8868\uff0c\u9700\u8981\u5148\u5199\u51fa\u8f93\u51fa\u65b9\u7a0b\u548c\u6b21\u6001\u65b9\u7a0b\u3002</p> <p>Example</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\u7684\u72b6\u6001\u8868\u7684\u884c\u6570\u7531\u72b6\u6001\u6570+\u8f93\u5165\u4e2a\u6570\u51b3\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u964d\u7ef4\uff0c\u5c06\u8f93\u5165\u548c\u6b21\u6001\u5199\u5728\u4e00\u8d77\u3002</p> <p></p>"},{"location":"cs/CLDF/lec4/#state-diagrams","title":"State Diagrams","text":"<p>\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u4e5f\u53ef\u4ee5\u7528\u72b6\u6001\u56fe\u8868\u793a\uff0c\u5b83\u6bd4\u72b6\u6001\u8868\u66f4\u597d\u5730\u63cf\u8ff0\u4e86\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u3002</p> <p>Mealy type circuit and Moore type circuit</p> <p>Mealy\u578b\u7535\u8def\u8f93\u51fa\u65e2\u4f9d\u8d56\u4e8e\u5f53\u524d\u72b6\u6001\uff0c\u4e5f\u4f9d\u8d56\u4e8e\u8f93\u5165\u3002Moore\u578b\u53ea\u53d6\u51b3\u4e8e\u5f53\u524d\u72b6\u6001\u3002</p> <p>\u5bf9\u4e8e\u72b6\u6001\u56fe\u4e2d\u6807\u8bc6\u8f93\u51fa\u7684\u4f4d\u7f6e\uff0c\u7531\u4e8eMoore\u578b\u7535\u8def\u53ea\u53d6\u51b3\u4e8e\u5f53\u524d\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u4e60\u60ef\u6807\u5728\u72b6\u6001\u7684\u5706\u5708\u91cc\uff0c\u800cMealy\u578b\u7535\u8def\u6807\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u5f27\u4e0a\u3002</p> <p>Example</p> <p></p> <p>\u7531\u4e8e\u8f93\u51fa\u6807\u5728\u5f27\u4e0a\uff0c\u56e0\u6b64\u8be5\u7535\u8def\u662fMealy\u578b\u7535\u8def\u3002</p> <p></p> <p>Moore\u578b\u7535\u8def</p> <p>\u5728\u5b9e\u9645\u7535\u8def\u8bbe\u8ba1\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e9b\u8f93\u51fa\u662fMoore\u578b\uff0c\u4e00\u4e9b\u8f93\u51fa\u662fMealy\u578b\u7684\u60c5\u51b5\u3002</p>"},{"location":"cs/CLDF/lec4/#equivalent-state-definitions","title":"Equivalent State Definitions","text":"<p>\u5f53\u4e24\u4e2a\u72b6\u6001\u7684\u8f93\u5165\u76f8\u540c\u65f6\uff0c\u5982\u679c\u5b83\u4eec\u7684\u8f93\u51fa\u548c\u6b21\u6001\u90fd\u76f8\u540c\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u72b6\u6001\u4e3a\u7b49\u4ef7\u72b6\u6001\u3002\u5982\u679c\u7535\u8def\u4e2d\u6709\u7b49\u4ef7\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u89e6\u53d1\u5668\u7684\u4e2a\u6570\u3002</p> <p>Example</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0S2\u548cS3\u662f\u7b49\u4ef7\u72b6\u6001\uff0c\u5c06\u5b83\u4eec\u5408\u5e76\u3002</p> <p></p> <p>\u54a6\u5408\u5e76\u4e4b\u540e\u53c8\u53d1\u73b0\u7b49\u4ef7\u72b6\u6001S2\u548cS1\u3002\u901a\u8fc7\u4e24\u6b21\u7b49\u4ef7\u72b6\u6001\u7684\u5408\u5e76\uff0c\u6211\u4eec\u5728\u8f93\u5165\u6210\u672c\u4e0a\u51cf\u5c11\u4e86\u4e24\u4e2a\u89e6\u53d1\u5668\u3002</p> <p>Example</p> <p></p> <p>\u5176\u4e2dClock\u8fde\u7684\u662f\u7cfb\u7edf\u65f6\u949f\uff0cReset\u662f\u4f5c\u4e3a\u76f4\u63a5\u8f93\u5165\uff0c\u5c06\u7535\u8def\u8d4b\u521d\u503c\u3002\u4f46\u662f\u4e0d\u7528\u5c06Clock\u548cReset\u5728\u65b9\u7a0b\u4e2d\u63cf\u8ff0\u3002</p> <p>\u5bf9\u4e8e\u5982\u4e0a\u7684\u65f6\u5e8f\u7535\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u64cd\u4f5c\u5f97\u5230\u5982\u4e0b\u7684\u72b6\u6001\u56fe\u3002</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0\u5728\u6709\u6548\u7684\u5faa\u73af\u4e2d\uff0c\u8be5\u7535\u8def\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u6a21\u4e94\u8ba1\u6570\u5668\uff0c\u800c\u5bf9\u4e8e\u65e0\u6548\u7684\u72b6\u6001111\uff0c101\uff0c110\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u4eec\u7684\u6b21\u6001\u90fd\u56de\u5230\u4e86\u6709\u6548\u5faa\u73af\u4e2d\u3002\u8fd9\u53ef\u4ee5\u6709\u6548\u9632\u6b62\u5fae\u5c0f\u6270\u52a8\u5bf9\u7535\u8def\u7684\u5f71\u54cd\uff0c\u5904\u7406\u65e0\u6548\u72b6\u6001\u3002</p>"},{"location":"cs/CLDF/lec4/#flip-flop-timing-parameters","title":"Flip-Flop Timing Parameters","text":"<p>\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u65f6\u5e8f\u7535\u8def\u7684\u6700\u5927\u5de5\u4f5c\u9891\u7387\uff0c\u4e5f\u5c31\u662f\u8981\u8ba1\u7b97\u4e24\u4e2a\u4e0a\u5347\u6cbf\u4e4b\u95f4\u7684\u6700\u5c0f\u95f4\u9694\u3002\u4e3a\u6b64\u9700\u8981\u8003\u8651\u65f6\u5e8f\u7535\u8def\u7684\u4f20\u8f93\u5ef6\u8fdf\u3002</p> <p>\u89e6\u53d1\u5668\u5ef6\u65f6</p> <p>\u89e6\u53d1\u5668\u7684\u5ef6\u65f6\u4e0d\u4ec5\u4ec5\u662f\u4f20\u8f93\u5ef6\u8fdf\uff0c\u8fd8\u6709\u4e3a\u4e86\u4fdd\u8bc1\u4ea7\u751f\u7a33\u5b9a\u8f93\u51fa\u4fe1\u53f7\u6240\u5fc5\u8981\u7684\u65f6\u95f4\u3002</p> <ul> <li>Setup Time: \u91c7\u6837\u8fb9\u7f18\u524d\u8f93\u5165\u4fe1\u53f7\u9700\u8981\u4fdd\u6301\u7a33\u5b9a\u7684\u65f6\u95f4\uff0c\u5373\u8f93\u5165\u4fe1\u53f7\u9700\u8981\u5728setup time\u4e4b\u524d\u6539\u53d8\u597d\uff0c\u5426\u5219\u8fd9\u6b21\u6539\u53d8\u4e0d\u4f1a\u88ab\u63a5\u6536\u3002</li> <li>Hold Time: \u91c7\u6837\u8fb9\u7f18\u540e\u8f93\u5165\u4fe1\u53f7\u9700\u8981\u4fdd\u6301\u7a33\u5b9a\u7684\u65f6\u95f4\u3002</li> <li>\\(t_{pd,ff}\\)\uff1a\u89e6\u53d1\u5668\u91c7\u6837\u8fb9\u7f18\u5230\u4ea7\u751f\u7a33\u5b9a\u8f93\u51fa\u7684\u65f6\u95f4\u3002</li> </ul> <p>\u7ec4\u5408\u7535\u8def\u5ef6\u65f6 \u5373\u4e3a\u4f20\u8f93\u5ef6\u8fdf\u3002</p> <p></p> <p>\u89c2\u5bdf\u4e0a\u56fe\u53ef\u53d1\u73b0S-R\u4e3b\u4ece\u89e6\u53d1\u5668\u7684setup time\u5360\u636e\u4e00\u534a\u7684\u65f6\u949f\u5468\u671f\uff0c\u539f\u56e0\u5c31\u662f\u4e4b\u524d\u4ecb\u7ecd\u7684\u4e00\u6b21\u6027\u91c7\u6837\uff0c\u8f93\u5165\u4fe1\u53f7\u5728C=1\u65f6\u4e0d\u5141\u8bb8\u53d1\u751f\u6539\u53d8\u3002</p> <p>\u7535\u8def\u677e\u5f1b\u65f6\u95f4 extra time in the clock period in addition to the sum of the delays and setup time on a path. \u677e\u5f1b\u65f6\u95f4\u5fc5\u5b9a\u975e\u8d1f\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u4e0a\u5347\u6cbf\u7684\u6700\u5c0f\u65f6\u95f4\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u7531\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\u7684\\(t_s\\)\u5360\u4e86\u534a\u4e2a\u65f6\u949f\u4fe1\u53f7\uff0c\u5927\u7ea650%\u5360\u7a7a\u6bd4\uff0c\u56e0\u6b64\u7559\u7ed9\u89e6\u53d1\u5668\u548c\u7ec4\u5408\u7535\u8def\u7684\u4f20\u8f93\u65f6\u95f4\u5c31\u5f88\u5c11\uff0c\u5728\u89e6\u53d1\u5668\u548c\u7ec4\u5408\u7535\u8def\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u5177\u6709\u66f4\u957f\u7684\u5468\u671f\uff0c\u5de5\u4f5c\u9891\u7387\u66f4\u5c0f\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u66f4\u5e38\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 </p>"},{"location":"cs/CLDF/lec4/#sequential-circuit-design","title":"Sequential Circuit Design","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u77e5\u9053\u600e\u4e48\u6837\u6765\u8bbe\u8ba1\u65f6\u5e8f\u7684\u7535\u8def\u3002</p> <p>\u5728\u5206\u6790\u65f6\u5e8f\u7535\u8def\u7684\u884c\u4e3a\u65f6\uff0c\u6211\u4eec\u4f9d\u6b21\u5f97\u5230\u72b6\u6001\u65b9\u7a0b\uff0c\u72b6\u6001\u8868\uff0c\u72b6\u6001\u56fe\u3002\u800c\u8bbe\u8ba1\u65f6\u6211\u4eec\u5219\u53cd\u8fc7\u6765\uff0c\u5148\u7528\u72b6\u6001\u56fe\u8868\u8fbe\u5e94\u7528\u9700\u6c42\uff0c\u518d\u5f97\u5230\u72b6\u6001\u8868\u7b49\u3002\u5927\u81f4\u9075\u5faa\u5982\u4e0b\u6d41\u7a0b\uff1a</p> <p></p>"},{"location":"cs/CLDF/lec4/#specification","title":"Specification","text":"<p>\u8bf4\u660e\u7535\u8def\u8981\u505a\u4ec0\u4e48\u3002\u5305\u62ec\u6587\u5b57\u63cf\u8ff0\uff0c\u6570\u5b66\u516c\u5f0f\uff0c\u786c\u4ef6\u63cf\u8ff0\u7b49</p>"},{"location":"cs/CLDF/lec4/#formulation","title":"Formulation","text":""},{"location":"cs/CLDF/lec4/#_1","title":"\u72b6\u6001\u7684\u62bd\u8c61","text":"<p>\u628a\u7535\u8def\u7684\u884c\u4e3a\u62bd\u8c61\u4e3a\u51e0\u4e2a\u72b6\u6001\uff0c\u4ee5\u53ca\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u3002</p> <p>Sequence Recognizer Procedure</p> <p>\u5e8f\u5217\u8bc6\u522b\u5668\uff1a\u8bc6\u522b\u51fa\u7ed9\u5b9a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002</p> <p>\u521d\u6001\uff1a\u4ec0\u4e48\u90fd\u6ca1\u8bc6\u522b\u5230\u3002\u6bcf\u8bc6\u522b\u5230\u4e00\u4e2a\u4f4d\u66f4\u65b0\u4e00\u4e2a\u72b6\u6001\uff0c\u5168\u90e8\u8bc6\u522b\u5b8c\u6bd5\u540e\u5f97\u5230\u6700\u7ec8\u72b6\u6001\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u7684\u7535\u8def\u9700\u8981\u8bc6\u522b1101\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002\u5982\u679c\u8bc6\u522b\u52301101\uff0c\u5219\u7535\u8def\u8f93\u51fa1\u3002\u7279\u522b\u7684\uff0c\u5bf9\u4e8e1101101\uff0c\u5934\u548c\u5c3e\u90fd\u662f\u6709\u6548\u5e8f\u5217(1101101,1101101),\u4e24\u79cd\u60c5\u51b5\u90fd\u8981\u8003\u8651\u5230\u3002</p> <p>\u5bf9\u4e8eMealy\u578b\u7535\u8def\uff0c\u6211\u4eec\u5f97\u5230\u7684\u72b6\u6001\u56fe\u548c\u72b6\u6001\u8868\u5982\u4e0b\uff1a</p> <p></p> <ul> <li>A\u8868\u660e\u6ca1\u6709\u4efb\u4f55\u6709\u6548\u5e8f\u5217</li> <li>B\u8868\u793a\u6536\u52301</li> <li>C\uff1a\u4e24\u4e2a1</li> <li>D\uff1a110\uff0c\u5f53D\u518d\u6536\u5230\u4e00\u4e2a1\u65f6\uff0c\u8f93\u51fa1\uff0c\u540c\u65f6\u7531\u4e8e\u6700\u540e\u4e00\u4f4d1\u53ef\u4ee5\u5f53\u4f5c\u4e0b\u4e00\u4e2a1101\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a1\uff0c\u56e0\u6b64\u56de\u5230B\u72b6\u6001\u3002</li> </ul> <p>\u5bf9\u4e8eMoore\u578b\u7535\u8def\uff0c\u6211\u4eec\u9700\u8981\u518d\u589e\u52a0\u4e00\u4e2a\u72b6\u6001E\u4ee3\u8868\u6210\u529f\u8bc6\u522b\uff0c\u5373\u8f93\u51fa1.</p> <p></p>"},{"location":"cs/CLDF/lec4/#_2","title":"\u72b6\u6001\u8868\u7684\u7b80\u5316","text":"<p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u539f\u59cb\u72b6\u6001\u56fe\u548c\u539f\u59cb\u72b6\u6001\u8868\u4e2d\u5b58\u5728\u7740\u591a\u4f59\u7684\u72b6\u6001\uff0c\u72b6\u6001\u4e2a\u6570\u8d8a\u591a\uff0c\u7535\u8def\u4e2d\u6240\u9700\u7684\u89e6\u53d1\u5668\u6570\u76ee\u8d8a\u591a\uff0c\u6210\u672c\u4e5f\u8d8a\u9ad8\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u9664\u53bb\u591a\u4f59\u72b6\u6001\uff0c\u8fd9\u5c31\u6d89\u53ca\u5230\u72b6\u6001\u8868\u7684\u7b80\u5316\uff1a\u4e0d\u4ec5\u80fd\u6b63\u786e\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11\u3002</p> <p>\u72b6\u6001\u7b49\u6548\uff1a\u4e0a\u6587\u5df2\u6d89\u53ca\u3002</p> <p>\u72b6\u6001\u7b49\u6548\u7684\u5224\u522b\uff1a</p> <ul> <li>\u5728\u6240\u6709\u8f93\u5165\u60c5\u51b5\u4e0b\u8f93\u51fa\u76f8\u540c</li> <li>\u540c\u65f6\uff0c\u8981\u4e48\u6b21\u6001\u76f8\u540c\uff0c\u8981\u4e48\u6b21\u6001\u4ea4\u9519\uff0c\u8981\u4e48\u6b21\u6001\u5faa\u73af</li> </ul> <p>\u6b21\u6001\u4ea4\u9519\uff0c\u6b21\u6001\u5faa\u73af\u7684\u89e3\u91ca</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u56fe\u7684\u72b6\u6001\\(S_i,S_j\\),\u5f53\u8f93\u5165\u4e3a0\u65f6\uff0c\u8f93\u51fa\u548c\u6b21\u6001\u76f8\u540c\uff1b\u5f53\u8f93\u5165\u4e3a1\u65f6\uff0c\u8f93\u51fa\u76f8\u540c\uff0c\\(S_i,S_j\\)\u4e92\u4e3a\u5bf9\u65b9\u7684\u6b21\u6001\uff0c\u8fd9\u79cd\u60c5\u51b5\u79f0\u4f5c\u6b21\u6001\u4ea4\u9519\uff0c\\(S_i,S_j\\)\u4e3a\u7b49\u6548\u72b6\u6001\u3002</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u56fe\u7684\u72b6\u6001\\(S_i,S_j\\),\u5f53\u8f93\u5165\u4e3a1\u65f6\uff0c\u6b21\u6001\u4ea4\u9519\uff0c\u5f53\u8f93\u5165\u4e3a1\u65f6\uff0c\u6b21\u6001\u5206\u522b\u4e3a\\(S_k,S_l\\).\u5047\u5982\\(S_k,S_l\\)\u4e3a\u7b49\u6548\u72b6\u6001\uff0c\u5219\\(S_i,S_j\\)\u4e5f\u7b49\u6548\u3002\u5373\\(S_i,S_j\\)\u7b49\u6548\u4e0e\u5426\u4f9d\u8d56\u4e8e\\(S_k,S_l\\)\u662f\u5426\u7b49\u6548\u3002</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u56fe\u7684\u72b6\u6001\uff0c\\(S_i,S_j\\)\u4e0e\\(S_k,S_l\\)\u76f8\u4e92\u4f9d\u8d56\uff0c\u5219\u79f0\u4e3a\u6b21\u6001\u5faa\u73af\uff0c\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u8ba4\u4e3a\u8fd9\u56db\u4e2a\u72b6\u6001\u90fd\u7b49\u6548\u3002</p> <p>\u5316\u7b80\u72b6\u6001\u8868 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u7b49\u6548\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u4e0b\u4e00\u6b65\u5c31\u9700\u8981\u5316\u7b80\u72b6\u6001\u8868\u3002\u5206\u4e3a\u4e24\u79cd\u65b9\u6cd5\uff1a\u89c2\u5bdf\u6cd5\u548c\u9690\u542b\u8868\u6cd5\u3002\u89c2\u5bdf\u6cd5\u5c31\u662f\u76f4\u63a5\u770b\u72b6\u6001\u8868\u627e\u7b49\u6548\u72b6\u6001\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u3002</p> <p>\u9690\u542b\u8868\u6cd5\u5316\u7b80\u72b6\u6001\u8868</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u56fe\uff0c\u5177\u6709\u8f83\u591a\u72b6\u6001\uff0c\u4f7f\u7528\u89c2\u5bdf\u6cd5\u4e0d\u73b0\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9690\u542b\u8868\u6cd5\u5316\u7b80\u3002\u9690\u542b\u8868\u5c31\u662f\u4e2a\u4e0b\u4e09\u89d2\u9635\uff0c\u884c\u6570\u4e3a\u72b6\u6001\u6570\u51cf\u4e00\uff0c\u5217\u6570\u4e3a\u72b6\u6001\u4e2a\u6570\u3002\u884c\u5217\u4ea4\u53c9\u7684\u683c\u5b50\u91cc\u586b\u7684\u662f\u4e24\u4e2a\u72b6\u6001\u7b49\u6548\u4e0e\u5426\uff0c\u4ee5\u53ca\u7b49\u6548\u9700\u8981\u7684\u6761\u4ef6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5982\u679c\u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u5219\u5728\u683c\u5b50\u91cc\u6253\u52fe\uff0c\u4e0d\u7b49\u6548\u5219\u6253\u53c9\uff08\u6839\u636e\u8f93\u51fa\u662f\u5426\u76f8\u540c\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\uff09\u3002\u5982\u679c\u7b49\u6548\u4e0e\u5426\u9700\u8981\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002\u5bf9\u4e8e\u6807\u8bb0\u7684\u6b21\u6001\u5bf9\uff0c\u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u6700\u7ec8\u7b49\u6548\u72b6\u6001\u5bf9\u3002</p> <p>\u6700\u540e\u786e\u5b9a\u6700\u5927\u7b49\u6548\u7c7b\uff0c\u753b\u51fa\u6700\u5c0f\u5316\u72b6\u6001\u8868\u3002</p> <p>\u5982\u4e0a\u7684\u72b6\u6001\u8868\u4e2d\u6709\u56db\u4e2a\u7b49\u6548\u5bf9AB,AE,BE,CF,\u56e0\u6b64\u6700\u5927\u7b49\u6548\u7c7b\u4e3aABE\uff0c\u603b\u5171\u7535\u8def\u4e2d\u6709\u56db\u4e2a\u72b6\u6001ABE,CF,D,G,\u4ee4\u4e0a\u8ff0\u56db\u4e2a\u72b6\u6001\u4e3aabcd\uff0c\u53ef\u5f97\u5230\u6700\u5c0f\u5316\u72b6\u6001\u8868\uff1a</p> <p></p>"},{"location":"cs/CLDF/lec4/#state-assignment","title":"State Assignment","text":"<p>\u5728\u5f97\u5230\u6700\u5c0f\u5316\u72b6\u6001\u8868\u540e\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u76ee\u7684\u662f\u8bbe\u8ba1\u7535\u8def\uff0c\u800c\u72b6\u6001\u8868\u4e2d\u7684\u72b6\u6001\u53ea\u662f\u62bd\u8c61\u7684\u5b57\u6bcd\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u662f\u4e3a\u6bcf\u4e2a\u72b6\u6001\u5206\u914d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u4ee5\u8fdb\u884c\u7535\u8def\u7684\u8bbe\u8ba1\u3002</p> <p>\u4f46\u662f\\(n\\)\u79cd\u72b6\u6001\uff0c\u603b\u5171\u6709\\(n!\\)\u79cd\u5206\u914d\u4e8c\u8fdb\u5236\u4f4d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u9009\u62e9\u5462\uff1f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5206\u914d\uff0c\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u6210\u672c\u53ca\u590d\u6742\u7a0b\u5ea6\u4e5f\u4f1a\u5f88\u4e0d\u4e00\u6837\uff0c\u5982\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <p>Example</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u8868\uff0c\u6211\u4eec\u8003\u8651\u4e24\u79cd\u5206\u914d\u65b9\u6848\uff1a\u6309\u8ba1\u6570\u987a\u5e8f\u4ee5\u53ca\u6309\u683c\u96f7\u7801\uff0c\u7ed3\u679c\u4f9d\u6b21\u4e3a\u5982\u4e0b\u4e24\u56fe\uff1a</p> <p></p> <p></p> <p>\u76f8\u5e94\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u5361\u8bfa\u56fe\u6765\u5f97\u5230\u6b21\u6001\u65b9\u7a0b\uff0c\u8f93\u51fa\u65b9\u7a0b\u7684\u903b\u8f91\u8868\u8fbe\u5f0f,\u5e76\u8ba1\u7b97\u95e8\u8f93\u5165\u6210\u672c\u3002</p> <p></p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd\u65b9\u6848\u7684\u95e8\u8f93\u5165\u6210\u672c\u663e\u8457\u5c0f\u4e8e\u7b2c\u4e00\u79cd\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u72b6\u6001\u5206\u914d\u7684\u4efb\u52a1\u4e0d\u4ec5\u662f\u51b3\u5b9a\u7f16\u7801\u7684\u957f\u5ea6\uff0c\u8fd8\u9700\u8981\u5bfb\u627e\u4e00\u79cd\u6700\u4f73\u7684\u6216\u63a5\u8fd1\u6700\u4f73\u7684\u72b6\u6001\u5206\u914d\u65b9\u6848\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u72b6\u6001\u5206\u914d\u7684\u6280\u5de7\u3002</p> <p>\u57fa\u672c\u539f\u5219</p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910</li> </ul> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f18\u5148\u8003\u8651\u7b2c\u4e00\u6761\u539f\u5219\u3002</p> Example <p></p> <p></p> <p></p>"},{"location":"cs/CLDF/lec4/#map-technology","title":"Map Technology","text":"<p>\u753b\u51fa\u7535\u8def\u56fe\uff0c\u5e76\u91c7\u7528\u4e0e\u975e\u95e8\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4e0e\u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\u7684\u5de5\u827a\u6620\u5c04\u76f8\u540c\u3002</p> <p>A little Practice</p> <p>\u5230\u8fd9\u91cc\u6211\u4eec\u5e94\u8be5\u5177\u5907\u8bbe\u8ba1\u51fa\u65f6\u5e8f\u7535\u8def\u7684\u80fd\u529b\u3002</p> <p>\u660e\u767d\u9700\u6c42-&gt;\u753b\u72b6\u6001\u56fe-&gt;\u5f97\u5230\u72b6\u6001\u8868-&gt;\u5bfb\u627e\u7b49\u6548\u72b6\u6001\uff0c\u5316\u7b80\u72b6\u6001\u8868-&gt;\u72b6\u6001\u5206\u914d-&gt;\u5de5\u827a\u6620\u5c04</p> <p></p>"},{"location":"cs/CLDF/lec4/#other-flip-flop-types","title":"Other Flip-Flop Types","text":""},{"location":"cs/CLDF/lec4/#j-k-flip-flop","title":"J-K Flip-Flop","text":"<p>\u9664\u4e86\u5728\\(J=1,K=1\\)\u65f6\u6b21\u6001\u53d6\u53cd\uff0c\u5176\u5b83\u4e0eSR\u4e3b\u4ece\u89e6\u53d1\u5668\u76f8\u540c\uff0c\u4e5f\u540c\u6837\u5b58\u5728\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528D\u89e6\u53d1\u5668\u6765\u5b9e\u73b0J-K\u89e6\u53d1\u5668\u7684\u529f\u80fd\u3002\u590d\u4e60\u65f6\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u3002</p> <p></p> <p>\u8fd9\u91cc\u4f7f\u7528\u4e86\u8fb9\u6cbf\u89e6\u53d1\u5668\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\u3002</p> <p>\u903b\u8f91\u7b26\u53f7\u56fe\uff1a</p> <p></p>"},{"location":"cs/CLDF/lec4/#t-flip-flop","title":"T Flip-Flop","text":"<p>T\u89e6\u53d1\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u5165T\uff0c\u5f53T\u4e3a0\u65f6\u4e3a\u4fdd\u6301\u72b6\u6001\uff0c\u5f53T\u4e3a1\u65f6\u6c42\u53cd\u3002</p> <p></p>"},{"location":"cs/CLDF/lec4/#basic-flip-flop-descriptors","title":"Basic Flip-Flop Descriptors","text":"<p>\u5bf9\u4e8e\u89e6\u53d1\u5668\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7684\u63cf\u8ff0\u65b9\u6cd5\u3002</p> <p>\u5728\u5206\u6790\u65f6\u5e8f\u7535\u8def\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u60f3\u77e5\u9053\u7535\u8def\u7684\u4f5c\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7279\u5f81\u8868\u548c\u7279\u5f81\u65b9\u7a0b\u6765\u63cf\u8ff0\uff0c\u5373\u901a\u8fc7\u5f53\u524d\u72b6\u6001\u548c\u8f93\u5165\u5f97\u5230\u6b21\u6001\u3002</p> <p>\u5728\u8bbe\u8ba1\u65f6\u5e8f\u7535\u8def\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u77e5\u7684\u662f\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u6bcf\u4e2a\u5f53\u524d\u72b6\u6001\u5bf9\u5e94\u7684\u6b21\u6001\uff0c\u6211\u4eec\u60f3\u901a\u8fc7\u4ed6\u4eec\u6765\u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b\uff0c\u56e0\u6b64\u4f7f\u7528\u6fc0\u52b1\u8868\u6765\u63cf\u8ff0\u3002</p> <p>Flip-Flop Descriptors</p> <p>D\u89e6\u53d1\u5668</p> <p></p> <p>SR\u89e6\u53d1\u5668</p> <p></p> <p>T\u89e6\u53d1\u5668</p> <p></p> <p>JK\u89e6\u53d1\u5668</p> <p></p>"},{"location":"cs/CLDF/lec5/","title":"Digital Hardware Implementation","text":"<p> \u7ea6 529 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/CLDF/lec5/#programmable-implementation-technologies","title":"Programmable Implementation Technologies","text":""},{"location":"cs/CLDF/lec5/#programmable-configurations","title":"Programmable Configurations","text":"<ul> <li>\u53ea\u8bfb\u5b58\u50a8\u5668(Read Only Memory ROM): \u7531\u4e00\u4e2a\u56fa\u5b9a\u7684\u4e0e\u9635\u5217\u548c\u4e00\u4e2a\u53ef\u7f16\u7a0b\u7684\u6216\u9635\u5217\u6784\u6210\u3002</li> <li>Programmable Array Logic(PAL): \u53ef\u7f16\u7a0b\u4e0e\u9635\u5217\u548c\u56fa\u5b9a\u7684\u6216\u9635\u5217\u3002</li> <li>Programmable Logic Array(PLA): \u4e0e\u9635\u5217\u548c\u6216\u9635\u5217\u90fd\u53ef\u4ee5\u7f16\u7a0b\u3002</li> </ul>"},{"location":"cs/CLDF/lec5/#read-only-memory","title":"Read Only Memory","text":"<p>ROM\u5305\u542b\\(n\\)\u4f4d\u6570\u636e\u8f93\u5165\uff0c\\(m\\)\u4f4d\u6570\u636e\u8f93\u51fa\u3002\u6211\u4eec\u5c06\\(n\\)\u4f4d\u6570\u636e\u8f93\u5165\u5230\u8bd1\u7801\u5668\u4e0a\uff0c\u5f97\u5230\\(2^n\\)\u4e2a\u6700\u5c0f\u9879\u3002\u901a\u8fc7\\(m\\)\u4e2a\u6216\u95e8\u7684\u7f16\u7a0b\u9009\u62e9\u5176\u4e0e\u6700\u5c0f\u9879\u7684\u8fde\u63a5\u5173\u7cfb\u3002</p> <p></p> <p>\u8981\u6ce8\u610f\u6216\u95e8\u7684\u753b\u6cd5\uff0c\u6bcf\u4e2a\u6216\u95e8\u53ea\u6709\u4e00\u6839\u7ebf\uff0c\u4f46\u662f\u8fd9\u6839\u7ebf\u4e0e\u8bd1\u7801\u5668\u8f93\u51fa\u7684\u6700\u5c0f\u9879\u90fd\u53ef\u4ee5\u8fdb\u884c\u8fde\u63a5\uff0c\u4e0e\u8c01\u8fde\u63a5\u901a\u8fc7\u7f16\u7a0b\u5b9e\u73b0\uff0c\u5728\u56fe\u4e0a\uff0c\u9009\u62e9\u8fde\u63a5\u7684\u7528\u53c9\u8868\u793a\u3002</p> <p>\u7531\u7b2c\u4e09\u7ae0\u7684\u77e5\u8bc6\u53ef\u77e5\uff0cROM\u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\u3002</p>"},{"location":"cs/CLDF/lec5/#pal","title":"PAL","text":"<p>\u7f3a\u70b9\uff1a \u7531\u4e8e\u6216\u95e8\u6709\u9650\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u50cfROM\u4e00\u6837\u5b9e\u73b0\u4efb\u4f55\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\u3002</p> <p>\u4f18\u70b9\uff1a</p> <ul> <li>\u5728\u76f8\u540c\u7684\u82af\u7247\u9762\u79ef\u4e0b\uff0cPAL\u53ef\u4ee5\u62e5\u6709\u66f4\u591a\u7684\u8f93\u5165\u8f93\u51fa\u5f15\u811a\u6570\u91cf\uff0c\u5373\u63d0\u9ad8\u82af\u7247\u5229\u7528\u7387\u3002</li> <li>\u53ef\u4ee5\u5b9e\u73b0\u591a\u7ea7\u7535\u8def\u4f18\u5316\u3002</li> </ul> <p></p> <p>\u5728PAL\u4e2d\uff0c\u6bcf\u4e2a\u6216\u95e8\u7684\u8f93\u5165\u5f15\u811a\u662f\u56fa\u5b9a\u7684\uff0c\u6bcf\u4e2a\u5f15\u811a\u8fde\u63a5\u4e00\u4e2a\u591a\u8f93\u5165\u7684\u4e0e\u95e8(\u53ef\u7f16\u7a0b)\u3002</p> <p>\u53ef\u4ee5\u6ce8\u610f\u5230\u4e0a\u56fe\u7684\u7535\u8def\u4e2d\uff0c\u6211\u4eec\u628a\\(F_1\\)\u8f93\u51fa\u7684\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u53c8\u9001\u56de\u5230\u4e0e\u9635\u5217\u4e2d\uff0c\u901a\u8fc7\\(F_2,F_3,F_4\\)\u8f93\u51fa\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u591a\u7ea7\u4f18\u5316\u3002</p>"},{"location":"cs/CLDF/lec5/#pla","title":"PLA","text":"<p>\u4f18\u70b9\uff1a\u5b9e\u73b0\u6210\u672c\u66f4\u4f4e\u3002</p> <p>\u7f3a\u70b9\uff1a\u4e0d\u80fd\u5b9e\u73b0\u4efb\u4f55\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\u3002\u65e0\u6cd5\u5b9e\u73b0\u591a\u7ea7\u4f18\u5316\u3002</p> <p></p> <p>\u89c2\u5bdf\u4e0a\u8ff0\u7535\u8def\uff0c\u4e0e\u9635\u5217\u548c\u6216\u9635\u5217\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0eROM,PAL\u4e2d\u76f8\u540c\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8f93\u51fa\u7aef\u6709\u4e24\u4e2a\u5f02\u6216\u95e8\uff0c\u6bcf\u4e2a\u95e8\u7684\u5f15\u811a\u4e4b\u4e00\u4e0e\u4e00\u4e2a0-1\u77e9\u9635\u76f8\u8fde\u3002\u8be5\u5f02\u6216\u95e8\u5b9e\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u7684\u529f\u80fd\u3002</p> <p>PLA\u4e2d\u6700\u7a00\u7f3a\u7684\u662f\u4e0e\u95e8\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u8981\u8003\u8651\u4e0e\u95e8\u7684\u91cd\u7528\uff0c\u53ef\u4ee5\u5728\u5361\u8bfa\u56fe\u5316\u7b80\u7684\u65f6\u5019\u8003\u8651\u903b\u8f91\u51fd\u6570\u4e0e\u903b\u8f91\u51fd\u6570\u7684\u53cd\u51fd\u6570\u3002</p>"},{"location":"cs/CLDF/lec6/","title":"Registers and Register Transfers","text":"<p> \u7ea6 3065 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 10 \u5206\u949f</p>"},{"location":"cs/CLDF/lec6/#registers-microoperations-and-implementations","title":"Registers, Microoperations and Implementations","text":""},{"location":"cs/CLDF/lec6/#registers-and-load-enable","title":"Registers and load enable","text":"<p>\u5bc4\u5b58\u5668\u662f\u4e00\u7cfb\u5217\u4e8c\u8fdb\u5236\u5b58\u50a8\u5355\u5143\u7684\u96c6\u5408\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u65f6\u5e8f\u7535\u8def\u4e2d\u7684\u5b58\u50a8\u5143\u4ef6\u62bd\u8c61\u6210\u5bc4\u5b58\u5668\u3002</p> <p>\u4f46\u662f\u5728\u8ba1\u7b97\u673a\u8bbe\u8ba1\u4e2d\uff0c\u7531\u4e8e\u4f4d\u6570\u5f88\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e4b\u524d\u65f6\u5e8f\u7535\u8def\u7684\u601d\u60f3\uff0c\u753b\u72b6\u6001\u8868\u72b6\u6001\u56fe\uff0c\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u56e0\u6b64\u6709\u4ee5\u4e0b\u4e24\u79cd\u8bbe\u8ba1\u601d\u8def\uff1a</p> <ul> <li>\u5c06\u6574\u4e2a\u8ba1\u7b97\u673a\u7535\u8def\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u5b58\u50a8\u5143\u4ef6\uff0c\u4e00\u4e2a\u662f\u7ec4\u5408\u7535\u8def\u90e8\u5206\u3002\u7ec4\u5408\u7535\u8def\u53bb\u5b8c\u6210\u5b58\u50a8\u5143\u4ef6\u8f93\u51fa\u4e0e\u6b21\u6001\u548c\u5f53\u524d\u8f93\u5165\u7684\u5173\u7cfb\u3002</li> <li>\u8bbe\u8ba1\u51fa\u5355\u4f4d\u7535\u8def\uff0c\u7ec4\u5408\u6210\u591a\u4f4d\u7535\u8def\u3002</li> </ul> <p>\u5bc4\u5b58\u5668\u6700\u57fa\u672c\u7684\u529f\u80fd\u5c31\u662f\u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\u3002\u56e0\u6b64\u5bc4\u5b58\u5668\u8d77\u7801\u9700\u8981\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u5b58\u50a8\uff0c\u4f7f\u80fd\u52a0\u8f7d\u65b0\u6570\u636e\u3002</p> <p>\u5bf9\u4e8e\u5b58\u50a8\uff0c\u5bc4\u5b58\u5668\u9700\u8981\u505a\u5230\u4fdd\u5b58\u591a\u4e2a\u65f6\u949f\u5468\u671f\u7684\u6570\u636e\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u65f6\u5e8f\u7535\u8def\u4e2d\u6700\u5e38\u7528\u7684\u662fD\u89e6\u53d1\u5668\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u80fd\u5426\u7528D\u89e6\u53d1\u5668\u6765\u5b9e\u73b0\u5bc4\u5b58\u5668\u7684\u529f\u80fd\uff1f</p> <p>D\u89e6\u53d1\u5668\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u90fd\u4f1a\u6839\u636e\u8f93\u5165\u66f4\u65b0\u6570\u636e\uff0c\u56e0\u6b64\u4e0d\u7b26\u5408\u5b58\u50a8\u591a\u4e2a\u65f6\u949f\u5468\u671f\u6570\u636e\u7684\u9700\u6c42\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4fee\u6539D\u89e6\u53d1\u5668\u7684\u7535\u8def\u3002</p> <p>\u6709\u51e0\u79cd\u601d\u8def\uff1a</p> <ul> <li>\u628a\u65f6\u949fblock\u6389\u3002</li> <li>\u4f7f\u7528SR\u6216\u8005JK\u89e6\u53d1\u5668\u8fd9\u4e9b\u5177\u6709\u4fdd\u6301\u529f\u80fd\u7684\u89e6\u53d1\u5668\u3002(\u672c\u8d28\u4e0a\u662f\u5c06\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u8fd4\u56de\u5230\u8f93\u5165\u4e0a)</li> </ul> <p>Load\u4fe1\u53f7\uff1a\u5f53Load\u4e3a1\u65f6\u4ee3\u8868\u5bc4\u5b58\u5668\u9700\u8981\u63a5\u6536\u65b0\u6570\u636e\uff0c\u4e3a0\u4ee3\u8868\u4fdd\u5b58\u3002\u6709\u65f6\u5019\u4f1a\u7528\\(\\overline{Load}\\)\u8868\u793a\u3002</p> <p></p> <p>\u5bf9\u4e8e\u7535\u8def\u7684\u642d\u5efa\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u8bbe\u7f6e\u65b0\u7684clock=\\(clock+\\overline{Load}\\)\u3002</p> <p>\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u7535\u8def(\u5728\u65f6\u949f\u4e0a\u52a0\u4e00\u4e2a\u6216\u95e8)\uff0c\u6216\u95e8\u4ea7\u751f\u4e86\u65f6\u949f\u5ef6\u8fdf\uff0c\u8fd9\u6837\u5c31\u51fa\u73b0\u4e86\u65f6\u949f\u4fe1\u53f7\u4e0d\u540c\u6b65\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u540c\u6b65\u65f6\u5e8f\u7535\u8def\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u5e0c\u671b\u51fa\u73b0\u7684\u3002</p> <p>\u6240\u4ee5\u66f4\u5b9e\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u9009\u62e9\u5668\uff0c\u5c06\u5f53\u524d\u5bc4\u5b58\u5668\u8f93\u51fa\u8fd4\u56de\u5230\u8f93\u5165\u7aef\uff0c\u901a\u8fc7Load\u4fe1\u53f7\u9009\u62e9\u672c\u4f4d\u8f93\u5165(\u66f4\u65b0)\u6216\u662f\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c(\u4fdd\u6301)\u3002</p> <p></p>"},{"location":"cs/CLDF/lec6/#register-transfer-operations","title":"Register Transfer Operations","text":"<p>\u5bc4\u5b58\u5668\u63a5\u6536\u65b0\u6570\u636e\u672c\u8d28\u5c71\u5c31\u662f\u5bc4\u5b58\u5668\u4f20\u8f93\uff0c\u628a\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7ecf\u8fc7\u8ba1\u7b97\u540e\u4f20\u8f93\u7ed9\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002</p> <p>\u51e0\u4e2a\u57fa\u672c\u7684\u90e8\u5206\uff1a</p> <ul> <li> <p>\u591a\u4e2a\u5bc4\u5b58\u5668(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u7684\u5bc4\u5b58\u5668)</p> </li> <li> <p>\u4f20\u8f93\u65b9\u5411+\u8ba1\u7b97(operations\uff1aload,count,shift,add,or,etc.\u79f0\u4f5cmicrooperations), \u901a\u5e38\u7528\u7ec4\u5408\u903b\u8f91\u7535\u8def\u5b9e\u73b0\u3002</p> </li> <li> <p>\u63a7\u5236\u6761\u4ef6\uff1a\u4ec0\u4e48\u65f6\u5019\u8981\u505a\u5565\u8fd0\u7b97\uff0c\u4f20\u7ed9\u8c01\u3002</p> </li> </ul>"},{"location":"cs/CLDF/lec6/#register-notation","title":"Register Notation","text":"<p>\u5176\u4e2d\\(M[AR]\\)\u4e2d[]\u4ee3\u8868\u5bfb\u5740\u3002\u5c31\u50cfC\u8bed\u8a00\u4e2d\u7684<code>*</code>\u3002\u5176\u4e2dPC(Program Counter)\uff0c\u662f\u5f53\u524d\u6267\u884c\u6307\u4ee4\u7684\u5185\u5b58\u4f4d\u7f6e\u3002</p>"},{"location":"cs/CLDF/lec6/#conditional-transfer","title":"Conditional Transfer","text":"<p>\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a</p> <ul> <li> <p>\u5bf9\u4e8e\\(R_2\\)\u5bc4\u5b58\u5668\uff0c\u8f93\u5165\u7aef\u662f\u4e00\u76f4\u6709\u4fe1\u53f7\u7684(\u6570\u636e\u662f\u4e00\u76f4\u51c6\u5907\u597d\u7684)\uff0c\u4f46\u662f\u6ca1\u6709\\(Load\\)\u4fe1\u53f7\u662f\u4e0d\u4f1a\u63a5\u53d7\u7684\u3002Load\u4fe1\u53f7\u63a7\u5236\u7684\u662f\u662f\u5426\u63a5\u53d7\uff0c\u800c\u4e0d\u662f\u662f\u5426\u4f20\u9012\u3002</p> </li> <li> <p>\u5e76\u4e0d\u662fLoad\u4e00\u53d8\u4e3a1\uff0cR2\u5c31\u5f00\u59cb\u63a5\u6536\u65b0\u6570\u636e\u7684\u3002R2\u5185\u90e8\u672c\u8d28\u662f\u4e2a\u89e6\u53d1\u5668\uff0c\u63a5\u53d7\u65b0\u6570\u636e\u4e5f\u8981\u7b49\u5230\u65f6\u949f\u7684\u4e0a\u5347\u6cbf\u3002</p> </li> </ul>"},{"location":"cs/CLDF/lec6/#control-expressions","title":"Control Expressions","text":""},{"location":"cs/CLDF/lec6/#microoperations-arithmeticlogicand-shift","title":"Microoperations - arithmetic,logic,and shift","text":"<p>\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u70b9\uff0c\u5728\u5192\u53f7\u5de6\u8fb9\u7684\u52a0\u53f7\u4ee3\u8868\u903b\u8f91\u6216;\u5728\u5192\u53f7\u53f3\u8fb9\u7684\u52a0\u53f7\u4ee3\u8868\u7b97\u672f\u52a0\u3002</p>"},{"location":"cs/CLDF/lec6/#arithmetic-microoperations","title":"Arithmetic Microoperations","text":""},{"location":"cs/CLDF/lec6/#logical-microoperations","title":"Logical Microoperations","text":""},{"location":"cs/CLDF/lec6/#shift-microoperations","title":"Shift Microoperations","text":""},{"location":"cs/CLDF/lec6/#register-transfer-structures","title":"Register Transfer Structures","text":""},{"location":"cs/CLDF/lec6/#multiplexer-based-transfers","title":"Multiplexer-Based Transfers","text":"<p>\u5f53\\(K_1\\)\u6ee1\u8db3\u65f6\uff0c\u7528\\(R_1\\)\u66f4\u65b0\\(R_0\\) \u5f53\\(K_2\\overline{K_1}\\)\u6ee1\u8db3\u65f6\uff0c\u7528\\(R_2\\)\u66f4\u65b0\u3002</p> <p></p> <p></p> <p>\u5bf9\u4e8e\u66f4\u4e00\u822c\u7684\u4f7f\u7528\u591a\u8def\u590d\u7528\u5668\u8fdb\u884c\u5bc4\u5b58\u5668\u4f20\u8f93\u7684\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5176\u4e2d\u9009\u62e9\u63a7\u5236\u7aef\u505a\u4e86\u4e2a\u7f16\u7801\u5668\uff0c\\(n\\)\u4f4d\u63a7\u5236\u4fe1\u53f7\u5b9e\u73b0\\(m\\)\u4f4d\u9009\u62e9\u63a7\u5236\u7aef\u3002</p>"},{"location":"cs/CLDF/lec6/#register-cell-design","title":"Register Cell Design","text":"<p>\u505a\u5355\u4f4d\u7684\u8bbe\u8ba1\uff0c\u6700\u540e\u8fdb\u884c\u62fc\u63a5(\u6ce8\u610f\u8003\u8651\u8fb9\u754c\u6761\u4ef6)\u3002</p> <p>Specifications</p> <p></p> <p></p>"},{"location":"cs/CLDF/lec6/#multiplexer-and-bus-based-transfers-for-multiple-registers","title":"Multiplexer and Bus-Based Transfers for Multiple Registers","text":"<p>\u73b0\u5728\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0b\u4f7f\u7528\u591a\u8def\u590d\u7528\u5668\u7684\u5bc4\u5b58\u5668\u4f20\u8f93\u67b6\u6784\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u5bc4\u5b58\u5668\u524d\u90fd\u52a0\u4e00\u4e2a\u9009\u62e9\u5668\uff0c\\(n\\)\u4e2a\u5bc4\u5b58\u5668\uff0c\u5bf9\u5e94\u7684\u5c31\u662f\\(n-1\\)\u90091\u591a\u8def\u9009\u62e9\u5668\u3002\u8be5\u7535\u8def\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u76f8\u4e92\u4f20\u8f93\u3002</p> <p>\u6ce8\u610f\u5230\u8be5\u7535\u8def\u53ef\u4ee5\u5b9e\u73b0\u4e24\u4e2a\u5bc4\u5b58\u5668\u503c\u7684\u76f8\u4e92\u4ea4\u6362\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8981\u4ea4\u6362\\(R_0,R_1\\)\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002\u6211\u4eec\u5c06\\(S_0\\)\u7f6e\u4e3a0\uff0c\u5219\u7b2c\u4e00\u4e2a\u590d\u7528\u5668\u9009\u62e9\\(R_1\\)\u7684\u8f93\u51fa\u4fe1\u53f7\uff0c\u540c\u7406\u5c06\\(S_1\\)\u7f6e\u4e3a0\uff0c\u9009\u62e9\\(R_0\\)\u7684\u8f93\u51fa\u4fe1\u53f7\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u540c\u65f6\u5c06\\(L_0,L_1\\)\u7f6e\u4e3a1\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u76f8\u4e92\u4f20\u8f93\u3002</p> <p>\u8fd9\u65f6\u5019\u5c31\u4ea7\u751f\u4e00\u4e2a\u95ee\u9898\uff1a\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u4e00\u5b9a\u662f\u901a\u8fc7\u7b2c\u4e09\u4e2a\u53d8\u91cf(tmp)\u8fdb\u884c\u4ea4\u6362\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u7535\u8def\u4e2d\u5141\u8bb8\u540c\u65f6\u4ea4\u6362\uff0c\u5373\u5728\u786c\u4ef6\u5c42\u9762\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u5b9e\u9645\u4e0a\u4e0d\u652f\u6301\u8fd9\u6837\u7684\u6307\u4ee4\u5462\uff1f</p> <p>\u539f\u56e0\u5c31\u5728\u4e8e\u6210\u672c\u3002\u8be5\u7535\u8def\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u524d\u90fd\u6709\u4e00\u4e2a\u591a\u8def\u590d\u7528\u5668\uff0c\u95e8\u8f93\u5165\u6210\u672c\u592a\u5927\u4e86\u3002\u800c\u8ba1\u7b97\u673a\u4e2d\u5b58\u5728\u975e\u5e38\u591a\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u4f7f\u7528\u8be5\u79cd\u7535\u8def\u90a3\u4e48\u5f00\u9500\u4e0d\u53ef\u60f3\u8c61\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u7b80\u5316\u7535\u8def\uff0c\u4ee3\u4ef7\u5c31\u662f\u5bc4\u5b58\u5668\u4f20\u8f93\u7684\u9650\u5236\u3002</p> <p>Multiplexer Bus</p> <p></p> <p>\u6211\u4eec\u4f7f\u7528\u4e86\u516c\u7528\u7684\u591a\u8def\u590d\u7528\u5668\uff0c\u9009\u62e9\u6e90\u5bc4\u5b58\u5668\uff0c\u5c06\u5b83\u7684\u7ed3\u679c\u901a\u8fc7\u9009\u62e9\u5668\u5f97\u5230(\u5373\u603b\u7ebf\u7684\u6570\u636e)\uff0c\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u60f3\u8981\u4f20\u8f93\uff0c\u5c31\u628a\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u7684load\u4fe1\u53f7\u7f6e\u4e3a1\u3002\u7531\u4e8e\u6211\u4eec\u53ea\u6709\u4e00\u6839\u603b\u7ebf\uff0c\u6240\u4ee5\u4e00\u6b21\u53ea\u80fd\u4f20\u8f93\u4e00\u4e2a\u6570\u636e\uff0c\u65e0\u6cd5\u505a\u5230\u4e24\u4e2a\u53d8\u91cf\u540c\u65f6\u4ea4\u6362\u3002</p> <p>Three-State Bus</p> <p></p> <p>\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528\u4e09\u6001\u95e8\u3002\u56de\u5fc6\u4e00\u4e0b\u4e09\u6001\u95e8\uff0c\u8f93\u51fa\u6709\u4e09\u79cd\u72b6\u6001\uff1a0\uff0c1\uff0c\u9ad8\u963b\u6001\u3002\u5f53\u8f93\u51fa\u4e3a\u9ad8\u963b\u6001\u65f6\u76f8\u5f53\u4e8e\u7535\u8def\u65ad\u5f00\u3002\u901a\u8fc7\u4f7f\u80fd\u4fe1\u53f7\u6765\u63a7\u5236\u4e09\u6001\u95e8\u662f\u5426\u63a5\u5165\u7535\u8def\u3002</p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5c06\u4e09\u4e2a\u5bc4\u5b58\u5668\u8f93\u51fa\u63a5\u5230\u540c\u4e00\u4e2a\u603b\u7ebf\u4e0a\uff0c\u4f8b\u5982\u6211\u4eec\u8981\u628a\\(R_0\\)\u4f20\u7ed9\\(R_1\\)\uff0c\u6211\u4eec\u53ea\u9700\u5c06\\(E_0\\)\u4f7f\u80fd\uff0c\u5e76\u5c06\\(L_1\\)\u4fe1\u53f7\u62c9\u9ad8\u5373\u53ef\u5b9e\u73b0\u3002</p> <p>\u8be5\u7535\u8def\u9664\u4e86\u51cf\u5c11\u6210\u672c\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4f18\u70b9\uff1a\u5047\u8bbe\u6211\u4eec\u5c06\u8be5\u7535\u8def\u5c01\u88c5\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u4e00\u4e2a\u6570\u636e\u5f15\u811a\uff0c\u56e0\u6b64\u603b\u5171\u53ea\u6709\\(n\\)\u4e2a\u6570\u636e\u5f15\u811a(\u6bcf\u4e2a\u5f15\u811a\u5bf9\u5e94\u7740\u53cc\u5411\u7684\u6570\u636ein,out)\u3002\u5728\u6211\u4eec\u505a\u677f\u6781\u8bbe\u8ba1\u65f6(\u5373\u8bbe\u8ba1\u6210\u82af\u7247)\uff0c\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u82af\u7247\u9762\u79ef\u3002</p>"},{"location":"cs/CLDF/lec6/#shift-registers","title":"Shift Registers","text":"<p>\u4e0b\u56fe\u6240\u793a\u7684\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u53f3\u79fb\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002</p> <p></p> <p>Question</p> <p>\u79fb\u4f4d\u5bc4\u5b58\u5668\u53ea\u80fd\u4f7f\u7528\u89e6\u53d1\u5668\uff0c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\u3002</p> <p></p> <p>\u79fb\u4f4d\u5bc4\u5b58\u5668\u5e38\u7528\u7684\u529f\u80fd\u662f\u5e76\u884c\u52a0\u8f7d\u6570\u636e(\u5373\u8bbe\u7f6e\u521d\u503c)\uff0c\u6700\u57fa\u672c\u7684\u601d\u8def\u662f\u5728\u6bcf\u4e2a\u89e6\u53d1\u5668\u4e4b\u524d\u653e\u4e00\u4e2a\u591a\u8def\u590d\u7528\u5668\uff0c\u901a\u8fc7\u63a7\u5236\u4fe1\u53f7\u9009\u62e9\u79fb\u4f4d\u6216\u662f\u52a0\u8f7d\u5916\u90e8\u6570\u636e\u3002\u5728\u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\uff0c<code>Shift</code>\u4e3a0\uff0c\u5219\u9009\u62e9\u5916\u90e8\u8f93\u5165\uff0c\u5426\u5219\u8fdb\u884c\u53f3\u79fb\u3002</p> <p></p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u9009\u4e00\u9009\u62e9\u5668\uff0c\u589e\u52a0\u4e00\u4e2aHold\u9009\u9879\uff0c\u5b9e\u73b0\u6570\u636e\u4fdd\u6301\u4e0d\u53d8\u7684\u529f\u80fd\u3002\u82e5<code>Shift</code>\u4e3a1\uff0c\u6b64\u65f6Load\u4fe1\u53f7\u5bf9\u5e94\u7684\u95e8\u88ab\u7981\u6b62\uff0c\u8fdb\u884c\u79fb\u4f4d\uff1b\u82e5<code>Shift</code>\u4e3a0\uff0c\u79fb\u4f4d\u76f8\u5173\u7684\u4e0e\u95e8\u88ab\u7981\u6b62\uff0c<code>Load</code>\u4fe1\u53f7\u63a7\u5236\u7684\u95e8\u88ab\u4f7f\u80fd\u3002\u6b64\u65f6\u6839\u636e<code>Load</code>\u4e3a0\u62161\u6765\u51b3\u5b9a\u7535\u8def\u662fHold\u8fd8\u662f\u5916\u90e8\u52a0\u8f7d\u3002</p> <p></p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u5177\u6709\u9009\u62e9Load,Hold\u529f\u80fd\u7684\u53cc\u5411\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u539f\u7406\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002</p>"},{"location":"cs/CLDF/lec6/#counters-register-cells-buses-serial-operations","title":"Counters, register cells, buses, serial operations","text":""},{"location":"cs/CLDF/lec6/#counters","title":"Counters","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\\(n\\)\u4f4d\u7684\u5e8f\u5217\uff0c\u8ba1\u6570\u5668\u53ef\u4ee5\u5b9e\u73b0\u5faa\u73af\u7684\u8ba1\u6570\u3002\u6700\u7b80\u5355\u7684\u8ba1\u6570\u5668\u662f\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u683c\u96f7\u7801\u8ba1\u6570\u5668\u7b49\u3002</p>"},{"location":"cs/CLDF/lec6/#ripple-counter","title":"Ripple Counter","text":"<p>(\u7eb9\u6ce2\u8ba1\u6570\u5668)</p> <p></p> <p>\u7eb9\u6ce2\u8ba1\u6570\u5668\u7684\u7535\u8def\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5c06\u672c\u4f4d\u7684\u53cd\u5411\u8f93\u51fa\u63d0\u4f9b\u5230\u672c\u4f4d\u7684\u8f93\u5165\u4e0a\uff0c\u5373\u6bcf\u4e2a\u5468\u671f\u53d6\u4e00\u6b21\u53cd\u3002\u8fd9\u6837\u5b50\u53ef\u4ee5\u4f7f\u672c\u4f4d\u7684\u8f93\u51fa\u662f\u65f6\u949f\u9891\u7387\u7684\u4e00\u534a\uff0c\u5b9e\u73b0\u4e8c\u5206\u9891\u7684\u529f\u80fd\u3002</p> <p>\u5728\u7406\u89e3\u4e86\u4e8c\u5206\u9891\u4e4b\u540e\uff0c\u6211\u4eec\u5c06A\u7684\u8f93\u51fa\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u8f93\u5165\uff0c\u5e76\u5c06B\u7684\u53cd\u5411\u8f93\u51fa\u4f5c\u4e3aB\u7684\u8f93\u5165\uff0c\u8fd9\u6837\u5c31\u53c8\u5b9e\u73b0\u4e86\u4e8c\u5206\u9891\u3002</p> <p></p> <p>\u4ed4\u7ec6\u89c2\u5bdf\u6ce2\u5f62\u56fe\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728B\u7684\u4e00\u4e2a\u5468\u671f\u5185\uff0cAB\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4ece00\uff0c01\uff0c10\uff0c11\u7684\u8ba1\u6570\u5668\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u8fd9\u79cd\u65b9\u6cd5\u8bbe\u8ba1\\(n\\)\u4f4d\u8ba1\u6570\u5668\uff0c\u5e76\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86\u65f6\u949f\u4e8c\u5206\u9891\u7684\u529f\u80fd\u3002</p> <p>\u4f46\u662f\u7eb9\u6ce2\u8ba1\u6570\u5668\u4e0d\u662f\u540c\u6b65\u7684\uff0c\u65f6\u949f\u4fe1\u53f7\u7684\u6539\u53d8\u5e76\u4e0d\u7edf\u4e00\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u4f8b\u5b50\u6765\u770b\u5230\u8be5\u95ee\u9898\u7684\u5f71\u54cd\u3002</p> <p></p> <p>\u6211\u4eec\u8003\u86510-7\u7684\u8ba1\u6570\u5668\uff0c\u5f53\u8ba1\u6570\u5668\u4e3a111\u65f6\uff0c\u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u4e0d\u4f1a\u76f4\u63a5\u4ece7\u53d8\u4e3a0\uff0c\u800c\u662f\u7ecf\u5386\u4e867-6-4-0\u7684\u9519\u8bef\u6570\u636e\u3002</p> <p>\u8fd9\u4e2a\u7535\u8def\u7684\u53ef\u53d6\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u9ad8\u4f4d\u7684\u89e6\u53d1\u5668\u662f\u4e0d\u592a\u5bb9\u6613\u88ab\u89e6\u53d1\u7684\uff0c\u56e0\u6b64\u964d\u4f4e\u4e86\u7535\u8def\u7684\u529f\u8017\u3002</p>"},{"location":"cs/CLDF/lec6/#synchronous-counters","title":"Synchronous Counters","text":"<p>\u540c\u6b65\u8ba1\u6570\u5668\u7531\u4e00\u4e2aD\u89e6\u53d1\u5668\u548c\u4e00\u4e2a\u81ea\u589e\u5668\u6784\u6210\u3002</p> <p></p> <p>\u5373\u5c06\u672c\u4f4d\u8f93\u51fa\u7ecf\u8fc7\u81ea\u589e\u5668\u52a0\u4e00\u540e\u7ed9\u5230\u672c\u4f4d\u8f93\u5165\u3002</p> <p>\u5bf9\u4e8e\u81ea\u589e\u5668\u7684\u8bbe\u8ba1\uff0c\u89c2\u5bdf\u771f\u503c\u8868\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b(\u9ad8\u4f4d\u53d8\u6362\u7684\u6761\u4ef6)\uff1a</p> <p></p> <p>\u5373\u5f53\u4f4e\u4f4d\u5168\u90e8\u4e3a1\u65f6\uff0c\u9ad8\u4f4d\u6c42\u53cd\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u7535\u8def\u5b9e\u73b0\uff1a</p> <p></p> <p>\u5f02\u6216\u95e8\u4e00\u7aef\u63a5\u5230\u672c\u4f4d\uff0c\u82e5\u7b26\u5408\u6761\u4ef6\u5219\u6c42\u53cd\u3002\u53ef\u63a7\u6761\u4ef6\u6211\u4eec\u4f7f\u7528\u4e86\u4e0e\u95e8\u94fe\uff0c\u4f9d\u6b21\u5c06\u4f4e\u4f4d\u6570\u636e\u6c42\u4e0e\uff0c\u82e5\u5168\u4e3a1\u5219\u5f02\u6216\u95e8\u6c42\u53cd\uff0c\u5426\u5219\u5f02\u6216\u95e8\u7684\u7ed3\u679c\u5c31\u662f\u672c\u4f4d\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\u8be5\u7535\u8def\u7684\u7f3a\u70b9\u5c31\u662f\u4e0e\u95e8\u94fe\u7684\u5ef6\u8fdf\uff0c\u89e3\u51b3\u65b9\u6848\u7684\u601d\u8def\u4e0e\u7b2c\u4e09\u7ae0\u7684\u52a0\u6cd5\u5668\u7c7b\u4f3c\uff0clook ahead,\u628a\u6240\u6709\u7684\u4f4e\u4f4d\u4fe1\u53f7\u5168\u90e8\u62c9\u5230\u672c\u4f4d\uff0c\u4f7f\u7528\u591a\u8f93\u5165\u4e0e\u95e8\u3002</p> <p></p> <p>\u5176\u4e2d<code>CO</code>carry out\u662f\u8fdb\u4f4d\u4fe1\u53f7,\u5f53\u4f4e\u4f4d\u5168\u4e3a1\u65f6<code>CO</code>\u4e3a1\u3002 \u8fd9\u4e2a\u8fdb\u4f4d\u4fe1\u53f7\u7684\u4f5c\u7528\u5c31\u5728\u4e8e\u8ba1\u6570\u5668\u7684\u7ea7\u8054\uff0c\u6211\u4eec\u5c06\u8be54\u4f4d\u8ba1\u6570\u5668\u7684\u8fdb\u4f4d\u4fe1\u53f7\u8fde\u5230\u53e6\u4e00\u4e2a\u8ba1\u6570\u5668(\u9ad8\u4f4d)\u7684\u4f7f\u80fd\u4fe1\u53f7\uff0c\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u9ad8\u4f4d\u5f00\u59cb\u8ba1\u6570\uff0c\u4f4e\u4f4d\u5168\u90e8\u53d8\u56de0\u3002</p> <p></p> <p>\u5e76\u884c\u52a0\u8f7d\u7684\u8ba1\u6570\u5668\u3002\u601d\u8def\u4e0e\u4e4b\u524d\u5bc4\u5b58\u5668\u4f20\u8f93\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u3002</p>"},{"location":"cs/CLDF/lec6/#counting-modulo-n","title":"Counting Modulo N","text":"<p>\u9664\u4e86\u91c7\u7528\u65f6\u5e8f\u7535\u8def\u7684\u65b9\u6cd5\u5916(\u7b2c\u56db\u7ae0)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u6765\u5b9e\u73b0\u6a21n\u8ba1\u6570\u5668\u3002\u65b9\u6cd5\u5c31\u662f\u5728\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u5230\u8fbe\\(N-1\\)\u65f6\u5bf9\u8ba1\u6570\u5668\u8fdb\u884c\u6e05\u96f6\u3002</p> <p>\u800cClear\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662fch4\u4ecb\u7ecd\u7684direct input Reset\uff0c\u8fd9\u79cd\u6e05\u96f6\u662f\u5f02\u6b65\u7684\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u540c\u6b65\u7684\uff0c\u5f53clear\u4fe1\u53f7\u6709\u6548\u65f6\uff0c\u4e0d\u4f1a\u7acb\u9a6c\u6e05\u96f6\uff0c\u800c\u662f\u7b49\u5230\u4e0b\u4e00\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u540c\u65f6\u6e05\u96f6\u3002</p> <p>Counting Modulo 7</p> <ul> <li>\u5f02\u6b65\u6e05\u96f6\u65b9\u6cd5\uff1a</li> </ul> <p></p> <p>\u5982\u56fe\u6240\u793a\uff0c\u5f53\u8ba1\u6570\u5668\u8f93\u51fa\u4e3a7\u65f6\uff0c\u7acb\u5373clear\uff0c\u7535\u8def\u7684\u8f93\u51fa\u4f1a\u6709\u5f88\u77ed\u65f6\u95f4\u76847\u51fa\u73b0\u3002</p> <ul> <li>\u540c\u6b65\u6e05\u96f6\u65b9\u6cd5\uff1a</li> </ul> <p></p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5728\u68c0\u6d4b\u52306\u65f6\uff0c\u4e0e\u95e8\u8f93\u51fa\u7ed3\u679c\u53d8\u4e3a1(\u5f88\u663e\u7136\u5f53\u8f93\u51fa\u4e3a0-5\u65f6\u4e0e\u95e8\u8f93\u51fa\u90fd\u4e3a0)\uff0c\u8be5\u4fe1\u53f7\u4f20\u9012\u5230Load\u7aef\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u52a0\u8f7d\uff0c\u800c\u662f\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u5230\u8fbe\u540e\uff0c\u52a0\u8f7d\u5916\u90e8\u4fe1\u53f70000\uff0c\u5b9e\u73b0\u4e86\u5e76\u884c\u52a0\u8f7d\u7684\u540c\u6b65\u6e05\u96f6\u3002</p> <p></p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e2d\u95f4\u7ed3\u679c\u7684\u6a21N\u8ba1\u6570\u5668\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u590d\u4e60\u7684\u65f6\u5019\u53ef\u4ee5\u5206\u6790\u4e00\u4e0b\u8be5\u7535\u8def\u529f\u80fd\u3002</p>"},{"location":"cs/CLDF/lec6/#serial-transfers-and-microoperations","title":"Serial transfers and microoperations","text":"<p>\u4e32\u884c\u6bcf\u6b21\u8fd0\u7b97\u4e00\u4e2a\u4f4d\uff0c\u56e0\u6b64\u901f\u5ea6\u6bd4\u8f83\u5feb\u3002\u964d\u4f4e\u4e86\u7535\u8def\u590d\u6742\u5ea6\u3002</p> <p>Serial Adder</p> <p></p> <p>\u4e60\u9898</p> <ul> <li>Using two binary counters of the type shown in Figure 6-14 and logic gates, construct a binary counter that counts from decimal 11 through decimal 233. Also, add an additional input and logic to the counter to initialize it synchronously to 11 when the signal INIT is 1.</li> </ul> <p>\u9996\u5148\u9700\u8981\u6e05\u695abinary counter\u7684\u7ed3\u6784\u3002\u4e4b\u540e\u4f7f\u7528\u540c\u6b65\u6e05\u96f6\u65b9\u6cd5\u5373\u53ef\u5b9e\u73b0\u3002\u793a\u4f8b\u7535\u8def\u5982\u4e0b\uff1a</p> <p></p> <ul> <li>Two register transfer statements are given(otherwise, \\(R_1\\) is unchanged):</li> </ul> <p>\\(C_1:R_1\\leftarrow R_1+R_2\\) \\(\\overline{C_1}{C_2}:R_1\\leftarrow R_1+1\\)</p> <p>Using a 4-bit counter with parallel load as in Figure 6-14 and a 4-bit adder as in Figure 4-5, draw the logic diagram that implements these register transfers.</p> <p>Repeat part (a) using a 4-bit adder as in Figure 3-43 plus external gates as needed. Compare with the implementation in part (a).</p> <p></p>"},{"location":"cs/CLDF/lec7/","title":"Memory Basics","text":"<p> \u7ea6 2024 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p>"},{"location":"cs/CLDF/lec7/#memory-definitions","title":"Memory definitions","text":"<p>Memory(\u5185\u5b58)\u5c31\u662f\u5b58\u50a8\u6570\u636e\u7684\u4e00\u4e2a\u90e8\u4ef6\uff0c\u662f\u8ba1\u7b97\u673a\u4e2d\u5fc5\u4e0d\u53ef\u5c11\u7684\u90e8\u5206\u3002</p> <ul> <li> <p>Memory Organization: \u5185\u5b58\u7684\u57fa\u672c\u67b6\u6784\uff0c\u4f8b\u5982\u5185\u5b58\u80fd\u653e\u591a\u5c11\u6570\u636e\uff0c\u5305\u542b\u591a\u5c11\u5b57\uff0c\u4e00\u4e2a\u5b57\u591a\u5c11\u4f4d\u7b49\u3002</p> </li> <li> <p>Random Access Memory(RAM): \u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668\uff0cCPU\u53ef\u4ee5\u6307\u5b9a\u5185\u5b58\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5730\u5740\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4efb\u4f55\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u95f4\u662f\u76f8\u540c\u7684\u3002\u4e0e\u5176\u76f8\u5bf9\u5e94\u7684\u662f\u987a\u5e8f\u5b58\u50a8\u7684\u5b58\u50a8\u5668\uff0c\u8bbf\u95ee\u67d0\u4e00\u4e2a\u5355\u5143\u6570\u636e\u7684\u65f6\u95f4\u4e0e\u8be5\u5355\u4f4d\u7684\u4f4d\u7f6e\u6709\u5173\u3002</p> </li> <li> <p>Memory Address: \u5185\u5b58\u5730\u5740</p> </li> <li> <p>Typical data elements: bit, byte, word \u8ba1\u7b97\u673a\u662f\u4ee5\u4e8c\u8fdb\u5236\u5b58\u50a8\uff0c\u53d1\u9001\u63a5\u53d7\u6570\u636e\u7684\u3002bit\u7684\u542b\u4e49\u5c31\u662f\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684\u4e00\u4e2a\u6570\u4f4d\uff0c0\u62161\u3002</p> </li> </ul> <p>byte(\u5b57\u8282)\uff0c1byte=8bit.</p> <p>word: \u5728\u8ba1\u7b97\u673a\u4e2d\u6211\u4eec\u901a\u8fc7\u603b\u7ebf\u6765\u4f20\u8f93\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\uff0c\u8fd9\u5757\u6570\u636e\u88ab\u79f0\u4f5c\u5b57\uff0c\u4e00\u4e2a\u5b57\u5305\u542b\u7684\u5b57\u8282\u6570\u662f\u5404\u79cd\u8ba1\u7b97\u673a\u7cfb\u7edf\u91cc\u9762\u7684\u57fa\u672c\u53c2\u6570\uff0c\u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u91cc\u901a\u5e38\u4e0d\u540c\u3002\u4e00\u822c\u662f\u4e8c\u7684\u6574\u6570\u6b21\u5e42\u4e2a\u5b57\u8282\u5927\u5c0f(1byte,2bytes,8bytes,etc.)</p> <ul> <li>Memory Data: \u5185\u5b58\u91cc\u5b58\u7684\u6570\u636e</li> <li>Memory Operation: \u6700\u57fa\u672c\u7684\u5c31\u662f\u8bfb\u548c\u5199\u3002</li> </ul> <p></p> <p>\u4e0a\u56fe\u6240\u793a\u662f\u5178\u578b\u7684\u5185\u5b58\u8bbf\u95ee\u63a5\u53e3\u3002\u5176\u4e2d\\(k\\)\u6839\u5730\u5740\u7ebf\u7ecf\u8fc7\u8bd1\u7801\u5668\u5f97\u5230\\(2^k\\)\u4e2a\u5b57\u7684\u5730\u5740\u3002\u6bcf\u4e00\u4e2a\u5b57\u90fd\u662f\\(n\\)bit\u7684\u3002</p> <p>Memory Organization Example</p> <p></p> <p>\u4e0a\u8868\u6240\u793a\u7684\u662f\u4e00\u4e2a\\(8\\times 8\\)\u7684\u5185\u5b58\u7ed3\u6784\uff0c\u7b2c\u4e00\u4e2a8\u4ee3\u8868\u67098\u4e2a\u5b57\uff0c\u7b2c\u4e8c\u4e2a8\u4ee3\u8868\u6bcf\u4e2a\u5b57\u91cc\u9762\u67098\u4e2a\u4f4d\u3002</p>"},{"location":"cs/CLDF/lec7/#memory-operation-timing","title":"Memory Operation Timing","text":"<p>Memory Enbale\u4e3a1\u65f6\uff0c\u4ee3\u8868CPU\u5c06\u64cd\u4f5c\u8be5\u5185\u5b58\u3002 \u5f53\u6211\u4eec\u505aRead\u64cd\u4f5c\u65f6\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0cCPU\u9996\u5148\u5c06\u5730\u5740\u653e\u5230\u5730\u5740\u603b\u7ebf\u4e0a\uff0c\u518d\u5c06Memory Enable\u62c9\u9ad8\uff0c\u5185\u5b58\u7ecf\u8fc7\u82e5\u5e72\u65f6\u95f4\u540e\u7ecf\u8fc7\u5bfb\u5740\uff0c\u5c31\u4f1a\u5c06\u5185\u5b58\u7684\u503c\u653e\u5230output\u603b\u7ebf\u4e0a\u3002</p> <p>\u5185\u5b58\u4f7f\u80fd\u5230\u5185\u5b58\u9001\u51fa\u6570\u636e\u7684\u65f6\u95f4\u79f0\u4f5c\u8bfb\u53d6\u5ef6\u8fdf\u3002</p> <p></p> <p>\u7c7b\u4f3c\u5730\uff0c\u4e0a\u56fe\u662f\u5199\u64cd\u4f5c\u7684\u65f6\u5e8f\u56fe\u3002\u5728\u628awirte\u975e\u4fe1\u53f7\u62c9\u9ad8\u4e4b\u540e\uff0c\u6570\u636e\u8f93\u5165\u8fd8\u4fdd\u6301\u4e86\u4e00\u5c0f\u6bb5\u65f6\u95f4\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u6301\u7a33\u5b9a(\u53ef\u4ee5\u7c7b\u6bd4\u65f6\u5e8f\u7535\u8def\u4e2d\u89e6\u53d1\u5668\u7684hold time)\u3002</p>"},{"location":"cs/CLDF/lec7/#random-access-memoryram","title":"Random Access Memory(RAM)","text":"<p>RAM\u7684\u79cd\u7c7b\uff1a</p> <ul> <li>SRAM\uff1a \u9759\u6001\u5b58\u50a8\u5668\uff0c\u4fe1\u606f\u662f\u4fdd\u5b58\u5728\u9501\u5b58\u5668\u4e2d\u3002\u7531\u4e8e\u4f7f\u7528\u95e8\u6765\u5b9e\u73b0\uff0c\u56e0\u6b64\u901f\u5ea6\u6bd4\u8f83\u5feb\uff0c\u4f46\u662f\u6210\u672c\u8f83\u9ad8\u3002</li> <li>DRAM\uff1a \u5b58\u50a8\u5143\u4ef6\u662f\u7535\u5bb9\uff0c\u901a\u8fc7\u7535\u5bb9\u5145\u653e\u7535\u6765\u6807\u5fd7\u903b\u8f911\u62160\u3002<ul> <li>\u4f1a\u5b58\u5728\u6f0f\u7535\u60c5\u51b5\uff0c\u5bfc\u81f4\u4e22\u5931\u6570\u636e\u3002\u56e0\u6b64\u8981\u5b9a\u65f6\u5237\u65b0\u3002</li> <li>\u9700\u8981\u7684\u7535\u8def\u5143\u4ef6\u8f83\u5c11\uff0c\u5728\u82af\u7247\u4e0a\u5bc6\u5ea6\u66f4\u9ad8\uff0c\u6210\u672c\u66f4\u4f4e\u3002</li> </ul> </li> </ul> <p>\u53e6\u4e00\u79cd\u5206\u7c7b\u65b9\u6cd5\u662f\u6839\u636e\u65ad\u7535\u540e\u4fe1\u606f\u662f\u5426\u4f1a\u4e22\u5931\uff1a</p> <ul> <li>Volatile: \u6389\u7535\u6613\u5931</li> <li>Non-volatile.</li> </ul>"},{"location":"cs/CLDF/lec7/#sram","title":"SRAM","text":"<p>\u4e0a\u56fe\u6240\u793a\u662f\u5178\u578b\u7684SRAM\u5b58\u50a8\u5355\u5143\u7684\u7535\u8def\u56fe\u3002 \u82e5<code>Select=0</code>\uff0c\u9501\u5b58\u5668\u524d\u7684\u4e0e\u95e8\u90fd\u88abdisable,\u9501\u5b58\u5668\u5904\u4e8e\u4fdd\u6301\u529f\u80fd\u3002\u5bf9\u4e8e\u8f93\u51fa\u7aef\u7684\u4e0e\u95e8\u4e5f\u88abdisable,\u8f93\u51fa\u4e5f\u4e3a0\u3002\u82e5<code>Select=1</code>,\u5219\u5c06B\u548cB\u975e\u4f5c\u4e3a\u9501\u5b58\u5668\u7684\u8f93\u5165\uff0c\u5018\u82e5\u4e8c\u8005\u503c\u4e0d\u540c\uff0c\u5219\u6709\u6761\u4ef6\u4fee\u6539\u9501\u5b58\u5668\u7684\u5185\u5bb9\u3002\u4e0e\u6b64\u540c\u65f6\u8f93\u51fa\u7aef\u7684\u4e0e\u95e8\u4e5f\u88ab\u4f7f\u80fd\uff0c\u5f97\u5230\u6709\u6548\u8f93\u51fa\u3002</p> <p></p> <p>\u6211\u4eec\u5c06\u6bcf\u4e2aSRAM\u5355\u5143\u62fc\u6210\u4f4d\u7247(Bit Slice)\uff0c\u603b\u5171\u6709\\(2^n\\)\u4e2aRAMcell\u3002\u53ef\u4ee5\u770b\u5230\u6240\u6709cell\u7684\u8f93\u5165\u7aef\\(B,\\overline{B}\\)\u90fd\u5e76\u5728\u4e00\u8d77\uff0c\u7531\u4e00\u4e2a\u8bfb\u5199\u63a7\u5236\u903b\u8f91\u64cd\u4f5c\uff0c\u6240\u6709\u7684\u8f93\u51fa\u7531\u6216\u95e8\u8fde\u63a5\u3002</p> <p>\u5176\u4e2d<code>Bit Select</code>\u63a7\u5236\u8bfb\u5199\u64cd\u4f5c\u7684\u4f7f\u80fd\u3002\u82e5<code>Bit Select=0</code>\uff0c\u5206\u6790\u7535\u8def\u53ef\u77e5\uff0c\\(B,\\overline{B}\\)\u90fd\u4e3a0\uff0c\u65e0\u8bba<code>Select</code>\u7b49\u4e8e\u591a\u5c11\uff0c\u9501\u5b58\u5668\u59cb\u7ec8\u662f\u4fdd\u6301\u72b6\u6001\u3002\u4e0e\u6b64\u540c\u65f6\uff0c<code>Data out</code>\u4e5f\u59cb\u7ec8\u4e3a0\u3002</p> <p>\u5f53<code>Bit Select=1</code>\uff0c\u8981\u5199\u5165\u6570\u636e\u65f6\uff0c<code>Read/Write</code>\u4fe1\u53f7\u7ebf\u4e3a0\uff0c\u4e0e\u95e8\u5f97\u5230\u4f7f\u80fd\uff0c\u9501\u5b58\u5668\u7684\u8f93\u5165\u7aef\u4e3a\u76f8\u53cd\u7684\u503c\uff0c\u82e5<code>Select=1</code>\uff0cSR\u9501\u5b58\u5668\u7684\u7ed3\u679c\u53ef\u4ee5\u66f4\u65b0\uff0c\u5b9e\u73b0\u4e86\u5bf9\u6570\u636e\u7684\u5199\u5165\u64cd\u4f5c\u3002\u5bf9\u4e8e\u8bfb\u53d6\u64cd\u4f5c\uff0c<code>Data-in</code>\u7684\u6570\u636e\u4e0d\u80fd\u88ab\u9001\u5230\u9501\u5b58\u5668\u7684\u8f93\u5165\u3002\u4f46\u662f\u5f53\u6709\u4e00\u4e2a\u5185\u5b58\u7684<code>Select=1</code>\u65f6\uff0c\u9501\u5b58\u5668\u8f93\u51fa\u7aef\u7684\u4e0e\u95e8\u88ab\u4f7f\u80fd\uff0c\u4ea7\u751f\u6709\u6548\u7684\u8f93\u51fa\\(C,\\oveline{C}\\)\u3002\u7531\u4e8e\u5185\u5b58\u64cd\u4f5c\u8981\u6c42\u4efb\u4f55\u65f6\u523b\u53ea\u80fd\u5bf9\u4e00\u4e2a\u5b57\u8fdb\u884c\u64cd\u4f5c\uff0c\u8f93\u51fa\u7aef\u4ec5\u6709\u88ab\u9009\u62e9\u7684\u90a3\u4f4d\u5185\u5b58\u4ea7\u751f\u6709\u6548\u7684\u8f93\u51fa\uff0c\u4ece\u800c\u5f97\u5230<code>Data out</code>\uff0c\u5b9e\u73b0read\u64cd\u4f5c\u3002</p> <p>\u7531\u4e8e\u5185\u5b58\u64cd\u4f5c\u8981\u6c42\u4efb\u4f55\u65f6\u523b\u53ea\u80fd\u5bf9\u4e00\u4e2a\u5b57\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\\(2^n\\)\u4e2aword select\u4fe1\u53f7\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u4e3a1\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u4e4b\u524d\u52a0\u4e0a\u4e00\u4e2a\u5730\u5740\u8bd1\u7801\u5668\u3002\u8bd1\u7801\u5668\u7684\u8f93\u5165\u5c31\u662f\u5730\u5740\u7ebf\u3002</p> <p></p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u56fe\u4e2d\u7684\u8f93\u51fa\u52a0\u4e0a\u4e86\u4e00\u4e2a\u4e09\u6001\u95e8\uff0c\u88ab\u79f0\u4f5cChip Select,\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u82af\u7247\u88ab\u4f7f\u80fd\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5c06\u591a\u4e2a\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u3002</p> <p>\u5728\u5b9e\u9645\u8ba1\u7b97\u673a\u4e2d\uff0c\u5185\u5b58\u975e\u5e38\u5927\uff0c\u4f7f\u7528\u4e00\u4e2a\u8bd1\u7801\u5668\u662f\u4e0d\u73b0\u5b9e\u7684\u3002(\u8bbe\u60f3\u4e00\u4e0b8M\u7684\u5185\u5b58\uff0c\u6709\\(2^{23}\\)\u4e2a\u5b57)\u3002\u4e00\u4e2a\u7b80\u5316\u65b9\u6cd5\u5c31\u662f\u5c06word select\u53d8\u6210row select\uff0c\u5c06bit select\u53d8\u4e3acolumn select\u3002\u4e00\u822c\u5c06\u9ad8\u4f4d\u4f5c\u4e3a\u884c\u5730\u5740\u3002\u884c\u5730\u5740\u4f7f\u80fd\u67d0\u4e00\u4e2a\u884c\u7ebf\uff0c\u5217\u5730\u5740\u4f7f\u80fd\u67d0\u4e00\u4e2a\u4f4d\u7247\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4f46\u8ba1\u7b97\u673a\u4e2d\u5730\u5740\u7684\u5b57\u53ef\u80fd\u4e0d\u6b62\u4e00\u4f4d\uff0c\u8003\u8651\u5c06\u4e0a\u8ff016\\(\\times\\) 1 \u7684\u7ed3\u6784\u6539\u62108\u4e582\u7684RAM\u7ed3\u6784\u3002\u5c0616\u6539\u4e3a8\u610f\u5473\u7740\u66f4\u5c11\u7684\u5730\u5740\u7ebf\uff0c\u53ea\u9700\u8981\u4e00\u4e2a38\u8bd1\u7801\u5668\u5373\u53ef\u3002\u6211\u4eec\u5217\u7684\u4f7f\u80fd\u4fe1\u53f7\u540c\u65f6\u63a7\u5236\u4e24\u4e2a\u4f4d\u7247\uff0c\u800c\u5c06\u4e24\u4e2a\u4f4d\u7247\u7684\u8f93\u51fa\u4f5c\u4e3a\u7535\u8def\u7684\u8f93\u51fa\u3002</p> <p></p>"},{"location":"cs/CLDF/lec7/#making-larger-memories","title":"Making Larger Memories","text":"<p>\u6211\u4eec\u6709\u4e24\u79cd\u6269\u5c55\u5185\u5b58\u7684\u65b9\u6cd5\uff1a\u5b57\u6269\u5c55\u548c\u4f4d\u6269\u5c55\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a4-word by 1-bit\u7684\u5185\u5b58\u5b57\u6269\u5c55\u621016-word by 1-bit\u7684\u5185\u5b58\u3002\u6211\u4eec\u5c06\u9ad8\u4e24\u4f4d\u7684\u5730\u5740\u7ebf\u7ecf\u8fc7\u8bd1\u7801\u5668\uff0c\u8bd1\u7801\u5668\u7684\u8f93\u51fa\u7aef\u63a5\u6bcf\u4e2a\u4f4d\u7247\u7684chip select\u4e0a\u3002\u800c\u4f4e\u4e24\u4f4d\u5c31\u50cf\u4e0a\u6587\u6240\u8ff0\u90a3\u6837\u5de5\u4f5c\u3002</p> <p></p> <p>\u4e0a\u56fe\u6240\u793a\u662f\u4f4d\u6269\u5c55\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c06\u4e24\u4e2aRAM\u7684\u8f93\u51fa\u5e76\u5728\u4e00\u8d77\u5373\u53ef\u3002</p>"},{"location":"cs/CLDF/lec7/#dynamic-ramdram","title":"Dynamic RAM(DRAM)","text":"<p>\u4f7f\u7528\u7535\u5bb9\u5145\u653e\u7535\u8fdb\u884c\u6570\u636e\u7684\u5b58\u50a8\u3002</p> <p></p> <p>\u7531\u4e8e\u7535\u5bb9\u5f88\u5c0f\uff0c\u6211\u4eec\u4f7f\u7528\u654f\u611f\u653e\u5927\u5668\u7684\u7ed3\u6784\u5bf9\u7535\u5bb9\u7684\u5145\u653e\u7535\u8fdb\u884c\u64cd\u4f5c(\u4e0a\u56fe\u53f3\u8fb9\u7684\u7ed3\u6784)\u3002</p> <p>\u7c7b\u6bd4\u4e3a\u4e00\u4e2a\u5927\u6c60\u5b50\uff0c\u6bcf\u4e2a\u5927\u6c60\u5b50\u8fde\u7740\u5f88\u591a\u5f00\u5173\uff0c\u5f00\u5173\u7684\u53e6\u4e00\u7aef\u8fde\u63a5\u7684\u662f\u5c0f\u7535\u5bb9(\u5c0f\u6c60\u5b50)\u3002\u5c0f\u6c60\u5b50\u91cc\u7684\u6c34\u4f4d\u9ad8\u65f6\uff0c\u5b58\u50a8\u903b\u8f911\uff0c\u53cd\u4e4b\u5b58\u50a8\u903b\u8f910\u3002</p> <p>\u51991\u65f6\uff0c\u6211\u4eec\u5c06\u5927\u6c60\u5b50\u7684\u7535\u538b\u5347\u9ad8\uff0c\u6253\u5f00\u5f00\u5173\uff0c\u5c0f\u6c60\u5b50\u7684\u7535\u538b\u4e5f\u4f1a\u5347\u9ad8\u3002\u51990\u65f6\u5219\u628a\u5927\u6c60\u5b50\u7684\u7535\u538b\u653e\u7a7a\u3002</p> <p>\u5728\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5728\u5927\u6c60\u5b50\u91cc\u653e\u4e0a\u4e2d\u7b49\u5927\u5c0f\u7684\u7535\u538b\uff0c\u6253\u5f00\u5f00\u5173\uff0c\u82e5\u5c0f\u6c60\u5b50\u91cc\u662f\u903b\u8f911\uff0c\u5219\u5927\u6c60\u5b50\u7684\u7535\u538b\u4f1a\u7a0d\u7a0d\u4e0a\u5347\uff0c\u53cd\u4e4b\u5219\u4f1a\u7a0d\u7a0d\u4e0b\u964d\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u68c0\u6d4b\u5927\u6c60\u5b50\u7684\u7535\u538b\u53d8\u5316\u5373\u53ef\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\u4f1a\u6d88\u8017\u5c0f\u6c60\u5b50\u91cc\u7684\u7535\u8377\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u518d\u5199\u56de\u53bb\u3002</p> <p></p> <p>\u5728\u8bbe\u8ba1DRAM\u82af\u7247\u65f6\u9700\u8981\u8003\u8651\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u51cf\u5c11\u5f15\u811a\u7684\u6570\u91cf\u3002</p> <p>DRAM\u82af\u7247\u4e2d\uff0c\u5730\u5740\u662f\u5206\u4e24\u6b21\u9001\u8fbe\u7684\uff0c\u5148\u9001\u884c\u5730\u5740\uff0c\u518d\u9001\u5217\u5730\u5740\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u63a7\u5236\u5f15\u811a\uff0c\\(\\overline{RAS},\\overline{CAS}\\)\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002(\u5217\u5730\u5740\u5b9e\u9645\u4e0a\u662f\u7528\u8ba1\u6570\u5668\u6765\u5199\u5165\u7684)</p> <p></p> <p>DRAM\u8bfb\u5199\u64cd\u4f5c\u7684\u65f6\u5e8f\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p></p>"},{"location":"cs/CLDF/lec7/#dram-types","title":"DRAM Types","text":"<ul> <li>DRAM\u662f\u540c\u6b65\u7535\u8def\uff0c\u79f0\u4f5cSDRAM\u3002SRAM\u662f\u5f02\u6b65\u7535\u8def\uff0cSRAM\u5f88\u5feb\uff0cDRAM\u5f88\u6162\uff0c\u4f46\u662f\u5b58\u50a8\u91cf\u5927\u3002</li> </ul> <p>\u7531\u4e8e\u6211\u4eec\u5728\u8bfb\u6570\u636e\u65f6\u671f\u671b\u8bfb\u51fa\u4e00\u884c\u6570\u636e\u3002 \u89e6\u53d1\u4eff\u771f\u64cd\u4f5c\uff1a\u5217\u5730\u5740\u52a01\u3002\u89e6\u53d1\u8bfb\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\u3002</p> <p></p> <p>\u5f53columen address\u6ea2\u51fa\u65f6\uff0c\u8fd4\u56de\u7b2c\u4e00\u5217\u3002</p> <ul> <li> <p>DDR SDRAM\uff1a \u5728\u65f6\u949f\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d\u6cbf\u90fd\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002</p> </li> <li> <p>RDRAM</p> </li> </ul> <p>\u5bfb\u5740\u8fc7\u7a0b\uff1a\u5c064\u6b21\u64cd\u4f5c\u7684\u6570\u636e\u7ec4\u5408\u5728\u4e00\u8d77\u8bbf\u95ee\u3002</p> <p>The bus consists of: - A 3-bit row address bus - A 5-bit column address bus - A 16 or 18-bit (for error correction) data bus</p> <p>Packets are 4-clock cycles long giving 8 transfers per packet representing: - A 12-bit row address packet - A 20-bit column address packet - A 128 or 144-bit data packet</p>"},{"location":"cs/ds/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p> \u7ea6 21 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u7ed3\u6784\u57fa\u7840\u201d \u8bfe\u7a0b\u7b14\u8bb0</p>"},{"location":"cs/ds/ch1/","title":"Algorithm Analysis","text":"<p> \u7ea6 373 \u4e2a\u5b57  49 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/ds/ch1/#definition","title":"Definition","text":"<p>An algorithm is a finite set of instructions that, if followed, accomplishes a particular task. In addition, all algorithms must satisfy the following criteria:</p> <ul> <li>Input</li> <li>Output</li> <li>Definiteness</li> <li>Finiteness</li> <li>Effectiveness</li> </ul> <p>Note</p> <p>A program is written in some programming language, and does not have to be infinte(operation system) An algorithm can be described by human languages, flow charts, some programming languages, or pseudo-code.</p>"},{"location":"cs/ds/ch1/#what-to-analyze","title":"What to Analyze","text":"<ul> <li>Machine &amp; compiler-dependent run times</li> <li>Time and space complexities: machine and compiler-independent</li> </ul> <p>Assumptions:</p> <ul> <li>instructions are executed sequentially</li> <li>each instruction is simple, and takes exactly one time unit</li> <li>integer size is fixed and we have infinite memory</li> </ul> <p>Typically the following two functions are analyzed: \\(T_{avg}(N)\\) and  \\(T_{worst}(N)\\)</p> <p>Example: \\(T_{sum}(n)=2n+3\\)</p> <pre><code>float sum(float list[],int n){\nfloat tempsum = 0; /*count = 1*/\nint i;\nfor(i=0;i&lt;n;i++)/*count++*/\ntempsum += list[i];/*count++*/\nreturn tempsum;/*count++*/\n}\n</code></pre>"},{"location":"cs/ds/ch1/#asymptotic-notation","title":"Asymptotic Notation","text":"<p>\\(T(N)=O(f(N))\\): if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\le c \\cdot f(N)\\) for all \\(N \\geq n_0\\)</p> <p>\\(T(N)=\\Omega (g(N))\\): if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\geq c \\cdot g(N)\\) for all \\(N\\geq n_0\\)</p> <p>\\(T(N)=\\Theta(h(N))\\): iff \\(T(N)=O(h(N))\\) and \\(T(N)=\\Omega (h(N))\\)</p> <p>\\(T(N)=o(p(N))\\): if \\(T(N)=O(p(N))\\) and \\(T(N)\\neq \\Theta (p(N))\\)</p>"},{"location":"cs/ds/ch1/#rules-of-asymptotic-notation","title":"Rules of Asymptotic Notation","text":"<p>If \\(T_1(N)=O(f(N))\\) and \\(T_2(N)=O(g(N))\\), then:</p> <ul> <li>\\(T_1(N)+T_2(N)=max(O(f(N)),O(g(N)))\\)</li> <li>\\(T_1(N)\\times T_2(N)=O(f(N)\\times g(N))\\)</li> </ul> <p>If \\(T(N)\\) is a polynomial of  degree \\(k\\), then \\(T(N)=\\Theta (N^k)\\)</p> <p>\\(log^kN=O(N)\\) for any constant \\(k\\). This tells us that logarithms grow very slowly</p> <p>Note</p> <p>When comparing the complexities of two programs asymptotically, make sure that N is sufficiently large.</p>"},{"location":"cs/ds/ch1/#compare-the-algorithms","title":"Compare the Algorithms","text":"<p>Given(possibly negative) integers \\(A_1,A_2,\u2026\u2026,A_N\\) , find the maximum value of \\(\\sum_{k=i}^jA_k\\) (\u6700\u5927\u5b50\u6570\u7ec4)</p>"},{"location":"cs/ds/ch1/#algorithm-1-on3","title":"Algorithm 1: \\(O(N^3)\\)","text":"<pre><code>int MaxSubsequenceSum( const int A[], int N){\nint ThisSum, MaxSum, i,j,k;\nMaxSum = 0;\nfor(int i=0;i&lt;N;i++){\nfor(j=i;j&lt;N;j++){\nThisSum = 0;\nfor(k=i;k&lt;=j;k++){\nThisSum += A[k];\nif(ThisSum &gt; MaxSum){\nMaxSum = ThisSum;\n}\n}\n}\n}\nreturn MaxSum;\n}\n</code></pre>"},{"location":"cs/ds/ch1/#algorithm2-on2","title":"Algorithm2: \\(O(N^2)\\)","text":"<pre><code>int MaxSubsequenceSum(const int A[], int N) {\nint ThisSum, MaxSum, i ,j;\nMaxSum = 0;\nfor(int i=0;i&lt;N;i++){\nThisSum = 0;\nfor(j=i;j&lt;N;j++){\nThisSum+ = A[j];\nif(ThisSum &gt; MaxSum)\nMaxSum = ThisSum;\n}\n}\nreturn MaxSum;\n} </code></pre>"},{"location":"cs/ds/ch1/#algorithm3-divide-and-conquer","title":"Algorithm3: Divide and Conquer","text":"\\[ \\begin{align} T(N)&amp;= 2T(N/2)+cN \\\\ &amp;=2[2T(N/2^2)+cN/2]+cN\\\\&amp;=2^kO(1)+ckN \\quad where  N/2^k=1 \\\\ &amp;=O(NlogN) \\end{align} \\]"},{"location":"cs/ds/ch1/#algorithm4-on-line-algorithm-tnon","title":"Algorithm4: On-line Algorithm  \\(T(N)=O(N)\\)","text":"<pre><code>int MaxSubsequenceSum( const int A[], int N ){\nint ThisSum, MaxSum,j;\nThisSum = MaxSum = 0;\nfor(j=0;j&lt;N;j++){\nThisSum += A[j];\nif(ThisSum &gt; MaxSum)\nMaxSum = ThisSum;\nelse if(ThisSum&lt;0)\nThisSum = 0;\n}\nreturn MaxSum;\n} </code></pre>"},{"location":"cs/ds/ch4/","title":"Binary Tree","text":"<p> \u7ea6 582 \u4e2a\u5b57  131 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f</p>"},{"location":"cs/ds/ch4/#preliminaries","title":"Preliminaries","text":"<p>Definition: A tree is a collection of nodes. The collection can be empty; otherwise, a tree consists of:</p> <ul> <li>a distinguished node \\(r\\), called the root;</li> <li>zero or more nonempty subtrees \\(T_1,\\cdots,T_k\\), each of whose roots are connected by a directed edge from \\(r\\).</li> </ul> <p>Note</p> <ul> <li>There are \\(N-1\\) edges in a tree with \\(N\\) nodes</li> <li>Normally the root is drawn at the top.</li> </ul>"},{"location":"cs/ds/ch4/#terminology","title":"Terminology","text":"<p>Degree of a node: number of subtrees of the node.</p> <p>Degree of a tree: max{degree(node)}</p> <p>parent: a node that has subtrees.</p> <p>children: the roots of the subtrees of a parent.</p> <p>siblings: children of the same parent.</p> <p>leaf: a node with degree 0(no children)</p> <p>path from \\(n_i\\) to \\(n_k\\):  a unique sequence of nodes \\(n_1,n_2,\\cdots,n_k\\) such that \\(n_i\\) is the parent of \\(n_{i+1}\\)</p> <p>length of path: number of edges on the path.</p> <p>depth of \\(n_i\\): length of the unique path from the root to \\(n_i\\). Depth(root)=0</p> <p>height of \\(n_i\\): length of the longest path from \\(n_i\\) to a leaf. Height(leaf)=0.</p> <p>height of a tree: height(root)</p> <p>ancestors of a node: all the nodes along the path form the node up to the root.</p> <p>descendants of a node: all the nodes in its subtrees.</p>"},{"location":"cs/ds/ch4/#implementation","title":"Implementation","text":"<p>FirstChild-NextSibling Representation</p> <p></p>"},{"location":"cs/ds/ch4/#binary-trees","title":"Binary Trees","text":"<p>Let us rotate the FirstChild-NextSibling tree clockwise by 45 degrees.</p> <p>Definition: A binary tree is a tree in which no node can have more than two children.</p>"},{"location":"cs/ds/ch4/#expression-trees","title":"Expression Trees","text":""},{"location":"cs/ds/ch4/#tree-traversals","title":"Tree Traversals","text":"<p>\u524d\u5e8f\u904d\u5386:\u6839\u5de6\u53f3</p> <pre><code>void preorder(tree_ptr tree){\nif(tree){\nvisit(tree);\nfor(each child C of tree)\npreorder(C);\n}\n}\n</code></pre> <p>\u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u6839\u53f3</p> <pre><code>void  inorder ( tree_ptr  tree ){  if  ( tree )   {\ninorder ( tree-&gt;Left );\nvisit ( tree-&gt;Element );\ninorder ( tree-&gt;Right );\n}\n}\n//iterative version\nvoid inorder(tree ptr_tree){\nStack S=CreateStack(MAX_SIZE);\nfor(;;){\nfor(;tree;tree=tree-&gt;Left)\nPush(tree,S);\ntree=Top(S);\nPop(S);\nif(!tree) break;\nvisit(tree-&gt;Element);\ntree=tree-&gt;Right;\n}\n}\n</code></pre> <p>\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839</p> <pre><code>void postorder(tree_ptr tree){\nif(tree){\nfor (each child C of tree)\npostorder(C);\nvisit (tree);\n}\n}\n</code></pre> <p>\u5c42\u5e8f\u904d\u5386</p> <pre><code>void levelorder(tree_ptr tree){\nenqueue(tree);\nwhile(queue is not empty){\nvisit(T=dequeue());\nfor(each child C of T)\nenqueue(C);\n}\n}\n</code></pre>"},{"location":"cs/ds/ch4/#threaded-binary-trees","title":"Threaded Binary Trees","text":"<p>Rules:</p> <ul> <li>If <code>Tree-&gt;Left</code> is NULL, replace it with a pointer to the inorder predecessor of Tree.</li> <li>If <code>Tree-&gt;Right</code> is NULL, replace it with a pointer to the inorder successor of Tree.</li> <li>There must not be any loose threads.  Therefore a threaded binary tree must have a head node of which the left child points to the first node.</li> </ul> <pre><code>typedef  struct  ThreadedTreeNode  *PtrTo  ThreadedNode;\ntypedef  struct  PtrToThreadedNode  ThreadedTree;\ntypedef  struct  ThreadedTreeNode {\nint              LeftThread;/* if it is TRUE, then Left */\nThreadedTree     Left;      /* is a thread, not a child ptr.   */\nElementType  Element;\nint              RightThread; /* if it is TRUE, then Right */\nThreadedTree     Right;    /* is a thread, not a child ptr.   */\n}\n</code></pre> <p></p> <p>Note</p> <p>In a binary tree, left child and right child are different.</p> <p></p>"},{"location":"cs/ds/ch4/#properties-of-binary-trees","title":"Properties of Binary Trees","text":"<ul> <li>The maximum number of nodes on level \\(i\\) is \\(2^{i-1}\\)</li> <li>The maximum number of nodes in a binary tree of depth \\(k\\) is \\(2^k-1\\).</li> <li>\\(n_0\\)=\\(n_2\\)+1, where \\(n_0\\) is the number of leaf nodes and \\(n_2\\) the number of nodes of degree 2.</li> </ul>"},{"location":"cs/ds/ch4/#the-search-tree-binary-search-trees","title":"The Search Tree--Binary Search Trees","text":"<p>Definition: A binary search tree is a binary tree.  It may be empty. If it is not empty, it satisfies the following properties:</p> <ul> <li>Every node has a key which is an integer, and the keys are distinct</li> <li>The keys in a nonempty left subtree must be smaller than the key in the root of the subtree.</li> <li>The keys in a nonempty right subtree must be larger than the key in the root of the subtree.</li> <li>The left and right subtrees are also binary search trees.</li> </ul>"},{"location":"cs/ds/ch4/#adt","title":"ADT","text":"<p>Objects: A finite ordered list with zero or more elements. Operations: </p> <ul> <li>MakeEmpty(\u521d\u59cb\u5316)</li> <li>Find</li> <li>FindMin</li> <li>FindMax</li> <li>Insert</li> <li>Delete</li> <li>Retrieve(Position P)</li> </ul>"},{"location":"cs/ds/ch4/#implementations","title":"Implementations","text":"<p>Find:</p> <p>\\(T(N)=O(d)\\), where \\(d\\) is the depth of \\(X\\).</p> <pre><code>Position  Find( ElementType X,  SearchTree T ) { if ( T == NULL ) return  NULL;  /* not found in an empty tree */\nif ( X &lt; T-&gt;Element )  /* if smaller than root */\nreturn  Find( X, T-&gt;Left );  /* search left subtree */\nelse if ( X &gt; T-&gt;Element )  /* if larger than root */\nreturn  Find( X, T-&gt;Right );  /* search right subtree */\nelse   /* if X == root */\nreturn  T;  /* found */\n} //iterative version\nPosition  Iter_Find( ElementType X,  SearchTree T ) { /* iterative version of Find */\nwhile  ( T )   {\nif  ( X == T-&gt;Element )  return T ;  /* found */\nif  ( X &lt; T-&gt;Element )\nT = T-&gt;Left ; /*move down along left path */\nelse\nT = T-&gt; Right ; /* move down along right path */\n}  /* end while-loop */\nreturn  NULL ;   /* not found */\n} </code></pre> <p>FindMin/Max</p> <p>\\(T(N)=O(d)\\)</p> <pre><code>Position  FindMin( SearchTree T ) { if ( T == NULL )   return  NULL; /* not found in an empty tree */\nelse if ( T-&gt;Left == NULL )   return  T;  /* found left most */\nelse   return  FindMin( T-&gt;Left );   /* keep moving to left */\n} Position  FindMax( SearchTree T ) { if ( T != NULL ) while ( T-&gt;Right != NULL )   T = T-&gt;Right;   /* keep moving to find right most */\nreturn T;  /* return NULL or the right most */\n} </code></pre> <p>Insert </p> <p>\\(T(N)=O(d)\\)</p> <pre><code>SearchTree  Insert( ElementType X, SearchTree T ) { if ( T == NULL ) { /* Create and return a one-node tree */ T = malloc( sizeof( struct TreeNode ) ); if ( T == NULL ) FatalError( \"Out of space!!!\" ); else { T-&gt;Element = X; T-&gt;Left = T-&gt;Right = NULL; } }  /* End creating a one-node tree */\nelse  /* If there is a tree */\nif ( X &lt; T-&gt;Element ) T-&gt;Left = Insert( X, T-&gt;Left ); else if ( X &gt; T-&gt;Element ) T-&gt;Right = Insert( X, T-&gt;Right ); /* Else X is in the tree already; we'll do nothing */ return  T;   /* Do not forget this line!! */ }\n</code></pre> <p>Delete</p> <p>\\(T(N)=O(h)\\), where \\(h\\) is the height of the tree.</p> <pre><code>SearchTree Delete(ElementType X, SearchTree T) {\nPosition TmpCell;\nif (T == NULL) Error(\"not found\");\nelse if (X &lt; T-&gt;Element) T-&gt;Left = Delete(X, T-&gt;Left);\nelse if (x &gt; T-&gt;Element) T-&gt;Right = Delete(X, T-&gt;Right);\nelse {/*Found element to be deleted*/\nif (T-&gt;Left &amp;&amp; T-&gt;Right) {\nTmpCell = FindMin(T-&gt;Right);\nT-&gt;Element = TmpCell-&gt;Element;\nT-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);\n} else {\nTmpCell = T;\nif (T-&gt;Left == NULL) T = T-&gt;Right;\nelse if (T-&gt;Right == NULL) T = T-&gt;Left;\nfree(TmpCell);\n}\n}\nreturn T;\n}\n</code></pre>"},{"location":"cs/ds/ch4/#average-case-analysis","title":"Average-Case Analysis","text":"<p>Place \\(n\\) elements in a binary search tree.  How high can this tree be?</p> <p>The height depends on the order of insertion:</p> <p></p>"},{"location":"cs/ds/ch5/","title":"Priority Queues(Heaps)","text":"<p> \u7ea6 292 \u4e2a\u5b57  32 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"cs/ds/ch5/#adt-model","title":"ADT Model","text":"<p>Objects:  A finite ordered list with zero or more elements.</p> <p>Operations: </p> <ul> <li><code>Initialize</code></li> <li><code>Insert</code></li> <li><code>DeleteMin</code></li> <li><code>FindMin</code></li> </ul>"},{"location":"cs/ds/ch5/#binary-heap","title":"Binary Heap","text":""},{"location":"cs/ds/ch5/#structure-property","title":"Structure Property","text":"<p>A binary tree with \\(n\\) nodes and height \\(h\\) is complete iff its nodes correspond to the nodes numbered from 1 to \\(n\\) in the perfect binary tree of height \\(h\\).</p> <p>A complete binary tree of height \\(h\\) has between \\(2^h\\) and \\(2^{h+1}-1\\) nodes.</p> <p>\\(h=\\lfloor{logN}\\rfloor\\)</p> <p>If a complete binary tree with \\(n\\) nodes is represented sequentially, then for any node with index \\(i(1\\le i\\le n)\\), we have </p> <ul> <li>index of parent(i): \\(\\lfloor i/2\\rfloor\\)</li> <li>index of left_child: \\(2i\\)</li> <li>index of right_child: \\(2i+1\\)</li> </ul>"},{"location":"cs/ds/ch5/#heap-order-property","title":"Heap Order Property","text":"<p>A min tree is a tree which the key value in each node is no larger than the key values in its children(if any). </p> <p>A min heap is a complete binary tree that is also a min tree.</p> <p>Analogously, we can declare a max heap.</p>"},{"location":"cs/ds/ch5/#basic-heap-operations","title":"Basic Heap Operations","text":""},{"location":"cs/ds/ch5/#insertion","title":"Insertion","text":"<pre><code>void Insert(ElementType X, PriorityQueue H){\nint i;\nif(IsFull(H)){\nError(\"Priority queue is full.\");\nreturn;\n}\nfor(i=++H-&gt;Size;H-&gt;Element[i/2]&gt;X;i/=2){\nH-&gt;Element[i]=H-&gt;Element[i/2];\n}\nH-&gt;Element[i]=X;\n}\n</code></pre> <p>\\(T(N)=O(logN)\\)</p>"},{"location":"cs/ds/ch5/#deletemin","title":"DeleteMin","text":"<pre><code>ElementType DeleteMin(PriorityQueue H){\nint i,child;\nElementType MinElement,LastElement;\nif(IsEmpty(H)){\nError(\"Prioriy queue is empty\");\nreturn H-&gt;Elements[0];\n}\nMinElement=H-&gt;ELements[1];\nLastElement=H-&gt;Elements[H-&gt;Size--];\nfor(i=1;i*2&lt;=H-&gt;Size;i=Child){\nChild=i*2;\nif(Child!=H-&gt;Size&amp;&amp;H-&gt;Elements[Child++]&lt;H-&gt;Elements[Child])\nChild++;\nif(LastElement&gt;H-&gt;Element[Child]){\nH-&gt;Elements[i]=H-&gt;Elements[Child];\n}\nelse break;\n}\nH-&gt;Elements[i]=LastElement;\nreturn MinElement;\n}\n</code></pre> <p>\\(T(N)=O(logN)\\)</p>"},{"location":"cs/ds/ch5/#other-heap-operations","title":"Other Heap Operations","text":"<p>Note that finding any key except the minimum one will have to take a linear scan through the entire heap.</p> <ul> <li>DecreaseKey: Lower the value of the key in the heap at position P by a positive amount, called percolate up.</li> <li>IncreaseKey: Increase the value of the key in the heap at position P by a positive amount, called percolate down.</li> <li>Delete: remove the node at position P.</li> <li>BuildHeap:  percolate down from next to last level to the root.</li> </ul> <p>Theorem: For the perfect binary tree of height \\(h\\) containing \\(2^{h+1}-1\\) nodes, the sum of the heights of the nodes is \\(2^{h+1}-1-(h+1)\\), which means \\(T(N)=O(N)\\)</p>"},{"location":"cs/ds/graph/","title":"Graph Algorithmes","text":"<p> \u7ea6 380 \u4e2a\u5b57  25 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/ds/graph/#definitions","title":"Definitions","text":""},{"location":"cs/ds/graph/#terminology","title":"Terminology","text":"<ul> <li>\\(G(V,E)\\)</li> <li>Undirected graph</li> <li>Directed graph(digraph)</li> <li>Complete graph: a graph that has the maximum number of edges.</li> <li>Undirected: \\(E=C_n^2\\)</li> <li>Directed: \\(E=P_N^2\\)</li> <li>\\(v_i,v_j\\) are adjacent, \\((v_i,v_j)\\) is incident on \\(v_i\\) and \\(v_j\\).</li> <li>Subgraph \\(G^{'}\\subset G\\): \\(V(G^{'})\\subset V(G)\\) &amp;&amp; \\(E(G^{'})\\subset E(G)\\)</li> <li>path</li> <li>Simple path: \\(v_1,v_2,\u2026\u2026,v_n\\) are distinct.</li> <li>Cycle.</li> <li>connected graph</li> <li>(Connected) Component of an undirected G: the maximal connected subgraph.</li> <li>A tree: a graph that is connected and acyclic.</li> <li>DAG: a directed acyclic graph</li> <li>Strongly connected directed graph</li> <li>Strongly connected component</li> <li>Degree: number of edges incident to \\(v\\). \\(E=\\sum degree/2\\)</li> </ul>"},{"location":"cs/ds/graph/#representation-of-graphs","title":"Representation of Graphs","text":""},{"location":"cs/ds/graph/#adjacency-matrix","title":"Adjacency Matrix","text":"<p><code>adj_mat[i][j]</code>=1 if \\((v_i,v_j)\\in E(G)\\).</p> <p>If \\(G\\) is undirected, then adj_mat is symmetric. Thus we can save space by storing only half of the matrix.</p>"},{"location":"cs/ds/graph/#adjacency-lists","title":"Adjacency Lists","text":"<p>\u4f7f\u7528\\(n\\)\u4e2a\u94fe\u8868\u6765\u8868\u793a\u56fe\uff0c\u94fe\u8868\u8282\u70b9\u8868\u793a\u9876\u70b9\u3002\u6bcf\u4e2a\u94fe\u8868\u5b58\u50a8\u4e86\u8be5\u9876\u70b9\u6240\u6709\u7684\u90bb\u63a5\u9876\u70b9\u3002</p>"},{"location":"cs/ds/graph/#topological-sort","title":"Topological Sort","text":"<ul> <li> <p>AOV Network: digraph \\(G\\) in which \\(V(G)\\) represents activities and \\(E(G)\\) represents precedence relations.</p> </li> <li> <p>\\(i\\) is predecessor of \\(j\\)\uff1athere is a path from \\(i\\) to \\(j\\)</p> </li> <li> <p>\\(i\\) is an immediate predecessor of \\(j\\): \\((i,j)\\in E(G)\\)</p> </li> <li> <p>Partial order: a precedence relation which is both transitive and irreflexive.</p> </li> </ul> <p>Feasible AOV network must be a dag (directed acyclic graph).</p> <ul> <li>A topological order is a linear ordering of the vertices of a graph such that, for any two vertices \\(i,j\\), if \\(i\\) is a predecessor of \\(j\\) in the network the n \\(i\\) precedes \\(j\\) in the linear ordeing.</li> </ul> <p>The topological orders may not be unique for a  network.  </p> <pre><code>void Topsort(Graph G){\nQueue Q;\nint Counter=0;\nVertex V,W;\nQ = CreateQueue(NumVertex);  MakeEmpty(Q);\nfor( each vertex V )\nif(indegree[V]==0) Enqueue(V,Q);\nwhile(!IsEmpty(Q)){\nV = Dequeue(Q);\nTopNum[V] = ++Counter;\nfor (each W adjacent to V)\nif(--Indegree[W]==0) Enqueue(W,Q);\n}\nif(Counter!=NumVertex)\nError(\"Graph has a cycle\");\nDisposeQueue(Q);/*free memory*/\n}\n</code></pre>"},{"location":"cs/ds/graph/#shortest-path-algorithms","title":"Shortest Path Algorithms","text":"<p>Given a digraph \\(G=(V,E)\\) and a cost function \\(c(e)\\) for \\(e\\in E(G)\\). The length of a path \\(P\\) from source to destination is \\(\\sum c(e_i)\\), also called weighted path length.</p>"},{"location":"cs/ds/graph/#single-source-shortest-path-problem","title":"Single-Source Shortest-Path Problem","text":"<ul> <li>If there is no negative-cost cycle, the shortest path from \\(s\\) to \\(s\\) is defined to be zero.</li> </ul>"},{"location":"cs/ds/graph/#unweighted-shortest-paths","title":"Unweighted Shortest Paths","text":"<p>idea: Breath-first search</p> <pre><code>void Unweighted(Table T){\nQueue Q;\nVertex V,W;\nQ=\n}\n</code></pre>"},{"location":"cs/ds/graph/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<p>for weighted shortest paths</p> <pre><code>void Dijkstra(Table T){\n}\n</code></pre>"},{"location":"cs/ds/hashing/","title":"Hashing","text":"<p> \u7ea6 715 \u4e2a\u5b57  86 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"cs/ds/hashing/#general-idea","title":"General Idea","text":"<p>\u54c8\u5e0c\u8868\uff0c\u53c8\u79f0\u6563\u5217\u8868\uff0c\u901a\u8fc7\u5efa\u7acb\u952e<code>key</code>\u4e0e\u503c<code>value</code>\u4e4b\u95f4\u7684\u6620\u5c04\uff0c\u5b9e\u73b0\u9ad8\u6548\u7684\u5143\u7d20\u67e5\u8be2\u3002</p> <p>\u6211\u4eec\u5411\u54c8\u5e0c\u8868\u8f93\u5165\u4e00\u4e2a\u952e<code>key</code>,\u5219\u53ef\u4ee5\u5728\\(O(1)\\)\u65f6\u95f4\u5185\u83b7\u53d6\u5bf9\u5e94\u7684\u503c<code>value</code>\u3002</p> <p>\u54c8\u5e0c\u8868\u4e2d\u8fdb\u884c\u589e\u5220\u6539\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(O(1)\\)\u3002</p> <p></p> <ul> <li>\u54c8\u5e0c\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u8f83\u5927\u7684\u8f93\u5165\u7a7a\u95f4\u6620\u5c04\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u8f93\u51fa\u7a7a\u95f4\u3002\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8f93\u5165\u7a7a\u95f4\u662f\u6240\u6709 <code>key</code> \uff0c\u8f93\u51fa\u7a7a\u95f4\u662f\u6240\u6709\u6876\uff08\u6570\u7ec4\u7d22\u5f15\uff09\u3002\u5373\u8f93\u5165<code>key</code>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5f97\u5230\u8be5<code>key</code>\u5bf9\u5e94\u7684\u952e\u503c\u5bf9\u5728\u6570\u7ec4\u4e2d\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002</li> <li>\u8d1f\u8f7d\u56e0\u5b50\uff1a\u54c8\u5e0c\u8868\u5143\u7d20\u6570\u91cf\u9664\u4ee5\u6876\u6570\u91cf\u3002\u7528\u4e8e\u8861\u91cf\u54c8\u5e0c\u51b2\u7a81\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u4e5f\u5e38\u4f5c\u4e3a\u54c8\u5e0c\u8868\u6269\u5bb9\u7684\u89e6\u53d1\u6761\u4ef6\u3002</li> </ul> <p>collision: A collision occurs when we hash two nonidentical identifiers into the same bucket.</p> <p>overflow: An overflow occurs when we hash a new identifier into a full bucket.</p>"},{"location":"cs/ds/hashing/#hash-function","title":"Hash Function","text":""},{"location":"cs/ds/hashing/#properties-of-f","title":"Properties of \\(f\\):","text":"<ul> <li>must be easy to compute and minimizes the number of collisions.</li> <li>should be unbiased. That is, for any \\(x\\) and any \\(i\\), we have the Probability \\((f(x)=i)=\\frac{1}{b}\\). Such kind of a hash function is called a uniform hash function.</li> </ul>"},{"location":"cs/ds/hashing/#_1","title":"\u54c8\u5e0c\u7b97\u6cd5\u7684\u8bbe\u8ba1","text":"<ul> <li>\u52a0\u6cd5\u54c8\u5e0c\uff1a\u5bf9\u8f93\u5165\u7684\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7801\u8fdb\u884c\u76f8\u52a0\uff0c\u5c06\u5f97\u5230\u7684\u603b\u548c\u4f5c\u4e3a\u54c8\u5e0c\u503c\u3002</li> <li>\u4e58\u6cd5\u54c8\u5e0c\uff1a\u5229\u7528\u4e58\u6cd5\u7684\u4e0d\u76f8\u5173\u6027\uff0c\u6bcf\u8f6e\u4e58\u4ee5\u4e00\u4e2a\u5e38\u6570\uff0c\u5c06\u5404\u4e2a\u5b57\u7b26\u7684 ASCII \u7801\u7d2f\u79ef\u5230\u54c8\u5e0c\u503c\u4e2d\u3002</li> <li>\u5f02\u6216\u54c8\u5e0c\uff1a\u5c06\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e2a\u5143\u7d20\u901a\u8fc7\u5f02\u6216\u64cd\u4f5c\u7d2f\u79ef\u5230\u4e00\u4e2a\u54c8\u5e0c\u503c\u4e2d\u3002</li> </ul> <p>\u4f7f\u7528\u5927\u8d28\u6570\u4f5c\u4e3a\u6a21\u6570\uff0c\u53ef\u4ee5\u6700\u5927\u5316\u5730\u4fdd\u8bc1\u54c8\u5e0c\u503c\u7684\u5747\u5300\u5206\u5e03\u3002\u56e0\u4e3a\u8d28\u6570\u4e0d\u4e0e\u5176\u4ed6\u6570\u5b57\u5b58\u5728\u516c\u7ea6\u6570\uff0c\u53ef\u4ee5\u51cf\u5c11\u56e0\u53d6\u6a21\u64cd\u4f5c\u800c\u4ea7\u751f\u7684\u5468\u671f\u6027\u6a21\u5f0f\uff0c\u4ece\u800c\u907f\u514d\u54c8\u5e0c\u51b2\u7a81\u3002</p>"},{"location":"cs/ds/hashing/#separate-chaining","title":"Separate Chaining","text":"<p>\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u94fe\u5f0f\u5730\u5740\uff0c\u5c06\u5355\u4e2a\u5143\u7d20\u8f6c\u4e3a\u94fe\u8868\uff0c\u628a\u53d1\u751f\u54c8\u5e0c\u51b2\u7a81\u7684\u952e\u503c\u5bf9\u90fd\u5b58\u50a8\u5728\u540c\u4e00\u94fe\u8868\u4e2d\u3002</p> <pre><code>struct ListNode;\ntypedef struct ListNode *Position;\nstruct HashTbl;\ntypedef struct HashTbl *HashTable;\nstruct ListNode {\nElementType Element;\nPosition Next;\n};\ntypedef Position List;\nstruct HashTbl {\nint TableSize;\nList *TheLists;\n};\nHashTable initializeTable(int tableSize) {\nHashTable H;\nif (tableSize &lt; minTableSize) {\nprintf(\"Table size too small\");\nreturn NULL;\n}\nH = malloc(sizeof(struct HashTbl));\nif (H == NULL) Error(\"Out of space!!!\");\nH-&gt;TableSize = nextPrime(tableSize);\nH-&gt;TheLists = malloc(sizeof(List) * H-&gt;TableSize);\nif (H-&gt;TheLists == NULL) Error(\"Out of space!!!\");\nfor (int i = 0; i &lt; H-&gt;tableSize; ++i) {\nH-&gt;TheLists[i] = malloc(sizeof(struct ListNode));\nif (H-&gt;TheLists[i] == NULL) Error(\"Out of space!!!\");\nelse H-&gt;TheLists[i]-&gt;Next = NULL;\n}\nreturn H;\n}\nPosition find(ElementType key, HashTable H) {\nPosition P; List L;\nL = H-&gt;TheLists[hash(key, H-&gt;TableSize)];\nP = L-&gt;Next;\nwhile (P != NULL &amp;&amp; P-&gt;Element != key) P = P-&gt;Next;\nreturn P;\n}\nvoid insert(ElementType key, HashTable H) {\nPosition pos, newCell; List L;\npos = find(key, H);\nif (pos == NULL) {\nnewCell = malloc(sizeof(struct ListNode));\nif (newCell == NULL) Error(\"Out of space!!!\");\nelse {\nL = H-&gt;TheLists[hash(key, H-&gt;TableSize)];\nnewCell-&gt;Next = L-&gt;Next;\nnewCell-&gt;Element = key;\nL-&gt;Next = newCell;\n}\n}\n}\n</code></pre>"},{"location":"cs/ds/hashing/#open-addressing","title":"Open Addressing","text":"<ul> <li>find another empty cell to solve collision(avoiding pointers)</li> </ul> <pre><code>void insert(int key) {\nindex = hash(key);\nint i = 0;\nwhile (collision at index) {\nindex = (hash(key) + f(i)) % tableSize;\nif (table is full) break;\nelse i++;\n}\nif (table is full) Error(\"No space left\");\nelse table[index] = key;\n}\n</code></pre>"},{"location":"cs/ds/hashing/#linear-probing","title":"Linear Probing","text":"<p>\\(f(i)=i\\).</p> <p>Analysis of the linear probing show that the expected number of probes:</p> <ul> <li>Foe insertions and unsuccessful searches \\(p=\\frac{1}{2}(1+\\frac{1}{(1-\\lambda)^2})\\).</li> <li>For successful searches \\(p=\\frac{1}{2}(1+\\frac{1}{1-\\lambda})\\)</li> </ul> <p>Cause primary clustering: any key that hashes into the cluster will add to the cluster after several attempts to resolve the collision.</p>"},{"location":"cs/ds/hashing/#quadratic-probing","title":"Quadratic Probing","text":"<p>\\(f(i)=i^2\\).</p> <p>Theorem: If quadratic probing is used, and the table size is prime, then a neew element can always be inserted if the table is at least half empty.</p> <ul> <li>If the table size is a prime of the form 4k + 3, then the quadratic probing  \\(f(i) =i^2 or -i^2\\) can probe the entire table.</li> </ul> <pre><code>Position find(ElementType key, HashTable H) {\nPosition currentPos = hash(key, H-&gt;TableSize);\nint collisionNum = 0;\nwhile (H-&gt;TheCells[currentPos].Info != Empty &amp;&amp; H-&gt;TheCells[currentPos].Element != key) {\ncurrentPos += 2 * ++collisionNum - 1;\nif (currentPos &gt;= H-&gt;TableSize) currentPos -= H-&gt;TableSize;\n}\nreturn currentPos;\n}\n</code></pre> <pre><code>void insert(ElementType key, HashTable H) {\nPosition pos = find(key, H);\nif (H-&gt;TheCells[pos].Info != Legitimate) {\nH-&gt;TheCells[pos].Info = Legitimate;\nH-&gt;TheCells[pos].Element = key;\n}\n}\n</code></pre>"},{"location":"cs/ds/hashing/#double-hashing","title":"Double Hashing","text":"<p>\\(f(i)=i*hash_2(x)\\)</p> <p>\\(hash_2(x)=R-(x \\mod R)\\) with \\(R\\) a prime smaller than Tablesize will work well.</p> <ul> <li>If double hashing is correctly implemented, simulations imply that the expected number of probes is almost the same as for a random collision resolution strategy.</li> <li>Quadratic probing does not require the use of a second hash function and is thus likely to be simpler and faster in practice.</li> </ul>"},{"location":"cs/ds/hashing/#rehashing","title":"Rehashing","text":""},{"location":"cs/ds/pta/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840\u7406\u8bba\u9898","text":"<p> \u7ea6 1993 \u4e2a\u5b57  11 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p>"},{"location":"cs/ds/pta/#_2","title":"\u7b97\u6cd5\u5206\u6790","text":"<pre><code>if ( A &gt; B ){     for ( i=0; i&lt;N*2; i++ )         for ( j=N*N; j&gt;i; j-- )             C += A; }\nelse {     for ( i=0; i&lt;N*N/100; i++ )         for ( j=N; j&gt;i; j-- ) for ( k=0; k&lt;N*3; k++)\nC += B; } </code></pre> <p>The lowest upper bound of the time complexity is \\(O(N^3)\\)</p> <p>\u672c\u6765\u770b\u5230<code>for</code>\u5faa\u73af\u91cc\u6709\u4e2a<code>n*n</code>\uff0c\u76f4\u63a5\u4ee5\u4e3a\u590d\u6742\u5ea6\u662f\\(O(N^4)\\),\u4f46\u662f\u8981\u6ce8\u610f\u5f53<code>i</code>\u5230<code>n</code>\u65f6\u4e0b\u5c42\u5faa\u73af\u5c31\u8fdb\u4e0d\u53bb\u4e86\uff01</p> <ul> <li>\u5206\u6790\u590d\u6742\u5ea6\uff1a</li> </ul> \\[ T(1)=1,T(N)=T(N/3)+1\\\\T(1)=1,T(N)=3T(N/3)+1 \\] <p>\u53ef\u4ee5\u7528\u76f4\u63a5\u4ee3\u5165\u6cd5\uff0c\u76f4\u5230\\(N/3^K\\)\u4e3a\\(1\\)\uff1a $$ T(N)=T(N/3)+1=\\cdots=T(N/3^k)+k,k=clogN $$ \u6240\u4ee5\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\),\u7c7b\u4f3c\u5730\uff0c\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N)\\)</p> <ul> <li>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9012\u5f52\u7248\u672c\u7684\u65f6\u95f4\u590d\u6742\u5ea6:\\(\\Theta (F_N)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\\(O(N)\\), \u8fed\u4ee3\u7248\u672c\u7684\u590d\u6742\u5ea6\\(O(N)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\\(O(1)\\)\u3002</li> <li>\u4e0e\u6570\u636e\u5143\u7d20\u672c\u8eab\u7684\u5f62\u5f0f\u3001\u5185\u5bb9\u3001\u76f8\u5bf9\u4f4d\u7f6e\u3001\u4e2a\u6570\u65e0\u5173\u7684\u662f\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u3002</li> </ul>"},{"location":"cs/ds/pta/#_3","title":"\u7ebf\u6027\u8868","text":"<ul> <li>For a sequentially stored linear list of length \\(N\\), the time complexities for deleting the first element and inserting the last element are \\(O(1)\\) and \\(O(N)\\), respectively.</li> </ul> <p>\u7ebf\u6027\u8868\u662f\u4e00\u79cd\u6982\u5ff5\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\u548c\u94fe\u8868\u5b9e\u73b0\u3002sequentially stored linear list\u4ee3\u8868\u6570\u7ec4\uff0c\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u590d\u6742\u5ea6\u662f\\(O(N)\\), \u56e0\u4e3a\u9700\u8981\u5c06\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u3002</p> <ul> <li> <p>To merge two singly linked ascending lists, both with N nodes, into one singly linked ascending list, the minimum possible number of comparisons is:\\(O(N)\\) \u628a\u4e00\u4e2a\u63a5\u5230\u53e6\u4e00\u4e2a\u540e\u9762\uff0c\u4f46\u662f\u627e\u7b2c\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u9700\u8981\u904d\u5386\u4e00\u904d\u3002</p> </li> <li> <p>Suppose that an array is used to store a circular queue, the value of <code>front</code> maye be greater than <code>rear</code>.</p> </li> <li> <p>\u5c06\u957f\u5ea6\u4e3a\\(m,n\\)\u7684\u4e24\u4e2a\u5355\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(1)\\)! \u53ea\u9700\u5c06\u4e00\u4e2a\u63a5\u5728\u53e6\u4e00\u4e2a\u540e\u9762\u5373\u53ef\uff0cmerge\u7684\u590d\u6742\u5ea6\u662f\\(O(M+N)\\)\u3002</p> </li> <li> <p>Cirular queue is defined to be a queue implemented by a circularly linked list or a circular array(F) \u5faa\u73af\u961f\u5217\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u4e0d\u5c40\u9650\u4e8e\u5b9e\u73b0\u65b9\u5f0f\u3002</p> </li> <li> <p>\u5224\u65ad\u5faa\u73af\u961f\u5217\u4e3a\u7a7a\u7684\u6761\u4ef6\uff1a<code>Q.front==Q.rear</code>\uff0c \u5224\u65ad\u4e3a\u6ee1\u7684\u6761\u4ef6\uff1a<code>front==(rear+1)%size</code></p> </li> <li> <p>multilist \u662f\u4e00\u79cd\u9012\u5f52\u7684\u6570\u636e\u7ed3\u6784</p> </li> </ul>"},{"location":"cs/ds/pta/#_4","title":"\u6811","text":"<ul> <li>It is always possible to represent a tree by a one-dimensional integer array.</li> </ul> <p>\u5bf9\u7684\u3002\u6211\u4eec\u77e5\u9053\u4efb\u4f55\u4e8c\u53c9\u6811\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e00\u7ef4\u6570\u7ec4\u8868\u793a\uff0c\u800c\u4efb\u4f55\u6811\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u4e8c\u53c9\u6811\u3002(FirstChild-NextSibiling)</p> <ul> <li>There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child.</li> </ul> <p>\u9519\u8bef\u3002\u5047\u8bbe\u6ca1\u6709\u5b69\u5b50\u7684\u7ed3\u70b9\u4e2a\u6570\\(n_0\\), \u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\u4e2a\u6570\u4e3a\\(n_1\\), \u4e24\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\u4e2a\u6570\\(n_2\\). \u5219\u53ef\u5f97\u5230\u5982\u4e0b\u7b49\u5f0f\uff1a $$ n_0+n_1+n_2=2016\\1+n_1+2n_2=2016 $$ \u53ef\u4ee5\u5f97\u5230\u5f53\\(n_1=16\\)\u65f6\\(2n_2=1999\\)\uff0c\u6545\u9519\u8bef\u3002</p> <ul> <li>If a general tree \\(T\\) is converted into a binary tree \\(BT\\), then which of the following \\(BT\\) traversals gives the same sequence as that of the post-order traversal of \\(T\\)?</li> </ul> <p>In-order traversal.</p> <ul> <li>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order. (T)</li> <li> <p>In a binary search tree which contains several integer keys including 4, 5, and 6, if 4 and 6 are on the same level, then 5 must be their parent.(F)</p> </li> <li> <p>Given a binary search tree with 20 integer keys which include 10, 11, and 12, if 10 and 12 are on the same level, then 11 must be their common ancestor.\u6ce8\u610f\u4e0e\u4e0a\u9898\u7684\u533a\u522b\uff0ccommon ancestor \u4e0d\u4e00\u5b9a\u662fparent\u3002</p> </li> <li> <p>For a binary search tree, in which order of traversal that we can obtain a non-decreasing sequence?  inorder traversal.</p> </li> <li>There are more NULL pointers than the actual pointers in the linked representation of any binary tree.(?)</li> <li>An inorder threaded binary tree cannot make the postorder traversal more efficient.</li> <li>convert a general tree \\(T\\) into a binary tree \\(BT\\), there are \\(n_0\\) leaf nodes in \\(T\\) and \\(m_0\\) leaf nodes in \\(BT\\). Then \\(n_0\\ge m_0\\)\u3002</li> <li>If the inorder and the postorder traversal sequences of a binary tree have exactly the same order, then none of the nodes in the tree has a right subtree.</li> <li>\u4e8c\u53c9\u6811\u662f\u5ea6\u4e3a2\u7684\u6811\u3002\u9519\u8bef\uff01\u5ea6\u4e3a0/1/2\u3002</li> <li>\u5148\u5e8f\u4e2d\u5e8f\u540e\u5e8f\u904d\u5386\u662f\u5bf9\u6839\u8282\u70b9\u800c\u8a00\u7684\uff0c\u53f6\u5b50\u7ed3\u70b9\u7684\u987a\u5e8f\u4e0d\u53d8\u3002</li> <li>\u4e00\u9897\u6811\u8f6c\u5316\u4e3a\u4e8c\u53c9\u6811\uff0c\u5148\u5e8f\u7b49\u4e8e\u5148\u5e8f\uff0c\u539f\u6811\u7684\u540e\u5e8f\u7b49\u4e8eBT\u7684\u4e2d\u5e8f</li> </ul>"},{"location":"cs/ds/pta/#_5","title":"\u5806","text":"<p>\\(\\lfloor n/2\\rfloor\\)\u662f\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\uff0c\u4e0d\u53ef\u80fd\u4e3a\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u552f\u4e00\u6709\u53ef\u80fd\u7684\u5c31\u662f\u5927\u4e8e\\(n/2\\)\u7684index\u3002</p> <p></p> <p></p> <p>\u6ce8\u610f\u5230\u8fd9\u662f\u5b8c\u5168\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6700\u5927\u503c\u53ef\u80fd\u5728\u4e0a\u4e00\u5c42\u6700\u53f3\u8fb9\u7684\u7ed3\u70b9,\u8be5\u8282\u70b9\u53ea\u6709\u5de6\u513f\u5b50\u3002</p>"},{"location":"cs/ds/pta/#_6","title":"\u56fe","text":"<ul> <li>In a directed graph, the sum of the in-degrees must be equal to the sum of the out-degrees of all the vertices.</li> </ul> <p>\u5165\u5ea6\u548c\u51fa\u5ea6\u5bf9\u5e94\u4e00\u6761\u8fb9\u7684\u8d77\u59cb\u548c\u7ed3\u675f\uff0c\u5982\u679c\u51fa\u5165\u5ea6\u4e0d\u76f8\u7b49\u8bf4\u660e\u6709\u4e00\u6761\u8fb9\u53ea\u548c\u4e00\u4e2a\u9876\u70b9\u76f8\u8fde\u3002</p> <ul> <li>If graph G is NOT connected and has 35 edges, then it must have at least ____ vertices</li> </ul> <p>9\u4e2a\u9876\u70b9\u7684\u8fde\u901a\u56fe\u6700\u591a\u6709\\(C_n^2=36\\)\u6761\u8fb9\uff0c35\u4e5f\u7b26\u5408\uff0c8\u4e2a\u9876\u70b9\u8fde\u901a\u56fe\u6700\u591a\u670928\u6761\u8fb9\uff0c\u4e0d\u7b26\u5408\u3002\u56e0\u6b64\u8981\u4f7f\u5f97\u56fe\u4e0d\u8fde\u901a\uff0c\u81f3\u5c11\u898110\u4e2avertice.</p> <ul> <li>A graph with 90 vertices and 20 edges must have at least __ connected component(s).</li> </ul> <p>\u7531\u6b27\u62c9\u516c\u5f0f\uff0c\u5bf9\u4e8e\u8fde\u901a\u56fe\\(r=e-v+2\\), \u5c06\u4e00\u4e2a\u56fe\u7684\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u82e5\u6709\\(k\\)\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5219\\(R=E-V+2k\\), \u4f46\u662f\u6240\u6709\u8fde\u901a\u5206\u91cf\u6700\u5916\u90e8\u7684\u533a\u57df\u88ab\u7b97\u4e86\\(k\\)\u6b21\uff0c\u56e0\u6b64\u6700\u7ec8\\(R=E-V+k+1\\), \u4ee3\u5165\u53ef\u5f97\\(k=R+69\\), \u4e3a\u4f7f\u8fde\u901a\u5206\u91cf\u6700\u5c0f\uff0c\u53d6\\(R=1\\).</p> <ul> <li>Given an undirected graph \\(G\\) with 16 edges, where 3 vertices are of degree 4, 4 vertices are of degree 3, and all the other vertices are of degrees less than 3. Then \\(G\\) must have at least __ vertices.</li> </ul> <p>\u6839\u636e\\(\\sum (degree)=2e\\), \u5f97\u5230\\(32=12+12+d(v-7)\\), \u7531\u4e8e\\(d&lt;3\\),\u6545\\(8\\le 2(v-7)\\)</p> <ul> <li>A graph with 50 vertices and 17 edges must have at most ____ connected component(s).</li> <li>If an undirected graph \\(G=(V,E)\\) contains 10 vertices. Then to guarantee that \\(G\\) is connected in any cases, there has to be at least __ edges.</li> </ul> <p>9\u4e2avertices\u7684\u5b8c\u5168\u56fe\u52a0\u4e0a\u4e00\u6761\u8fb9\u3002</p> <ul> <li>\u4e00\u4e2a\u6709\u6743\u56fe\u53ef\u80fd\u6ca1\u6709\u6700\u5c0f\u751f\u6210\u6811\u3002</li> <li>Apply DFS to a directed acyclic graph, and output the vertex before the end of each recursion, the output sequence will be reversely topologically sorted.</li> <li>Graph G is an undirected completed graph of 20 nodes. Is there an Euler circuit in G? If not, in order to have an Euler circuit, what is the minimum number of edges which should be removed from G?</li> </ul> <p>20\u4e2a\u7ed3\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\u6bcf\u4e2a\u7ed3\u70b9\u7684degree\u662f19\uff0c\u800cEuler Circuit\u5b58\u5728\u7684\u6761\u4ef6\u662f\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\u90fd\u662feven\u7684\u3002\u5220\u9664\u4e00\u6761\u8fb9\u4f1a\u6709\u4e24\u4e2a\u7ed3\u70b9\u51cf\u5c11\u4e00\u4e2a\u5ea6\uff0c\u56e0\u6b64\u81f3\u5c11\u8981\u5220\u9664\u5341\u6761\u8fb9\u3002</p>"},{"location":"cs/ds/pta/#_7","title":"\u6392\u5e8f","text":"<ul> <li>Use simple insertion sort to sort 10 numbers from non-decreasing to non-increasing, the possible numbers of comparisons and movements are </li> </ul> <p>10\u4e2a\u5143\u7d20\u9006\u5e8f\uff0c\u6709\\(C_{10}^{2}\\)\u7684\u9006\u5e8f\u5bf9\uff0c\u56e0\u6b64\u4ea4\u6362\u7684\u6b21\u6570\u4e0d\u4f1a\u5927\u4e8e45\u3002</p> <ul> <li>To sort \\(N\\) elements by heap sort, the extra space complexity is \\(O(1)\\).</li> <li>To sort \\(N\\) records by merge sort, the worst-case time complexity is \\(O(NlogN)\\) \u6700\u4f18\u6700\u7cdf\u60c5\u51b5\u90fd\u662f\\(NlogN\\).</li> <li>During the sorting, processing every element which is not yet at its final position is called a \"run\". To sort a list of integers using quick sort, it may reduce the total number of recursions by processing the small partion first in each run.(F)</li> </ul> <p>\u5b9e\u9645\u4e0a\u662f\u5728\u95ee\u662f\u4ec0\u4e48\u5f71\u54cd\u4e86\u5feb\u6392\u7684\u9012\u5f52\u6df1\u5ea6\u3002\u9012\u5f52\u6df1\u5ea6\u53ea\u4e0ePivot\u7684\u9009\u62e9\u6709\u5173\u3002\u5982\u679c\u6bcf\u6b21\u9009pivot\u90fd\u9009\u6700\u5927\u6216\u6700\u5c0f\uff0c\u9012\u5f52\u6df1\u5ea6\u662f\u6700\u5927\u7684\u3002</p> <ul> <li>Array with less inversions are great for insertion sort.</li> <li>Among the following sorting methods, which ones will be slowed down if we store the elements in a linked structure instead of a sequential structure?   1. Insertion sort; 2. Selection Sort; 3. Bubble sort; 4. Shell sort; 5. Heap sort</li> </ul> <p>\u5728\u94fe\u8868\u4e2d\u53d8\u6162\u7684\u64cd\u4f5c\u662f\u8bbf\u95ee\u7b2c\\(n\\)\u4e2a\u5143\u7d20\uff0c\u53d8\u5feb\u7684\u662f\u63d2\u5165\u3002\u6240\u4ee5\u662f\u5e0c\u5c14\u6392\u5e8f\u548c\u5806\u6392\u5e8f\u3002</p> <p></p> <p>\u5728\u5feb\u901f\u6392\u5e8f\u4e2d\uff0c\u6bcf\u8f6e\u6392\u5e8f\u80fd\u591f\u786e\u5b9a1\u4e2a\u6700\u7ec8\u7684\u4f4d\u7f6e\uff0c\u5373<code>pivot</code>\u7684\u4f4d\u7f6e\u3002\u5f53<code>pivot</code>\u7684\u4f4d\u7f6e\u4e0d\u5728\u6700\u524d\u9762\u6216\u8005\u6700\u540e\u9762\u65f6\uff0c\u4e24\u8f6e\u8fc7\u540e\u5e94\u8be5\u67093\u4e2apivot\u7684\u4f4d\u7f6e\u88ab\u786e\u5b9a\u3002</p> <ul> <li>The average run time of Heapsort for sorting \\(n\\) elements is \\(O(N\\log N)\\)</li> </ul>"},{"location":"cs/ds/pta/#_8","title":"\u54c8\u5e0c","text":"<p>\u6ce8\u610f\u5f00\u653e\u5bfb\u5740\u7684\u51e0\u4e2a\u65b9\u6cd5\u7684\u533a\u522b\uff1a</p> <ul> <li>linear probing \\(f(i)=i\\).</li> <li>quadratic probing \\(f(i)=i^2\\)</li> <li>double hashing \\(f(i)=i\\times hash_2(x)\\)</li> </ul> <p>\u6ce8\u610f\u662f\u5728\u521d\u59cb\u7684hash key\u4e0a\u52a0\u4e0a\\(f(i)\\)\u3002</p> <ul> <li>The average search time of searching a hash table with \\(N\\) elements cannot be determined</li> </ul> <p>\u6211\u4eec\u4e0d\u786e\u5b9a\u662f\u5426\u53d1\u751f\u54c8\u5e0c\u51b2\u7a81\u3002</p> <ul> <li>the expected number of probes for insertions is greater than that for successful searches in linear probing method</li> </ul> <p>\u4e0d\u8981\u5fd8\u8bb0\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff1a\\(p=\\frac{1}{2}(1+\\frac{1}{(1-\\lambda)^2})\\) for insertions and unsuccessful search, and \\(p=\\frac{1}{2}(1+\\frac{1}{1-\\lambda})\\) for successful searches.</p> <p></p> <p>\u6ce8\u610frehashing\u65f6\uff0c\u628a\u8868\u957f\u589e\u52a0\u4e24\u500d\u4e4b\u540e\u8fd8\u8981\u53d6\u8d28\u6570\uff0c\u6545\u6700\u7ec8\u8868\u957f\u4e3a23\u3002</p> <ul> <li>\u54c8\u5e0c\u8868\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u662f\u88c5\u586b\u56e0\u5b50\u7684\u51fd\u6570</li> </ul> <p>\\(S_n=-\\frac{1}{\\alpha}\\ln (1-\\alpha)\\)</p>"},{"location":"cs/ds/sorting/","title":"Sorting","text":"<p> \u7ea6 332 \u4e2a\u5b57  77 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/ds/sorting/#insertion-sort","title":"Insertion Sort","text":"<pre><code>void InsertionSort ( ElementType A[ ], int N ) { int  j, P; ElementType  Tmp; for ( P = 1; P &lt; N; P++ ) { Tmp = A[ P ];  /* the next coming card */\nfor ( j = P; j &gt; 0 &amp;&amp; A[ j - 1 ] &gt; Tmp; j-- ) A[ j ] = A[ j - 1 ]; /* shift sorted cards to provide a position for the new coming card */\nA[ j ] = Tmp;  /* place the new card at the proper position */\n}  /* end for-P-loop */\n}\n</code></pre> <ul> <li>The worst case: Input <code>A[]</code> is in reverse order. \\(T(N)=O(N^2)\\).</li> <li>The best case: Input <code>A[]</code> is in sorted order. \\(T(N)=O(N)\\).</li> </ul>"},{"location":"cs/ds/sorting/#a-lower-bound-for-simple-sorting-algorithms","title":"A Lower Bound for Simple Sorting Algorithms","text":"<p>inversion: An inversion in an array of numbers is any ordered pair \\((i,j)\\) having the property that \\(i&lt;j\\) but <code>A[i]&gt;A[j]</code>.</p> <p>\\(T(N,I)=O(I+N)\\) where \\(I\\) is the number of inversions in the original array.</p> <p>Theorem:</p> <ul> <li> <p>The average number of inversions in an array of \\(N\\) distinct numbers is \\(\\frac{N(N-1)}{4}\\).</p> </li> <li> <p>Any algorithm that sorts by exchanging adjacent elements requires \\(\\Omega(N^2)\\) time on average.</p> </li> </ul>"},{"location":"cs/ds/sorting/#shellsort","title":"Shellsort","text":"<p>\u5e0c\u5c14\u6392\u5e8f\u7684\u5b9e\u8d28\u5c31\u662f\u5206\u7ec4\u63d2\u5165\u6392\u5e8f\u3002</p> <ul> <li>Define an increment sequence \\(h_1&lt;h_2&lt;\\cdots&lt;h_t\\) (\\(h_1=1\\))</li> <li>Define an \\(h_k\\)-sort at each phase for \\(k-t,t-1,\\cdots,1\\)</li> <li>An \\(h_k\\)-sort file that is then \\(h_{k-1}\\)-sorted remains \\(h_k\\)-sort.</li> </ul> <p></p> <pre><code>void shellSort(int arr[], int n) {\nint i, j, tmp;\nfor (int inc = N/2; inc &gt; 0; inc /= 2) {\nfor (i = inc; i &lt; N; ++i) {\ntmp = arr[i];\nfor (j = i; j &gt;= inc; j -= inc) {\nif (tmp &lt; arr[j - inc])\narr[j] = arr[j - inc];\nelse\nbreak;\n}\na[j] = tmp;\n}\n}\n}\n</code></pre> <ul> <li>Shell's increment sequence: \\(h_t=N/2\\),\\(h_k=h_{k+1}/2\\)</li> </ul> <p>worst case: using Shell's increments: \\(\\Theta(N^2)\\)</p> <ul> <li>Hibbard's increment sequence: \\(h_k=2^k-1\\)</li> </ul> <p>worst case\uff1a using Hibbard's increments: \\(\\Theta(N^{\\frac{3}{2}})\\)</p> <p>\\(T_{avg-Hibbard}(N)=O(N^{\\frac{5}{4}})\\)</p>"},{"location":"cs/ds/sorting/#heapsort","title":"HeapSort","text":""},{"location":"cs/ds/sorting/#algorithm-1","title":"Algorithm 1","text":"<pre><code>BuildHeap(H);\nfor(i=0;i&lt;N;i++)\nTmpH[i]=DeleteMin(H); //O(logN)\nfor(i=0;i&lt;N;i++)\nH[i]=TmpH[i];\n</code></pre> <p>\\(T(N)=O(NlogN)\\)</p> <p>\u4f7f\u7528\u4e86Tmp\u6570\u7ec4\u6765\u5b58\u50a8\u6700\u5c0f\u503c\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u7ffb\u500d\u3002</p>"},{"location":"cs/ds/sorting/#algorithm-2","title":"Algorithm 2","text":"<p>\u4f7f\u7528\u6700\u5927\u5806\uff0c\u4e0d\u7528\u989d\u5916\u5f00\u8f9f\u7a7a\u95f4\u3002</p> <pre><code>void heapSort(int arr[], int n) {\nfor (int i = n / 2; i &gt;= 0; --i) //BuildHeap\npercolateDown(arr, i, n);\nfor (int i = n - 1; i &gt; 0; --i) {\nswap(&amp;arr[0], &amp;arr[i]);//Deletmax\npercolateDown(arr, 0, i);\n}\n}\n</code></pre> <p>Theorem: The average number of comparisons used to heapsort a random permutation of \\(N\\) distinct items is \\(2NlogN-O(NloglogN)\\).</p> <p>Although Heapsort gives the best average time, in practice it is slower than a version of Shellsort that uses Sedgewick\u2019s increment sequence.</p>"},{"location":"cs/ds/sorting/#mergesort","title":"Mergesort","text":"<ul> <li>Merge two sorted lists: \\(T(N)=O(N)\\)</li> </ul> <pre><code>void mergeSort(int arr[], int n) {\nint *tmp = malloc(sizeof(int) * n);\nif (tmp != NULL) {\nmergeSortHelper(arr, tmp, 0, n - 1);\nfree(tmp);\n} else {\nprintf(\"No space for tmp array!\\n\");\n}\n}\nvoid mergeSortHelper(int arr[], int tmp[], int left, int right) {\nif (left &lt; right) {\nint center = (left + right) / 2;\nmergeSortHelper(arr, tmp, left, center);\nmergeSortHelper(arr, tmp, center + 1, right);\nmerge(arr, tmp, left, center + 1, right);\n}\n}\nvoid merge(int arr[], int tmp[], int leftPos, int rightPos, int rightEnd) {\nint leftEnd = rightPos - 1;\nint tmpPos = leftPos\nint numElements = rightEnd - leftPos + 1;\nwhile (leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd)\nif (arr[leftPos] &lt;= arr[rightPos])\ntmp[tmpPos++] = arr[leftPos++];\nelse\ntmp[tmpPos++] = arr[rightPos++];\nwhile (leftPos &lt;= leftEnd)\ntmp[tmpPos++] = arr[leftPos++];\nwhile (rightPos &lt;= rightEnd)\ntmp[tmpPos++] = arr[rightPos++];\nfor (int i = 0; i &lt; numElements; ++i, rightEnd--)\narr[rightEnd] = tmp[rightEnd];\n}\n</code></pre> <p>Mergesort requires linear extra memory, and copying an array is slow.  It is hardly ever used for internal sorting, but is quite useful for external sorting.</p> <p>\\(T(N)=2T(N/2)+O(N)=2^kT(N/2^k)+kO(N)=O(N+NlogN)\\)</p>"},{"location":"cs/ds/tree/","title":"\u4e00\u4e9b\u7b97\u6cd5\u53ca\u4ee3\u7801\u5b9e\u73b0","text":"<p> \u7ea6 920 \u4e2a\u5b57  404 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p> <p>Abstract</p> <p>\u8bb0\u5f55\u6211\u5b66\u4e60\u5230\u7684\u7b97\u6cd5</p>"},{"location":"cs/ds/tree/#_2","title":"\u56fe\u8bba","text":""},{"location":"cs/ds/tree/#_3","title":"\u56fe\u7684\u5b58\u50a8\u2014\u2014\u94fe\u5f0f\u524d\u5411\u661f","text":"<p>\u94fe\u5f0f\u524d\u5411\u661f\u5c31\u662f\u9759\u6001\u5efa\u7acb\u7684\u90bb\u63a5\u8868\uff0c\u5b58\u50a8\u7684\u662f\u4ee5\\((1,n)\\)\u4e3a\u8d77\u70b9\u7684\u8fb9\u7684\u96c6\u5408\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>struct edge{\nint next;//\u8868\u793a\u4e0e\u8fd9\u4e2a\u8fb9\u8d77\u70b9\u76f8\u540c\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\nint to;//\u8be5\u6761\u8fb9\u6307\u5411\u7684\u70b9\nint w;//\u6743\u503c\n}edge[MAX];//\u8fb9\u96c6\nint head[MAX];//\u8868\u793a\u4ee5i\u4e3a\u8d77\u70b9\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\nint cnt=0;//cnt \u4f5c\u4e3a\u7ed3\u6784\u4f53\u4e0b\u6807\n</code></pre> <p>\u52a0\u8fb9\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>void addedge(int u,int v,int w){\nedge[++cnt].next=head[u];//\u4ee5u\u4e3a\u8d77\u70b9\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u5373\u4e0e\u8be5\u8fb9\u8d77\u70b9\u76f8\u540c\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\nedge[cnt].to=v;//\u8be5\u8fb9\u7684\u7ec8\u70b9\nedge[cnt].w=w;\nhead[u]=cnt;//\u66f4\u65b0\u4ee5u\u4e3a\u8d77\u70b9\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\n}\n</code></pre> <p>\u904d\u5386\u51fd\u6570\uff1a</p> <pre><code>for(int i=1;i&lt;=n;i++){\nprintf(\"%d\\n\",i);\nfor(int j=head[i];j;j=edge[j].next){\nprintf(\"%d %d %d\\n\",i,edge[j].to,edge[j].w);\n}\n}\n//\u7b2c\u4e00\u5c42\u5faa\u73af\u627e\u5230\u56fe\u4e2d\u7684\u6240\u6709\u70b9\uff0c\u7b2c\u4e8c\u6b21\u5faa\u73af\u904d\u5386\u4ee5i\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u3002head[i]\u662f\u4ee5i\u4e3a\u8d77\u70b9\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u901a\u8fc7edge[j].next\u627e\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u76f4\u81f3\u7b2c\u4e00\u6761\u8fb9,head\u521d\u59cb\u5316\u4e3a0\uff0c\u6545\u7ec8\u6b62\u6761\u4ef6\u4e3aj=0\n</code></pre>"},{"location":"cs/ds/tree/#_4","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u62d3\u6251\u6392\u5e8f\u662f\u7528\u4e8e\u5904\u7406\u6709\u5411\u65e0\u73af\u56feDAG\u7684\u95ee\u9898\u3002</p> <ul> <li>\u521d\u59cb\u5316\u961f\u5217\uff0c\u5c06\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u653e\u5165\u961f\u5217(DAG\u4e00\u5b9a\u6709\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9)</li> <li>\u53d6\u51fa\u961f\u9996\uff0c\u904d\u5386\u5176\u51fa\u8fb9\uff0c\u5c06\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u5165\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u7ef4\u62a4\u7b54\u6848\u6570\u7ec4(\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3)</li> <li>\u82e5\u6b64\u65f6\u4e00\u4e2a\u70b9\u5165\u5ea6\u4e3a1\uff0c\u5219\u5165\u961f</li> <li>\u91cd\u590d2\u76f4\u81f3\u961f\u5217\u4e3a\u7a7a\u3002</li> </ul> <p>\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5b8c\u6210\u5404\u9879\u5de5\u4f5c\u6709\u4e00\u5b9a\u4f9d\u8d56\u6761\u4ef6\uff0c\u5728\u8fdb\u884c\u5de5\u4f5cX\u4e4b\u524d\u9700\u8981\u5b8c\u6210\u5176\u5b83\u7684\u5de5\u4f5c\u3002\u56e0\u6b64\u5b8c\u6210\u5de5\u4f5cX\u6240\u9700\u7684\u65f6\u95f4\u548c\u6240\u6709X\u6240\u4f9d\u8d56\u7684\u5de5\u4f5c\u5b8c\u6210\u65f6\u95f4\u7684\u6700\u5927\u503c\u6709\u5173\uff1a\\(f_i=max\\left\\{pre_i\\right\\}+a_i\\)</p> <pre><code>void topology_sort()\n{\nint queue[MAX];\nint front=0;\nint rear=0;\nfor(int i=1;i&lt;=n;i++){\nif(in[i]==0){\nqueue[rear++]=i;\ndp[i]=time[i];//\u6bcf\u9879\u5de5\u4f5c\u7684\u65f6\u95f4\n}\n}\nwhile(front!=rear){\nint d = queue[front++];\nfor(int i=head[d];i;i=edge[i].next){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\nint v=edge[i].to;\nin[v]--;\nif(in[v]==0){\nqueue[rear++]=v;\n}\nif(dp[v]&lt;dp[d]+time[v]){\ndp[v]=dp[d]+time[v];//\u52a8\u6001\u89c4\u5212\n}\n}\n}\nfor(int i=1;i&lt;=n;i++){\nans=ans&gt;dp[i]?ans:dp[i];\n}\n}\n</code></pre>"},{"location":"cs/ds/tree/#_5","title":"\u7f51\u7edc\u6d41\u95ee\u9898","text":""},{"location":"cs/ds/tree/#edmonds-karp","title":"Edmonds-Karp \u589e\u5e7f\u8def\u7b97\u6cd5","text":"<ul> <li>\u4e0d\u65ad\u7528BFS\u5bfb\u627e\u589e\u5e7f\u8def\u5e76\u66f4\u65b0\u6700\u5927\u6d41\u91cf\u503c\uff0c\u76f4\u5230\u7f51\u7edc\u4e0a\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u4e3a\u6b62\u3002</li> <li>\u53cd\u5411\u8fb9\uff1a \u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u5305\u542b\u4e8e\u591a\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u6240\u4ee5\u9700\u8981\u8ba9\u8fd9\u6761\u8fb9\u6709\u591a\u6b21\u88ab\u9009\u62e9\u7684\u673a\u4f1a\u3002\u5728\u5b9e\u73b0\u4e0a\u4f7f\u7528\u90bb\u63a5\u8868\u6210\u5bf9\u5b58\u50a8\uff0c\u8fd9\u6837\u5728\u66f4\u65b0\u8fb9\u6743\u65f6\uff0c\u5229\u7528\u5947\u6570\u5f02\u62161\u76f8\u5f53\u4e8e\u51cf1\uff0c\u5076\u6570\u5f02\u62161\u76f8\u5f53\u4e8e\u52a01\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5f02\u62161\u7684\u65b9\u5f0f\u627e\u5230\u5bf9\u5e94\u7684\u6b63\u5411\u8fb9\u6216\u53cd\u5411\u8fb9\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define MAX 520005;\nstruct node{\nint to,net;\nlong long val;\n}e[MAX];\nint n,m,s,t,u,v;\nlong long w,ans,dis[MAX];\nint tot=1;\nint head[MAX],vis[MAX],pre[MAX];\nvoid add(int u,int v,long long w){\ne[++tot].to=v;\ne[tot].val=w;\ne[tot].net=head[u];\nhead[u]=tot;\ne[++tot].to=u;\ne[tot].val=0;\ne[tot].net=head[v];\nhead[v]=tot;\n}/*\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8*/\n/*\u627e\u589e\u5e7f\u8def\u5f84*/\nint bfs(){\nmemset(vis,0,sizeof(vis));\nint q[MAX];\nint front=0;\nint rear=0;\nq[rear++]=s;\nvis[s]=1;\ndis[s]=0x3f3f3f3f;\nwhile(front!=rear){\nint x=q[front++];\nfor(int i=head[x];i;i=e[i].net){\nif(e[i].val==0) continue;\nint v=e[i].to;\nif(vis[v]==1) continue;\ndis[v]=dis[x]&lt;e[i].val?dis[x]:e[i].val;\npre[v]=i;\nq[rear++]=v;\nvis[v]=1;\nif(v==t) return 1;\n}\n}\nreturn 0;\n}\nvoid update(){\nint x=t;\nwhile(x!=s){\nint v=pre[x];\ne[v].val-=dis[t];\ne[v^1].val+=dis[t];\nx=e[v^1].to;\n}\nans+=dis[t];\n}\nint main(){\nscanf(\"%d%d%d%d\",&amp;n,&amp;m,&amp;s,&amp;t);/*\u70b9\u7684\u4e2a\u6570\uff0c\u6709\u5411\u8fb9\u7684\u4e2a\u6570\uff0c\u6e90\u70b9\uff0c\u6c47\u70b9*/\nfor(int i=1;i&lt;=m;i++){\nscanf(\"%d%d%lld\",&amp;u,&amp;v,&amp;w);\nadd(u,v,w);\n}\nwhile(bfs()){\nupdate();\n}\nprintf(\"%lld\",ans);\n}\n</code></pre>"},{"location":"cs/ds/tree/#_6","title":"\u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"cs/ds/tree/#kruskal","title":"Kruskal\u7b97\u6cd5","text":"<p>\u4e3b\u8981\u601d\u8def\uff1a</p> <ul> <li>\u5c06\u8fb9\u6309\u7167\u6743\u503c\u8fdb\u884c\u6392\u5e8f</li> <li>\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u4f18\u5148\u9009\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u4f9d\u6b21\u8fde\u63a5\uff0c\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\u3002</li> <li>\u76f4\u5230\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e\u603b\u9876\u70b9\u6570-1\u4e3a\u6b62\u3002</li> </ul> <pre><code>void kruskal(){\nsort(edge,edge+m,cmp);//\u7ed3\u6784\u4f53\u5feb\u6392\nfor(int i=0;i&lt;m;i++){\neu=find(edge[i].start);//\u5e76\u67e5\u96c6\u7684find\nev=find(edge[i].to);\nif(eu==ev){\ncontinue;\n}\nans+=edge[i].w;\nf[ev]=eu;\nif(++cnt==n-1){\nbreak;\n}\n}\n}\n</code></pre>"},{"location":"cs/ds/tree/#prim","title":"Prim\u7b97\u6cd5","text":"<p>\u4e3b\u8981\u601d\u60f3\uff1a</p> <p>\u7c7b\u4f3c\u4e8eDijkstra\u7b97\u6cd5\u3002\u628a\u70b9\u5206\u4e3a\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u548c\u672a\u88ab\u52a0\u5165\u7684\uff0c\u6bcf\u6b21\u628a\u8ddd\u79bb\u5df2\u52a0\u5165\u7684\u70b9\u6700\u8fd1\u7684\u8fb9\u52a0\u5165\u751f\u6210\u6811\u3002</p> <p>\u4ee3\u7801\u5b9e\u73b0</p> <p>\u8bb0\\(v_i\\)\u4e3a\u7ed3\u70b9\\(i\\)\u5230\u5df2\u52a0\u5165\u90e8\u5206\u6700\u77ed\u7684\u8fb9\u7684\u957f\u5ea6\u3002</p> <ul> <li>\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u5165\u6700\u5c0f\u5806</li> <li>\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\uff0cpop\uff0c\u5e76\u5224\u65ad\u662f\u5426\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811</li> <li>\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5c06\\(v_i\\)\u52a0\u5165<code>ans</code></li> <li>\u904d\u5386\u6240\u6709\u8fde\u63a5\u7684\u70b9\\(x\\),\u82e5\\(v_x&gt;v_u\\)\uff0c\u5219\u5c06\\(x\\)\u5165\u5806</li> <li>\u76f4\u81f3\u5806\u4e3a\u7a7a\u6216\u8005\u5df2\u7ecf\u52a0\u5165\\(n-1\\)\u6761\u8fb9\u3002</li> </ul>"},{"location":"cs/ds/tree/#_7","title":"\u6c42\u6700\u5c0f\u73af","text":""},{"location":"cs/ds/tree/#_8","title":"\u4f7f\u7528\u5e76\u67e5\u96c6","text":"<pre><code>int Find(int x){//\u67e5\u627e\u64cd\u4f5c\uff0c\u5e76\u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u5230\u7956\u5148\u7684\u8ddd\u79bb\nif(x!=a[x]){\nint last=a[x];\na[x]=Find(a[x]);\ndist[x]+=dist[last];\n}\nreturn a[x];\n}\nfor(int i=1;i&lt;=n;i++){\na[i]=i;//\u521d\u59cb\u5316\u7956\u5148\u7ed3\u70b9\u4e3a\u81ea\u8eab\n}\nfor(int i=1;i&lt;=n;i++){\nscanf(\"%d\",&amp;t);\nint root1=Find(i);\nint root2=Find(t);//\u5bfb\u627e\u7956\u5148\u7ed3\u70b9\nif(root1!=root2){//\u4e24\u7956\u5148\u7ed3\u70b9\u4e0d\u76f8\u7b49\uff0c\u8bf4\u660e\u65e0\u73af\uff0c\u5219\u5c06\u5b83\u4eec\u8fde\u901a\uff0c\u66f4\u65b0\u8ddd\u79bb\u3002\na[root1]=root2;\ndist[i]=dist[t]+1;\n}else{//\u7956\u5148\u7ed3\u70b9\u76f8\u540c\uff0c\u4e14vertex\u76f8\u8fde\uff0c\u627e\u5230\u73af\uff0c\u8bb0\u5f55\u73af\u7684\u957f\u5ea6\nmin=min&lt;(dist[i]+dist[t]+1)?min:dist[i]+dist[t]+1;\n}\n}\n</code></pre>"},{"location":"cs/ds/tree/#_9","title":"\u6392\u5e8f","text":""},{"location":"cs/ds/tree/#_10","title":"\u63d2\u5165\u6392\u5e8f","text":"<pre><code>void insertion_sort(int a[],int len){\nint i,j,key;\nfor(i=1;i&lt;len;i++){\nkey=a[i];\nj=i-1;\nwhile(j&gt;=0&amp;&amp;a[j]&gt;key){\na[j+1]=a[j];\nj--;\n}\na[j+1]=key;\n}\n}\n</code></pre>"},{"location":"cs/ds/tree/#_11","title":"\u6811","text":""},{"location":"cs/ds/tree/#_12","title":"\u4e8c\u53c9\u6811\u57fa\u7840","text":"<pre><code>//Definition for a binary tree node.\nstruct TreeNode {\nint value;\nstruct TreeNode *left;\nstruct TreeNode *right;\n};\n</code></pre>"},{"location":"cs/ds/tree/#_13","title":"\u521b\u5efa\u8282\u70b9","text":"<pre><code>TreeNode *newnode(int value){\nTreeNode *node=(TreeNode*)malloc(sizeof(struct TreeNode));\nnode-&gt;value=value;\nnode-&gt;left=NULL;\nnode-&gt;right=NULL;\nreturn node;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_14","title":"\u63d2\u5165\u7ed3\u70b9","text":"<pre><code>TreeNode *insert_recursive(TreeNode *root,int value){\nif(root==NULL) return newnode(value);\nif(root-&gt;val&gt;value){\nroot-&gt;left=insert_recursive(root-&gt;left,value);\n}else{\nroot-&gt;right=insert_recursive(root-&gt;right,value);\n}\nreturn root;\n}\nTreeNode *insert_iterative(TreeNode *root,int value){\nif(root==NULL) return newnode(value);\nTreeNode *node=newnode(value);\nTreeNode *cur=root,*parent=NULL;\nwhile(cur){\nparent=cur;\nif(cur-&gt;val&gt;val){\ncur=cur-&gt;left;\n}else{\ncur=cur-&gt;right;\n}\n}\nif(parent-&gt;value&gt;value){\nparent-&gt;left=node;\n}else{\nparent-&gt;right=node;\n}\nreturn root;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_15","title":"\u5220\u9664\u7ed3\u70b9","text":"<pre><code>TreeNode *delete(TreeNode *root,int value){\nTreeNode *parent=NULL,*current=root;\nTreeNode *node=search_i(root,parent,value);\nif(node==NULL){\nprintf(\"Value not found\\n\");\nreturn root;\n}\nif(!node-&gt;left&amp;&amp;!node-&gt;right){//\u5220\u9664\u53f6\u5b50\nif(node!=root){\nif(parent-&gt;left==node) parent-&gt;left=NULL;\nelse parent-&gt;right=NULL;\n}else{\nroot=NULL;\n}\nfree(node);\n}else if(node-&gt;left&amp;&amp;node-&gt;right){//\u5220\u9664\u7684\u7ed3\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\nTreeNode *predecessor=max(node-&gt;left);\ndelete(root,predecessor-&gt;value);\nnode-&gt;value=predecessor-&gt;value;\n}else{//\u5220\u9664\u7684\u7ed3\u70b9\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\nTreeNode *child=(node-&gt;left)?node-&gt;left:node-&gt;right;\nif(node!=root){\nif(node==parent-&gt;left){\nparent-&gt;left=child;\n}else{\nparent-&gt;right=child;\n}\n}else{\nroot=child;\n}\nfree(node);\n}\nreturn root;\n}\nTreeNode *search(TreeNode *root,TreeNode *parent,int value){\nif(root==NULL) return NULL;\nTreeNode *cur=root;\nwhile(cur&amp;&amp;cur-&gt;val!=value){\nparent=cur;\nif(cur-&gt;val&gt;val){\ncur=cur-&gt;left;\n}else{\ncur=cur-&gt;right;\n}\n}\nreturn cur;\n}//\u4fdd\u5b58\u4e86\u5f85\u641c\u7d22\u7684\u503c\u7684\u7236\u8282\u70b9\uff0c\u4fbf\u4e8edelete\n</code></pre>"},{"location":"cs/ds/tree/#_16","title":"\u6811\u7684\u904d\u5386","text":""},{"location":"cs/ds/tree/#_17","title":"\u524d\u5e8f\u904d\u5386","text":"<p>\u6839\u8282\u70b9\u2014\u2014\u5de6\u5b50\u6811\u2014\u2014\u53f3\u5b50\u6811</p> <p>\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>void preorder(struct TreeNode *root,int *res,int *resSize){\nif(root==NULL){\nreturn;\n}\nres[(*resSize)++]=root-&gt;val;\npreorder(root-&gt;left,res,resSize);\npreorder(root-&gt;right, res, resSize);\n}\n</code></pre> <p>\u8fed\u4ee3\u7248\u672c\uff1a</p> <p>\u533a\u522b\u5728\u4e8e\u9012\u5f52\u7684\u65f6\u5019\u9690\u5f0f\u5730\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808\uff0c\u800c\u6211\u4eec\u5728\u8fed\u4ee3\u7684\u65f6\u5019\u9700\u8981\u663e\u5f0f\u5730\u5c06\u8fd9\u4e2a\u6808\u6a21\u62df\u51fa\u6765\u3002</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a</p> <ul> <li> <p>\u6bcf\u62ff\u5230\u4e00\u4e2a\u8282\u70b9 \u5c31\u628a\u5b83\u4fdd\u5b58\u5728\u6808\u4e2d</p> </li> <li> <p>\u7ee7\u7eed\u5bf9\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u91cd\u590d\u8fc7\u7a0b1\uff0c\u76f4\u5230\u5de6\u5b50\u6811\u4e3a\u7a7a</p> </li> <li> <p>\u56e0\u4e3a\u4fdd\u5b58\u5728\u6808\u4e2d\u7684\u8282\u70b9\u90fd\u904d\u5386\u4e86\u5de6\u5b50\u6811 \u4f46\u662f\u6ca1\u6709\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u5bf9\u6808\u4e2d\u8282\u70b9\u51fa\u6808\u5e76\u5bf9\u5b83\u7684\u53f3\u5b50\u6811\u91cd\u590d\u8fc7\u7a0b1\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u8282\u70b9\u3002</p> </li> </ul> <pre><code>int* preorderTraversal(struct TreeNode* root, int* returnSize){\nint *res = malloc(sizeof(int)*2000);\n*returnSize=0;\nif(root==NULL) return res;\nstruct TreeNode* stk[2000];\nstruct TreeNode* node=root;\nint stk_top=0;\nwhile(stk_top&gt;0||node!=NULL){\nwhile(node){//\u6bcf\u9047\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u52a0\u5165\u7ed3\u679c\uff0c\u5e76\u5c06\u8282\u70b9\u4fdd\u5b58\u5230\u4e2d\u95f4\u7ed3\u679c\nres[(*returnSize)++]=node-&gt;val;\nstk[stk_top++]=node;\nnode=node-&gt;left;\n}//\u904d\u5386\u5de6\u5b50\u6811\u76f4\u5230\u7a7a\nnode=stk[--stk_top];\nnode=node-&gt;right;\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_18","title":"\u4e2d\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u7248\u672c\u5f88trival\uff0c\u5728\u8fd9\u91cc\u5b9e\u73b0\u4e00\u4e0b\u8fed\u4ee3\u7248\u672c\uff0c\u7ec3\u4e60\u5bf9\u6808\u7684\u4f7f\u7528\u3002</p> <pre><code>int* inorderTraversal(struct TreeNode* root, int* returnSize){\n*returnSize=0;\nint *res=malloc(sizeof(int)*2000);\nstruct TreeNode *stk[2000];\nstruct TreeNode* node=root;\nint stk_top=0;\nwhile(stk_top&gt;0||node){\nwhile(node){\nstk[stk_top++]=node;\nnode=node-&gt;left;\n}\nnode=stk[--stk_top];\nres[(*returnSize)++]=node-&gt;val;\nnode=node-&gt;right;\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_19","title":"\u540e\u5e8f\u904d\u5386","text":"<pre><code>int* postorderTraversal(struct TreeNode* root, int* returnSize){\nint *res = malloc(sizeof(int)*2000);\n*returnSize = 0;\nstruct TreeNode *stk[2000];\nint top=0;\nstruct TreeNode *node =root;\nstruct TreeNode *prev = NULL;//\u4e0e\u524d\u5e8f\u548c\u4e2d\u5e8f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u7ef4\u62a4\u4e00\u4e2aprev\u6307\u9488\uff0c\u5224\u65ad\u662f\u5426\u52a0\u5165\u7b54\u6848\u3002\nwhile(top&gt;0||node!=NULL){\nwhile(node){\nstk[top++]=node;\nnode=node-&gt;left;\n}\nnode=stk[--top];\nif(node-&gt;right==NULL||node-&gt;right==prev){\nres[(*returnSize)++]=node-&gt;val;\nprev=node;\nnode=NULL;\n}else{\ntop++;\nnode=node-&gt;right;\n}\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_20","title":"\u5c42\u5e8f\u904d\u5386","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff1a </p> <ul> <li>\u4f7f\u7528\u961f\u5217\u5b58\u50a8\u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7ed3\u70b9</li> <li>\u4f7f\u7528<code>head</code>\u548c<code>rear</code>\u7ef4\u62a4\u961f\u5217\uff0cFIFO</li> <li></li> </ul> <pre><code>int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\nint** ans=(int**)malloc(sizeof(int*)*2000);\n*returnSize=0;\nif(root==NULL) return NULL;\nint columnSizes[2000];\nstruct TreeNode *queue[2000];//\u6a21\u62df\u961f\u5217\nint rear=0;\nint head=0;//\u961f\u5217\u5934\u5c3e\nqueue[rear++]=root;//\u6839\u8282\u70b9\u5165\u961f\nwhile(rear!=head){//\u961f\u5217\u4e0d\u4e3a\u7a7a\nans[(*returnSize)]=(int*)malloc(sizeof(int)*2000);\ncolumnSizes[(*returnSize)]=rear-head;\nint start=head;//\u8bb0\u5f55\u5f00\u59cb\u904d\u5386\u7684\u4f4d\u7f6e\uff0c\u672c\u5c42\u7684\u5934\nhead=rear;//\u672c\u5c42\u7684\u5c3e\u90e8\u4e3a\u4e0b\u5c42\u7684\u5934\uff0c\u56e0\u4e3a\u672c\u5c42\u6240\u6709\u5143\u7d20\u5747\u51fa\u961f\n//\u5728\u8fd9\u91cc\u4e0b\u5c42\u7684\u5934head\u540c\u65f6\u4f5c\u4e3a\u904d\u5386\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5728\u904d\u5386\u4e2drear\u4f1a\u4e0d\u65ad\u6539\u53d8\uff0c\u6210\u4e3a\u4e0b\u5c42\u7684\u5c3e\nfor(int i=start;i&lt;head;i++){\nans[(*returnSize)][i-start]=queue[i]-&gt;val;\nif(queue[i]-&gt;left){\nqueue[rear++]=queue[i]-&gt;left;\n}\nif(queue[i]-&gt;right){\nqueue[rear++]=queue[i]-&gt;right;\n}\n}\n(*returnSize)++;\n}\n*returnColumnSizes=(int*)malloc(sizeof(int)*(*returnSize));\nfor(int i=0;i&lt;*returnSize;i++)\n(*returnColumnSizes)[i]=columnSizes[i];\nreturn ans;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_21","title":"\u6784\u5efa\u7c7b\u95ee\u9898","text":""},{"location":"cs/ds/tree/#_22","title":"\u6839\u636e\u5148\u5e8f\uff0c\u4e2d\u5e8f\u904d\u5386\u6784\u5efa\u4e8c\u53c9\u6811","text":"<pre><code>btnode *buildtree(int preorder[],int inorder[],int n){\nif(n==0) return NULL;\nbtnode *root=(struct btnode*)malloc(sizeof(struct btnode));\nroot-&gt;value=preorder[0];\nint i=0;\nwhile(inorder[i]!=root-&gt;value){\ni++;\n}\nif(i==0){\nroot-&gt;left=NULL;\nroot-&gt;right=buildtree(&amp;preorder[1],&amp;inorder[1],n-1);\n}\nelse if(i==n-1){\nroot-&gt;right=NULL;\nroot-&gt;left=buildtree(&amp;preorder[1],inorder,n-1);\n}\nelse if(i!=0&amp;&amp;i!=n-1){\nroot-&gt;left=buildtree(&amp;preorder[1],inorder,i);\nroot-&gt;right=buildtree(&amp;preorder[1],&amp;inorder[i+1],n-i-1);\n}\nreturn root;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_23","title":"\u6839\u636e\u4e2d\u5e8f\uff0c\u540e\u5e8f\u904d\u5386\u6784\u5efa\u4e8c\u53c9\u6811","text":"<pre><code>Tree buildtree(int post[],int in[],int n){\nTree root=(Tree)malloc(sizeof(Tree));\nroot-&gt;key=post[n-1];\nif(n==1){\nroot-&gt;left=NULL;\nroot-&gt;right=NULL;\nreturn root;\n}\nint i=0;\nwhile(in[i]!=post[n-1]){\ni++;\n}\nif(i==0){\nroot-&gt;left=NULL;\nroot-&gt;right=buildtree(post,&amp;in[1],n-1);\n}\nelse if(i==n-1){\nroot-&gt;right=NULL;\nroot-&gt;left=buildtree(post,in,n-1);\n}\nelse if(i!=0&amp;&amp;i!=n-1){\nroot-&gt;left=buildtree(post,in,i);\nroot-&gt;right=buildtree(&amp;post[i],&amp;in[i+1],n-i-1);\n}\nreturn root;\n}\n</code></pre>"},{"location":"cs/language/","title":"Programming Languages","text":"<p> \u7ea6 2 \u4e2a\u5b57 </p>"},{"location":"cs/language/python/","title":"Python tutorial","text":"<p> \u7ea6 571 \u4e2a\u5b57  296 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p> <p>Abstract</p> <p>\u6458\u81eacs231n\u7684Python Numpy Tutorial\uff1ahttps://cs231n.github.io/python-numpy-tutorial/</p>"},{"location":"cs/language/python/#basic-python","title":"Basic Python","text":""},{"location":"cs/language/python/#basic-data-types","title":"Basic data types","text":""},{"location":"cs/language/python/#numbers","title":"Numbers","text":"<p>Integers and floats work as you would expect from other languages:</p> <pre><code>x = 3\nprint(type(x)) # Prints \"&lt;class 'int'&gt;\"\nprint(x)       # Prints \"3\"\nprint(x + 1)   # Addition; prints \"4\"\nprint(x - 1)   # Subtraction; prints \"2\"\nprint(x * 2)   # Multiplication; prints \"6\"\nprint(x ** 2)  # Exponentiation; prints \"9\"\nx += 1\nprint(x)  # Prints \"4\"\nx *= 2\nprint(x)  # Prints \"8\"\ny = 2.5\nprint(type(y)) # Prints \"&lt;class 'float'&gt;\"\nprint(y, y + 1, y * 2, y ** 2) # Prints \"2.5 3.5 5.0 6.25\"\n</code></pre> <p>Note</p> <p>Unlike many languages, Python does not have unary increment(x++) of decrement(x--) operators.</p>"},{"location":"cs/language/python/#booleans","title":"Booleans","text":"<p>Python implements all of the usual operators for Boolean logic, but uses English words rather than symbols</p> <pre><code>t = True\nf = False\nprint(type(t)) # Prints \"&lt;class 'bool'&gt;\"\nprint(t and f) # Logical AND; prints \"False\"\nprint(t or f)  # Logical OR; prints \"True\"\nprint(not t)   # Logical NOT; prints \"False\"\nprint(t != f)  # Logical XOR; prints \"True\"\n</code></pre>"},{"location":"cs/language/python/#strings","title":"Strings","text":"<pre><code>hello = 'hello'    # String literals can use single quotes\nworld = \"world\"    # or double quotes; it does not matter.\nprint(hello)       # Prints \"hello\"\nprint(len(hello))  # String length; prints \"5\"\nhw = hello + ' ' + world  # String concatenation\nprint(hw)  # prints \"hello world\"\nhw12 = '%s %s %d' % (hello, world, 12)  # sprintf style string formatting\nprint(hw12)  # prints \"hello world 12\"\n</code></pre> <p>String objects have a bunch of useful methods, for example:</p> <pre><code>s = \"hello\"\nprint(s.capitalize())  # Capitalize a string; prints \"Hello\"\nprint(s.upper())       # Convert a string to uppercase; prints \"HELLO\"\nprint(s.rjust(7))      # Right-justify a string, padding with spaces; prints \"  hello\"\nprint(s.center(7))     # Center a string, padding with spaces; prints \" hello \"\nprint(s.replace('l', '(ell)'))  # Replace all instances of one substring with another; prints \"he(ell)(ell)o\"\nprint('  world '.strip())  # Strip leading and trailing whitespace; prints \"world\"\n</code></pre>"},{"location":"cs/language/python/#containers","title":"Containers","text":""},{"location":"cs/language/python/#lists","title":"Lists","text":"<p>A list is the Python equivalent of an array, but is resizeable and can contain elements of different types</p> <pre><code>xs = [3, 1, 2]    # Create a list\nprint(xs, xs[2])  # Prints \"[3, 1, 2] 2\"\nprint(xs[-1])     # Negative indices count from the end of the list; prints \"2\"\nxs[2] = 'foo'     # Lists can contain elements of different types\nprint(xs)         # Prints \"[3, 1, 'foo']\"\nxs.append('bar')  # Add a new element to the end of the list\nprint(xs)         # Prints \"[3, 1, 'foo', 'bar']\"\nx = xs.pop()      # Remove and return the last element of the list\nprint(x, xs)      # Prints \"bar [3, 1, 'foo']\"\n</code></pre> <p>Slicing: In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:</p> <pre><code>nums = list(range(5))     # range is a built-in function that creates a list of integers\nprint(nums)               # Prints \"[0, 1, 2, 3, 4]\"\nprint(nums[2:4])          # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\nprint(nums[2:])           # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\nprint(nums[:2])           # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\nprint(nums[:])            # Get a slice of the whole list; prints \"[0, 1, 2, 3, 4]\"\nprint(nums[:-1])          # Slice indices can be negative; prints \"[0, 1, 2, 3]\"\nnums[2:4] = [8, 9]        # Assign a new sublist to a slice\nprint(nums)               # Prints \"[0, 1, 8, 9, 4]\"\n</code></pre> <p>Loops</p> <pre><code>animals = ['cat', 'dog', 'monkey']\nfor animal in animals:\nprint(animal)\n</code></pre> <p>If you want access to the index of each element within the body of a loop, use the built-in <code>enumerate</code> function:</p> <pre><code>animals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\nprint('#%d: %s' % (idx + 1, animal))\n</code></pre> <p>List comprehensions</p> <pre><code>nums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\nsquares.append(x**2)\n# list comprehensions can make this code above simpler\nsquares = [x ** 2 for x in nums]\nprint(squares)   # Prints [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"cs/language/python/#dictionaries","title":"Dictionaries","text":"<p>A dictionary stores (key, value) pairs</p> <pre><code>d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\nprint(d['cat'])       # Get an entry from a dictionary; prints \"cute\"\nprint('cat' in d)     # Check if a dictionary has a given key; prints \"True\"\nd['fish'] = 'wet'     # Set an entry in a dictionary\nprint(d['fish'])      # Prints \"wet\"\n# print(d['monkey'])  # KeyError: 'monkey' not a key of d\nprint(d.get('monkey', 'N/A'))  # Get an element with a default; prints \"N/A\"\nprint(d.get('fish', 'N/A'))    # Get an element with a default; prints \"wet\"\ndel d['fish']         # Remove an element from a dictionary\nprint(d.get('fish', 'N/A')) # \"fish\" is no longer a key; prints \"N/A\"\n</code></pre> <p>Loops: It is easy to iterate over the keys in a dictionary</p> <pre><code>d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal in d:\nlegs = d[animal]\nprint('A %s has %d legs' % (animal, legs))\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n</code></pre> <p>If you want access to keys and their corresponding values, use the <code>items</code> method:</p> <pre><code>d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal, legs in d.items():\nprint('A %s has %d legs' % (animal, legs))\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n</code></pre> <p>Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries</p> <pre><code>nums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint(even_num_to_square)  # Prints \"{0: 0, 2: 4, 4: 16}\"\n</code></pre>"},{"location":"cs/language/python/#tuples","title":"Tuples","text":"<p>A tuple is an (immutable) ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. </p> <pre><code>d = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\nt = (5, 6)        # Create a tuple\nprint(type(t))    # Prints \"&lt;class 'tuple'&gt;\"\nprint(d[t])       # Prints \"5\"\nprint(d[(1, 2)])  # Prints \"1\"\n</code></pre>"},{"location":"cs/language/python/#functions","title":"Functions","text":"<p>We will often define functions to take optional keyword arguments</p> <pre><code>def hello(name, loud=False):\nif loud:\nprint('HELLO, %s!' % name.upper())\nelse:\nprint('Hello, %s' % name)\nhello('Bob') # Prints \"Hello, Bob\"\nhello('Fred', loud=True)  # Prints \"HELLO, FRED!\"\n</code></pre>"},{"location":"cs/language/python/#classes","title":"Classes","text":"<pre><code>class Greeter(object):\n# Constructor\ndef __init__(self, name):\nself.name = name  # Create an instance variable\n# Instance method\ndef greet(self, loud=False):\nif loud:\nprint('HELLO, %s!' % self.name.upper())\nelse:\nprint('Hello, %s' % self.name)\ng = Greeter('Fred')  # Construct an instance of the Greeter class\ng.greet()            # Call an instance method; prints \"Hello, Fred\"\ng.greet(loud=True)   # Call an instance method; prints \"HELLO, FRED!\"\n</code></pre>"},{"location":"cs/language/python/#numpy","title":"Numpy","text":"<p>To use Numpy, we first need to import the <code>numpy</code> package:</p> <pre><code>import numpy as np\n</code></pre>"},{"location":"cs/language/python/#arrays","title":"Arrays","text":"<p>A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.</p> <p>We can initialize numpy arrays from nested Python lists, and access elements using square brackets:</p> <pre><code>a = np.array([1, 2, 3])# Create a rank 1 array\nprint(type(a))            # Prints \"&lt;class 'numpy.ndarray'&gt;\"\nprint(a.shape)            # Prints \"(3,)\"\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\nb = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array\nprint(b.shape)                     # Prints \"(2, 3)\"\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre> <p>Numpy also provides many functions to create arrays:</p> <pre><code>a = np.zeros((2,2))   # Create an array of all zeros\nprint(a)              # Prints \"[[ 0.  0.]\n#          [ 0.  0.]]\"\nb = np.ones((1,2))    # Create an array of all ones\nprint(b)              # Prints \"[[ 1.  1.]]\"\nc = np.full((2,2), 7)  # Create a constant array\nprint(c)               # Prints \"[[ 7.  7.]\n#          [ 7.  7.]]\"\nd = np.eye(2)         # Create a 2x2 identity matrix\nprint(d)              # Prints \"[[ 1.  0.]\n#          [ 0.  1.]]\"\ne = np.random.random((2,2))  # Create an array filled with random values\nprint(e)                     # Might print \"[[ 0.91940167  0.08143941]\n#               [ 0.68744134  0.87236687]]\"\n</code></pre>"},{"location":"cs/language/python/#array-indexing","title":"Array indexing","text":""},{"location":"cs/language/python/#silicing","title":"Silicing","text":"<p>Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array</p> <pre><code># Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\nb = a[:2, 1:3]\n# A slice of an array is a view into the same data, so modifying it\n# will modify the original array.\nprint(a[0, 1])   # Prints \"2\"\nb[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1])   # Prints \"77\"\n</code></pre> <p>You can also mix integer indexing with slice indexing. However, doing so will yield an array of lower rank than the original array. Note that this is quite different from the way that MATLAB handles array slicing:</p> <pre><code># Two ways of accessing the data in the middle row of the array.\n# Mixing integer indexing with slices yields an array of lower rank,\n# while using only slices yields an array of the same rank as the\n# original array:\nrow_r1 = a[1, :]    # Rank 1 view of the second row of a\nrow_r2 = a[1:2, :]  # Rank 2 view of the second row of a\nprint(row_r1, row_r1.shape)  # Prints \"[5 6 7 8] (4,)\"\nprint(row_r2, row_r2.shape)  # Prints \"[[5 6 7 8]] (1, 4)\"\n# We can make the same distinction when accessing columns of an array:\ncol_r1 = a[:, 1]\ncol_r2 = a[:, 1:2]\nprint(col_r1, col_r1.shape)  # Prints \"[ 2  6 10] (3,)\"\nprint(col_r2, col_r2.shape)  # Prints \"[[ 2]\n#          [ 6]\n#          [10]] (3, 1)\"\n</code></pre>"},{"location":"cs/language/python/#datatypes","title":"Datatypes","text":"<p>Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:</p> <pre><code>x = np.array([1, 2])   # Let numpy choose the datatype\nprint(x.dtype)         # Prints \"int64\"\nx = np.array([1.0, 2.0])   # Let numpy choose the datatype\nprint(x.dtype)             # Prints \"float64\"\nx = np.array([1, 2], dtype=np.int64)   # Force a particular datatype\nprint(x.dtype)                         # Prints \"int64\"\n</code></pre>"},{"location":"cs/language/python/#array-math","title":"Array math","text":"<pre><code>x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n# Elementwise sum; both produce the array\n# [[ 6.0  8.0]\n#  [10.0 12.0]]\nprint(x + y)\nprint(np.add(x, y))\n# Elementwise difference; both produce the array\n# [[-4.0 -4.0]\n#  [-4.0 -4.0]]\nprint(x - y)\nprint(np.subtract(x, y))\n# Elementwise product; both produce the array\n# [[ 5.0 12.0]\n#  [21.0 32.0]]\nprint(x * y)\nprint(np.multiply(x, y))\n# Elementwise division; both produce the array\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\nprint(x / y)\nprint(np.divide(x, y))\n# Elementwise square root; produces the array\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\nprint(np.sqrt(x))\n</code></pre> <p>Note that <code>*</code> is elementwise multiplication, not matrix multiplication. We instead use the <code>dot</code> function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices.  <code>dot</code> is avaiable both as a function in the numpy module and as an instance method of array objects:</p> <pre><code>x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\nv = np.array([9,10])\nw = np.array([11, 12])\n# Inner product of vectors; both produce 219\nprint(v.dot(w))\nprint(np.dot(v, w))\n# Matrix / vector product; both produce the rank 1 array [29 67]\nprint(x.dot(v))\nprint(np.dot(x, v))\n# Matrix / matrix product; both produce the rank 2 array\n# [[19 22]\n#  [43 50]]\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre> <p><code>sum</code> and <code>T</code> function:</p> <pre><code>x = np.array([[1,2],[3,4]])\nprint(np.sum(x))  # Compute sum of all elements; prints \"10\"\nprint(np.sum(x, axis=0))  # Compute sum of each column; prints \"[4 6]\"\nprint(np.sum(x, axis=1))  # Compute sum of each row; prints \"[3 7]\"\nprint(x.T)  # Prints \"[[1 3]\n#          [2 4]]\"\n# Note that taking the transpose of a rank 1 array does nothing:\nv = np.array([1,2,3])\nprint(v)    # Prints \"[1 2 3]\"\nprint(v.T)  # Prints \"[1 2 3]\"\n</code></pre>"},{"location":"cs/language/python/#matplotlib","title":"Matplotlib","text":""},{"location":"cs/language/python/#plotting","title":"Plotting","text":"<p>The most important function in matplotlib is <code>plot</code>, which allows you to plot 2D data. Here is a simple example:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n# Compute the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n# Plot the points using matplotlib\nplt.plot(x, y)\nplt.show()  # You must call plt.show() to make graphics appear.\n</code></pre> <p></p> <p>With just a little bit of extra work we can easily plot multiple lines at once, and add a title, legend, and axis labels:</p> <pre><code># Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n# Plot the points using matplotlib\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\nplt.show()\n</code></pre> <p></p>"},{"location":"cs/language/python/#subplots","title":"Subplots","text":"<p>You can plot different things in the same figure using the <code>subplot</code> function</p> <pre><code># Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n# Set up a subplot grid that has height 2 and width 1,\n# and set the first such subplot as active.\nplt.subplot(2, 1, 1)\n# Make the first plot\nplt.plot(x, y_sin)\nplt.title('Sine')\n# Set the second subplot as active, and make the second plot.\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n# Show the figure.\nplt.show()\n</code></pre> <p></p>"},{"location":"cs/language/c/c/","title":"C","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300aC Primer Plus\u300b</p> <p>\u6d59\u5927\u56fe\u7075\u73ed\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8\u8bfe\u7a0b\uff0c\u5c06\u4f20\u7edf\u7684c\u5c0fc\u5927\u53bb\u9664\u4e0d\u5408\u7406\u7684\u5185\u5bb9\u540e\u5408\u5e76\u8d77\u6765\u7684\u4e00\u95e8\u8bfe\u3002\u4f7f\u7528C\u8bed\u8a00\uff0c\u4e3b\u8981\u4ecb\u7ecd\u57fa\u672c\u7684\u8bed\u6cd5\uff0c\u6761\u4ef6\u8bed\u53e5\uff0c\u5faa\u73af\u8bed\u53e5\uff0c\u51fd\u6570\uff0c\u6570\u7ec4\uff0c\u6307\u9488\uff0c\u5b57\u7b26\u4e32\uff0c\u94fe\u8868\uff0c\u7ed3\u6784\u4f53\u7b49\u5185\u5bb9\u3002</p> <p>\u671f\u672b\u8003\u524d\u6574\u7406\u7684\u4e00\u4efd\u6613\u9519\u77e5\u8bc6\u70b9\u4ee5\u53ca\u5178\u578b\u9898\u7684\u601d\u60f3\u548c\u4ee3\u7801\uff0c\u5927\u4e00\u4e0a\u5199\u7684\u4e0d\u600e\u4e48\u6ce8\u610f\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u80fd\u7a0d\u5fae\u4e71\u4e00\u4e9b/(\u3112o\u3112)/~~</p>"},{"location":"cs/language/c/c/#_1","title":"\u7a0b\u7b97\u671f\u672b\u7406\u8bba\u9898\u590d\u4e60","text":"<p> \u7ea6 4013 \u4e2a\u5b57  488 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p> <ul> <li> <p>switch \u8bed\u53e5\u5728\u7f3a\u5c11break \u65f6\u5c06 Fall through</p> </li> <li> <p>++\u4f18\u5148\u7ea7\u9ad8\u4e8e*</p> </li> <li> <p><code>true</code>\u3001<code>false</code>\u3001<code>TRUE</code>\u3001<code>FALSE</code> \u662f\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff0c\u56e0\u4e3a\u5728 C \u4e2d\u5b83\u4eec\u4e0d\u662f\u5173\u952e\u5b57</p> </li> <li> <p><code>char a = 255</code>\uff0c\u6253\u5370\u540e\u503c\u4e3a <code>-1</code>\uff0c\u56e0\u4e3a <code>char</code> \u4e3a\u6709\u7b26\u53f7\u7c7b\u578b\u5e76\u91c7\u7528\u8865\u7801\u8868\u793a\uff0c\u5176\u8303\u56f4\u4e3a <code>-128 ~ 127</code>\u3002</p> </li> <li> <p>\u6307\u9488\u53ef\u4ee5\u52a0\u5e38\u6570\uff0c\u51cf\u5e38\u6570\uff0c\u4f46\u6307\u9488\u4e4b\u95f4\u53ef\u4ee5\u76f8\u51cf\uff0c\u4f46\u4e0d\u80fd\u76f8\u52a0</p> </li> <li>\u4e24\u4e2a\u540c\u4e00\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u76f8\u51cf\uff0c\u610f\u4e49\u662f\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u76f8\u9694\u591a\u5c11\u4e2a\u5143\u7d20 \u6ce8\u610f\u662f\u5143\u7d20\u4e0d\u662f\u5b57\u8282\u6570\u3002</li> <li> <p>\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u5141\u8bb8\u76f8\u51cf</p> </li> <li> <p>\u6307\u9488\u53ea\u6709\u52a0\u51cf\u64cd\u4f5c\uff0c\u6ca1\u6709\u4e58\u9664\u64cd\u4f5c</p> </li> <li> <p>[ ]\u4f18\u5148\u7ea7\u9ad8\u4e8e *</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u9700\u8d4b\u503c\u4e00\u4e2a\u53ef\u7528\u7684\u5730\u5740\u4e4b\u540e\u624d\u53ef\u4ee5\u89e3\u5f15\u7528</p> </li> <li> <p>\u5047\u8bbe\u6709\u5b9a\u4e49\u5982\u4e0b\uff1a <code>int array[10];</code> \u5219\u8be5\u8bed\u53e5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4array\u3002\u5176\u4e2darray\u7684\u7c7b\u578b\u662f\u6574\u578b\u6307\u9488\u274c</p> </li> <li> <p>array \u662f\u6307\u5411int array[0]\u5730\u5740\u7684\u6307\u9488</p> </li> </ul> <p>&amp;a\u4ee3\u8868\u6570\u7ec4\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint(*)[ ] </p> <p>a\u4ee3\u8868\u6570\u7ec40\u53f7\u5143\u7d20\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint*</p> <p>\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff1aint (*pName)[ ] = &amp;a;</p> <p>\u6307\u5411\u6570\u7ec40\u53f7\u5143\u7d20\u7684\u6307\u9488\uff1aint* pName = a; </p> <p>\u5f53\u6307\u9488\u6307\u5411\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u6307\u9488\u79fb\u52a8\u3002</p> <p>\u5373 \u6307\u9488\u548c\u6570\u7ec4\u540d\u5728\u6548\u679c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u533a\u522b\u5728\u4e8e\uff1a\u6307\u9488\u662f\u53d8\u91cf \u6307\u9488\u53ef\u4ee5\u53c2\u4e0e\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u800c\u6570\u7ec4\u540d\u4e0d\u884c</p> <p>\u5b9e\u9645\u4e0a \u6570\u7ec4\u7d22\u5f15\u4e0b\u6807\u8fd0\u7b97\u5c31\u662f\u5148\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u6307\u9488\uff0c\u518d\u901a\u8fc7\u6307\u9488\u53bb\u53d6\u5f97\u5bf9\u5e94\u5143\u7d20\u7684</p> <ul> <li> <p>\u6570\u7ec4\u7684\u57fa\u5730\u5740\u662f\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6570\u7ec4\u540d\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5730\u5740\u5373\u6307\u9488\u503c\u3002</p> </li> <li> <p>\u6709\u6548\u7684\u6307\u9488\u8fd0\u7b97</p> </li> <li> <p>\u76f8\u540c\u7c7b\u578b\u6307\u9488\u7684\u76f8\u4e92\u8d4b\u503c\u8fd0\u7b97</p> </li> <li>\u6307\u9488\u4e0e\u6574\u6570\u4e4b\u95f4\u7684\u52a0\u51cf\u6cd5\u8fd0\u7b97</li> <li> <p>\u6307\u5411\u76f8\u540c\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u526a\u53d1\u8fd0\u7b97\u6216\u6bd4\u8f83\u8fd0\u7b97</p> </li> <li> <p>*p++\u8868\u793a\u53d6\u5f97p\u5f53\u524d\u6307\u5411\u7684\u5143\u7d20\uff0c\u4f46\u662fp\u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e86</p> </li> <li> <p>\u95ee\u4e00\u4e2achar\u578b\u53d8\u91cf\u7684\u503c\u662f\u591a\u5c11\uff0c\u8981\u4e48\u8bb0\u5f97\u5f15\u53f7\uff0c\u8981\u4e48\u8bb0\u5f97\u7528ASCII</p> </li> <li> <p>\u53ef\u4ee5\u76f4\u63a5\u7528[]\u8bbf\u95ee\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u67d0\u4e2a\u5b57\u7b26</p> </li> <li> <p><code>c   \"ABC\" [1]='B'</code></p> </li> <li> <p><code>sizeof()</code>\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u800c\u4e14\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5b8c\u6210\u66ff\u6362\u3002</p> <ul> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> </ul> </li> <li> <ul> <li><code>sizeof(1) = 4</code></li> </ul> </li> <li><code>sizeof(1ll) = 8</code></li> <li><code>sizeof(1.0) = 8</code></li> <li><code>sizeof(1.0f) = 4</code></li> </ul> <p></p> <ul> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u662fC\u8bed\u8a00\u7f16\u8bd1\u7a0b\u5e8f\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u7528\u4e8e\u89e3\u91ca\u5904\u7406C\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u9884\u5904\u7406\u6307\u4ee4\uff08\u7279\u5f81\u662f\u4ee5<code>#</code>\u5f00\u5934\uff0c\u5b83\u4eec\u4e0d\u662f\u771f\u6b63\u7684C\u8bed\u53e5\uff09</p> </li> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u5728\u6b63\u5f0f\u7f16\u8bd1\u4e4b\u524d</p> </li> <li> <p><code>#include</code></p> </li> <li>\u5982\u679c\u540e\u9762\u662f&lt;&gt;\uff0c\u5219\u5c06\u4f7f\u7528C\u7684\u6807\u51c6\u5934\u6587\u4ef6</li> <li> <p>\u5982\u679c\u540e\u9762\u662f\u201c\u201d\uff0c\u5c06\u5148\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u5bfb\u627e\u88ab\u5305\u542b\u7684\u6587\u4ef6\uff0c\u627e\u4e0d\u5230\u5219\u53bb\u7cfb\u7edfinclude\u76ee\u5f55\u5bfb\u627e</p> </li> <li> <p>\u5b8f</p> </li> <li> <p>\u5b8f\u53ea\u662f\u7eaf\u7cb9\u7684\u5bf9\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u66ff\u6362</p> </li> <li> <p>case \u540e\u8ddf\u7684\u5fc5\u987b\u662f\u4e0d\u91cd\u590d\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e0d\u53ef\u4ee5\u662f\u53d8\u91cf\u53c2\u4e0e\u7684\u8868\u8fbe\u5f0f</p> </li> <li> <p>\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u5b9a\u4e49\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f</p> </li> <li> <p>\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5b58\u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u6301\u7eed\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e0d\u4f1a\u518d\u9000\u51fa\u51fd\u6570\u7684\u65f6\u5019\u88ab\u56de\u6536\uff0c\u4e0b\u4e00\u6b21\u4f7f\u7528\u540e\u4f1a\u88ab\u91cd\u65b0\u6fc0\u6d3b</p> </li> <li> <p>\u4e0e\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u76f8\u6bd4\uff0c\u9759\u6001\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u518d\u5f53\u524d\u6587\u4ef6\u5185\uff0c\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u5728\u591a\u6587\u4ef6\u9879\u76ee\u4e2d\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u7528</p> </li> <li> <p>\u9759\u6001\u53d8\u91cf\u521d\u503c\u9ed8\u8ba4\u4e3a0</p> </li> <li> <p>\u4e8c\u7ef4\u6570\u7ec4\u7533\u8bf7\u65f6\u5982\u679c\u521d\u59cb\u5316\u53ef\u4ee5\u7701\u7565\u884c\u957f\u5ea6 <code>a[][3]={}</code></p> </li> <li> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4<code>a[x][y]</code></p> </li> <li><code>&amp;a</code>\u8868\u793a\u6570\u7ec4\u5730\u5740\uff0c<code>&amp;a+1</code>\u8868\u793a\u6570\u7ec4\u672b\u5c3e\u540e\u7684\u5730\u5740</li> <li><code>a</code>\u6216\u8005<code>&amp;a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u884c\u5730\u5740\uff0c<code>a+1</code>\u8868\u793a\u6570\u7ec4\u4e0b\u4e00\u884c\u5730\u5740<ul> <li><code>a</code>\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2ax\u7ef4\u6570\u7ec4\u7684\u6307\u9488\u3002</li> </ul> </li> <li><code>&amp;a[0][0]</code>\u6216\u8005<code>a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u5143\u7d20\u5730\u5740\uff0c\u4e5f\u53eb\u5217\u5730\u5740</li> <li> <p><code>a[i][j]</code>\u7b49\u6548\u4e8e<code>*(*(a+i)+j)</code></p> </li> <li> <p>\u53d6\u503c\u7b26\u53f7*\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6210\u5458\u8bbf\u95ee\u7b26.\u7684\u4f18\u5148\u7ea7</p> </li> <li> <p>\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6307\u9488\u7684\u65b9\u5f0f\u6765\u7ed9\u8be5\u5b57\u7b26\u4e32\u5206\u914d\u5730\u5740</p> </li> <li> <p><code>char *p;  p=\"awa\"</code></p> </li> <li> <p><code>*strcpy(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u590d\u5236\u5230<code>to[]</code>\u4e2d\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p><code>*strcat(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u6dfb\u52a0\u5230<code>to[]</code>\u672b\u5c3e\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p>\u6240\u8c13\u7684\u6dfb\u52a0\uff0c\u5c31\u662f\u7528<code>from[]</code>\u53bb\u66ff\u6362<code>to[]</code>\u7b2c\u4e00\u4e2a<code>\\0</code>\u4e4b\u540e\u7684\u5143\u7d20</p> </li> <li> <ul> <li><code>strcmp(char *a,char *b)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u6bd4\u8f83\u5b57\u7b26\u6570\u7ec4<code>a[]</code>\u548c<code>b[]</code>\u5728<code>\\0</code>\u524d\u7684\u5185\u5bb9\u662f\u5426\u7b49\u4ef7</li> </ul> </li> <li> <ul> <li> <ul> <li>\u5982\u679c\u7b49\u4ef7 \u8fd4\u56de0</li> </ul> </li> <li>\u5982\u679ca&lt;b \u8fd4\u56de-1</li> <li>\u5982\u679ca&gt;b \u8fd4\u56de1</li> </ul> </li> <li> <p>\u7ed3\u6784\u4f53\u7c7b\u578b\u672c\u8eab\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u7ed3\u6784\u4f53\u53d8\u91cf\u5360\u7528\u5185\u5b58\u7a7a\u95f4</p> </li> <li> <p>\u679a\u4e3e\u7c7b\u578b\u4e2d\u7684\u5143\u7d20\u90fd\u5177\u6709\u4e00\u4e2a\u6574\u578b\u503c</p> </li> <li> <p>\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740</p> </li> <li> <p>\u4efb\u4f55\u8868\u8fbe\u5f0f\u8bed\u53e5\u90fd\u662f\u8868\u8fbe\u5f0f\u52a0\u5206\u53f7\u7ec4\u6210\u7684</p> </li> <li> <p>\u6587\u4ef6\u7684\u8bfb\u51fd\u6570\u662f\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5b58\u653e\u5728\u5185\u5b58\u4e2d</p> </li> <li> <p>\u6587\u4ef6\u662f\u5426\u6253\u5f00\u662f\u53ef\u4ee5\u5224\u65ad\u7684</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u548c\u4f4d\u7f6e\u6307\u9488\u90fd\u662f\u968f\u7740\u6587\u4ef6\u7684\u8bfb\u5199\u64cd\u4f5c\u5728\u4e0d\u65ad\u6539\u53d8\u274c</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u7528\u4e8e\u6307\u5411\u6587\u4ef6\uff0c\u6587\u4ef6\u53ea\u6709\u88ab\u6253\u5f00\u540e\u624d\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u6307\u9488</p> </li> <li> <p>\u4e00\u4e2a\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\uff0c\u5b83\u5c06\u4fdd\u6301\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\u7684\u6570\u636e\u7c7b\u578b\u274c</p> </li> <li> <p>switch\u8bed\u53e5\u4e2d\uff0c\u591a\u4e2acase\u53ef\u4ee5\u5171\u7528\u4e00\u7ec4\u6267\u884c\u8bed\u53e5</p> </li> <li> <p>\u6bcf\u4e2acase\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u53ef\u4ee5\u76f8\u540c</p> </li> <li> <p>\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf\uff0c\u5728\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u4e0d\u80fd\u5b58\u653e\u6570\u503c\u548c\u5b57\u7b26</p> </li> <li> <p>\u5b57\u7b26\u4e32\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u6307\u9488</p> </li> <li> <p></p> </li> <li> <p>\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u3002</p> </li> <li> <p>\\\u5f00\u5934\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u516b\u8fdb\u5236\u8f6c\u4e49\u5e8f\u5217\uff0cs\u8868\u793a\u4e00\u4e2a\u5b57\u7b26</p> </li> <li> <p>\u6807\u8bc6\u7b26\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4e0d\u80fd\u662fC\u8bed\u8a00\u7684\u5173\u952e\u5b57\u548c\u4fdd\u7559\u6807\u8bc6\u7b26</p> </li> <li> <p>\u6ce8\u610fif\u8bed\u53e5\u4e2d\u662f=\u53f7\u8fd8\u662f==</p> </li> <li>`int k=2;while(k=0){printf(\"%d\",k);k--;}</li> <li> <p>\u5faa\u73af\u4f53\u8bed\u53e5\u4e00\u6b21\u4e5f\u4e0d\u6267\u884c</p> </li> <li> <p>\u6ce8\u91ca\u4f53\u4f8b\uff1a<code>/**/</code></p> </li> <li> <p><code>x*=y+z</code>\u5373\u4e3a`x=x*(y+z)</p> </li> <li> <p>else \u603b\u662f\u548c\u4e4b\u524d\u4e0e\u5176\u6700\u8fd1\u7684\u4e14\u4e0d\u5e26else \u7684if\u914d\u5bf9</p> </li> <li> <p>\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5</p> </li> <li> <p>\u5728\u5d4c\u5957\u5faa\u73af\u4e2d\uff0c\u6bcf\u4e00\u5c42\u5faa\u73af\u4e2d\u90fd\u4e0d\u5e94\u8be5\u6539\u53d8\u5176\u4ed6\u5c42\u4f7f\u7528\u7684\u5faa\u73af\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u514d\u4e92\u76f8\u5e72\u6270</p> </li> <li> <p>break \u8bed\u53e5\u53ea\u80fd\u7528\u5728\u5faa\u73af\u4f53\u548cswitch\u8bed\u53e5\u4f53\u5185</p> </li> <li> <p>continue\u8bed\u53e5\u7684\u4f5c\u7528\u662f\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u4f53\u4e2d\u4f59\u4e0b\u5c1a\u672a\u6267\u884c\u7684\u8bed\u53e5\uff0c\u7acb\u5373\u8fdb\u884c\u4e0b\u4e00\u6b21\u7684\u5faa\u73af\u6761\u4ef6\u5224\u5b9a\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec5\u7ed3\u675f\u672c\u6b21\u5faa\u73af\u3002</p> </li> <li> <p>\u51fd\u6570\u4e0d\u53ef\u4ee5\u5d4c\u5957\u5b9a\u4e49\u4f46\u53ef\u4ee5\u5d4c\u5957\u8c03\u7528</p> </li> <li> <p>sizeof\u662f\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570</p> </li> <li> <p>C\u8bed\u8a00\u4e2d\uff0c\u82e5\u6ca1\u6709\u5bf9\u51fd\u6570\u7c7b\u578b\u663e\u5f0f\u8bf4\u660e\uff0c\u5219\u51fd\u6570\u7684\u9690\u542b\u7c7b\u578b\u4e3aint</p> </li> <li> <p>\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u5206\u522b\u5360\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u5355\u5143</p> </li> <li> <p>\u4e0d\u4e00\u5b9a\u5305\u542bmain\u51fd\u6570\uff0c\u4e0d\u80fd\u5305\u542b\u4e24\u4e2a\u4ee5\u4e0amain\u51fd\u6570</p> </li> <li> <p>EOF\u5b9e\u9645\u4e0a\u5c31\u662f-1</p> </li> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> <li>\u5206\u652f\u8bed\u53e5\u6d4b\u8bd5\u6570\u636e\u81f3\u5c11\u9700\u8981\u51e0\u7ec4\u95ee\u9898\uff1a\u8981\u6ce8\u610f\u6570\u636e\u8fb9\u754c\u4e5f\u8981\u7b97\u4e00\u7ec4:</li> <li>C\u8bed\u8a00\u7684\u903b\u8f91\u8fd0\u7b97\u5177\u6709\u7701\u7565\u7279\u6027\uff1a\u5f53\u524d\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u65f6\u5019\uff0c\u4e0d\u8ba1\u7b97\u540e\u9762\u90a3\u4e2a\u8868\u8fbe\u5f0f</li> <li>\u53d6\u4f59\u8fd0\u7b97\u4ec5\u5bf9\u6574\u578b\u6570\u636e\u4f7f\u7528</li> <li><code>+ -</code>\u53ef\u4f5c\u5355\u76ee\u8fd0\u7b97\u7b26\u8868\u793a\u6b63\u8d1f</li> <li>\u53cc\u76ee\u8fd0\u7b97\u7b26\u4f1a\u4fdd\u8bc1\u4e24\u4fa7\u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\uff08\u5bf9\u4e8e\u4e0d\u540c\u7684\u8f93\u5165\u6570\u636e\u4f1a\u8fdb\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff09</li> <li>1.\u7b26\u53f7\u4f18\u5148\u7ea7\uff1a\u8d4b\u503c\u8fd0\u7b97\u4f18\u5148\u4e8e\u9017\u53f7\u8fd0\u7b97\uff0c2.\u9017\u53f7\u8fd0\u7b97\uff1a\u7b26\u9017\u53f7\u8868\u8fbe\u5f0f\u4e2d\u7528\u9017\u53f7\u5206\u5f00\u7684\u8868\u8fbe\u5f0f\u5206\u522b\u6c42\u503c\uff0c\u4ee5\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4f5c\u4e3a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li> <li>x\u4e3a\u6d6e\u70b9\u578b\uff0c\u5219\u8868\u8fbe\u5f0f<code>x=10/4</code>\u7684\u503c\u4e3a2.0</li> <li>%\u8fd0\u7b97\u6570\u5fc5\u987b\u662f\u6574\u578b</li> <li><code>a[2]+3</code>\u8868\u793aa\u6570\u7ec4\u884c\u4e0b\u6807\u4e3a2\uff0c\u5217\u4e0b\u6807\u4e3a3\u7684\u5143\u7d20\u7684\u5730\u5740</li> <li>\u8fde\u63a5\u7b26\u4e0d\u80fd\u7ec4\u6210\u6807\u8bc6\u7b26</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e</li> <li>C\u8bed\u8a00\u4e2d\u6240\u6709\u5173\u952e\u5b57\u5fc5\u987b\u5c0f\u5199</li> <li>int long float \u6df7\u5408\u8fd0\u7b97\uff0c\u7ed3\u679c\u7684\u6570\u636e\u7c7b\u578b\u662fdouble</li> <li>\u518dswitch\u8bed\u53e5\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u4f7f\u7528break\u8bed\u53e5</li> <li>\u5b9e\u53c2\u4e0e\u5176\u5bf9\u5e94\u7684\u5f62\u53c2\u5206\u522b\u5360\u7528\u72ec\u7acb\u7684\u5b58\u50a8\u5355\u5143</li> <li>continue\u53ea\u80fd\u8fd0\u7528\u4e8e\u5faa\u73af\u4f53\u4e2d</li> <li>C\u8bed\u8a00\u6e90\u7a0b\u5e8f\u7684\u6269\u5c55\u540d\u662fC</li> <li>C\u8bed\u8a00\u5168\u5c40\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u81ea\u52a8\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u5c40\u90e8\u53d8\u91cf\u4e0d\u4e00\u5b9a\uff0c\u5c40\u90e8\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u4e0d\u786e\u5b9a</li> <li>double\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u6bd4int\u578b\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u591a</li> <li>for\u5faa\u73af\u7684\u4e09\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u7701\u7565</li> <li>\u53d8\u91cf\u88ab\u5b9a\u4e49\u540e\uff0c\u5b83\u4f5c\u7528\u57df\u548c\u5bff\u547d\u5c31\u88ab\u786e\u5b9a\u4e86\uff0c\u5e76\u4e14\u4e0d\u53ef\u6539\u53d8</li> <li>\u6761\u4ef6\u8fd0\u7b97\u7b26?\u548c:\u662f\u4e00\u5bf9\u8fd0\u7b97\u7b26\uff0c\u4e0d\u80fd\u5206\u5f00\u5355\u72ec\u4f7f\u7528</li> <li>\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012\u5230\u5f62\u53c2\u6709\u4e24\u79cd\u65b9\u5f0f\u503c\u4f20\u9012\u548c\u5730\u5740\u4f20\u9012</li> <li>\u82e5\u53d8\u91cf\u5b9a\u4e49\u4e3aint x, y; \uff0c\u5219x + y = 22==\u4e0d\u662f==\u7b26\u5408C\u8bed\u8a00\u8bed\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002</li> <li>C\u7a0b\u5e8f\u4e2d\uff0c\u7528\u4e00\u5bf9\u5927\u62ec\u53f7{}\u62ec\u8d77\u6765\u7684\u591a\u6761\u8bed\u53e5\u79f0\u4e3a\u590d\u5408\u8bed\u53e5\uff0c\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5\u3002</li> <li>!!6\u7684\u503c\u662f1</li> <li>\u82e5\u8868\u8fbe\u5f0fsizeof(int)\u7684\u503c\u4e3a4\uff0c\u5219int\u7c7b\u578b\u6570\u636e\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u6574\u6570\u4e3a 2^31-1(4\u4e2a\u5b57\u8282\uff0c\u6bcf\u5b57\u82828\u4f4d\uff0c\u4e00\u517132\u4f4d\uff0c\u51cf\u53bb\u4e00\u4e2a\u7b26\u53f7\u4f4d)</li> <li>\u4e0efloat\u578b\u6570\u636e\u76f8\u6bd4\uff0cdouble\u578b\u6570\u636e\u7684\u7cbe\u5ea6\u9ad8\uff0c\u53d6\u503c\u8303\u56f4\u5927</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b</li> <li>int a=4, b=3, c=2, d=1, m=1, n=3;\uff0c\u6267\u884c ( m=a&gt;b&gt;c) &amp;&amp; (n=c&gt;d) \u540e n \u7684\u503c\u4e3a\uff08 \uff093</li> <li>\u5728switch\u8bed\u53e5\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7684case\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c==\u4e0d==\u53ef\u4ee5\u76f8\u540c</li> <li>case\u4e2d\u7684\u53d8\u91cf\u503c\u53ea\u80fd\u662f\u6574\u6570\u5e38\u91cf\u503c\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u7b26\u53f7</li> <li>while(i&lt;=10);i++ \u6b7b\u5faa\u73af</li> <li>\u5728\u5b9a\u4e49\u6570\u7ec4\u4e4b\u540e\uff0c\u6839\u636e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u7c7b\u578b\u53ca\u4e2a\u6570\uff0c\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u6bb5\u8fde\u7eed\u5b58\u50a8\u5355\u5143\u7528\u4e8e\u5b58\u653e\u6570\u7ec4\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\u3002</li> <li>\u6570\u7ec4\u5b9a\u4e49\u540e\uff0c\u6570\u7ec4\u540d\u8868\u793a\u8be5\u6570\u7ec4\u6240\u5206\u914d\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e2d\u7b2c\u4e00\u4e2a\u5355\u5143\u7684\u5730\u5740\uff0c\u5373\u9996\u5730\u5740</li> <li>\u5730\u5740\u4e00\u822c\u4e0d\u53ef\u88ab\u66f4\u6539</li> <li>\u51fd\u6570\u4e0d\u80fd\u6ca1\u6709\u5927\u62ec\u53f7</li> </ul>"},{"location":"cs/language/c/c/#_2","title":"\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_3","title":"\u53cd\u8f6c\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_4","title":"\u8fed\u4ee3","text":"<p>\u5728\u904d\u5386\u94fe\u8868\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6539\u4e3a\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u7531\u4e8e\u8282\u70b9\u6ca1\u6709\u5f15\u7528\u5176\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u5fc5\u987b\u4e8b\u5148\u5b58\u50a8\u5176\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u66f4\u6539\u5f15\u7528\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u5b58\u50a8\u540e\u4e00\u4e2a\u8282\u70b9\u3002\u6700\u540e\u8fd4\u56de\u65b0\u7684\u5934\u5f15\u7528\u3002</p> <pre><code>struct ListNode* reverseList(struct ListNode* head){\nstruct ListNode* prev = NULL;\nstruct ListNode* curr = head;\nwhile(curr){\nstruct ListNode* next = curr-&gt;next;\ncurr-&gt;next=prev;\nprev=curr;\ncurr=next;\n}\nreturn prev;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_5","title":"\u9012\u5f52","text":"<pre><code>struct ListNode* reverseList(struct ListNode* head){\nif(head==NULL||head-&gt;next==NULL)\n{\nreturn head;\n}\nstruct ListNode* newHead = reverseList(head-&gt;next);\nhead-&gt;next-&gt;next=head;\nhead-&gt;next=NULL;\nreturn newHead;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_6","title":"\u56de\u6587\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_7","title":"\u5b58\u8fdb\u6570\u7ec4\u8fdb\u884c\u6bd4\u8f83","text":""},{"location":"cs/language/c/c/#_8","title":"\u9012\u5f52","text":"<p>\u7b97\u6cd5 <code>currentNode</code> \u6307\u9488\u662f\u5148\u5230\u5c3e\u8282\u70b9\uff0c\u7531\u4e8e\u9012\u5f52\u7684\u7279\u6027\u518d\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u6bd4\u8f83\u3002<code>frontPointer</code> \u662f\u9012\u5f52\u51fd\u6570\u5916\u7684\u6307\u9488\u3002\u82e5 <code>currentNode.val != frontPointer.val</code>\u5219\u8fd4\u56de false\u3002\u53cd\u4e4b\uff0c<code>frontPointer</code> \u5411\u524d\u79fb\u52a8\u5e76\u8fd4\u56de true\u3002</p> <p>\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5728\u4e8e\u9012\u5f52\u5904\u7406\u8282\u70b9\u7684\u987a\u5e8f\u662f\u76f8\u53cd\u7684\uff0c\u800c\u6211\u4eec\u5728\u51fd\u6570\u5916\u53c8\u8bb0\u5f55\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u56e0\u6b64\u4ece\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u540c\u65f6\u5728\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5339\u914d\u3002</p> <pre><code>struct ListNode* frontPointer;\nbool recursivelyCheck(struct ListNode* currentNode){\nif(currentNode != NULL)\n{\nif(!recursivelyCheck(currentNode-&gt;next))\n{\nreturn false;\n}\nif(currentNode-&gt;val != frontPointer-&gt;val)\n{\nreturn false;\n}\nfrontPointer = frontPointer-&gt;next;\n}\nreturn true;\n}\nbool isPalindrome(struct ListNode *head)\n{\nfrontPointer = head;\nreturn recursivelyCheck(head);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_9","title":"\u73af\u5f62\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_10","title":"\u5feb\u6162\u6307\u9488","text":"<p>\u5047\u60f3\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u5728\u94fe\u8868\u4e0a\u79fb\u52a8\uff0c\u300c\u5154\u5b50\u300d\u8dd1\u5f97\u5feb\uff0c\u300c\u4e4c\u9f9f\u300d\u8dd1\u5f97\u6162\u3002\u5f53\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u4ece\u94fe\u8868\u4e0a\u7684\u540c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u79fb\u52a8\u65f6\uff0c\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u5c06\u4e00\u76f4\u5904\u4e8e\u300c\u4e4c\u9f9f\u300d\u7684\u524d\u65b9\uff1b\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u4f1a\u5148\u4e8e\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\uff0c\u5e76\u4e14\u4e00\u76f4\u5728\u73af\u5185\u79fb\u52a8\u3002\u7b49\u5230\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\u65f6\uff0c\u7531\u4e8e\u300c\u5154\u5b50\u300d\u7684\u901f\u5ea6\u5feb\uff0c\u5b83\u4e00\u5b9a\u4f1a\u5728\u67d0\u4e2a\u65f6\u523b\u4e0e\u4e4c\u9f9f\u76f8\u9047\uff0c\u5373\u5957\u4e86\u300c\u4e4c\u9f9f\u300d\u82e5\u5e72\u5708\u3002</p> <pre><code>bool hasCycle(struct ListNode *head) {\nstruct ListNode *p,*q;\np=head;\nq=head;\nwhile(q&amp;&amp;q-&gt;next)\n{\np=p-&gt;next;\nq=q-&gt;next-&gt;next;\nif(p==q)\n{\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_11","title":"\u76f8\u4ea4\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_12","title":"\u53cc\u6307\u9488\u6cd5","text":"<pre><code>struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\nif (headA == NULL || headB == NULL) {\nreturn NULL;\n}\nstruct ListNode *pA = headA, *pB = headB;\nwhile (pA != pB) {\npA = pA == NULL ? headB : pA-&gt;next;\npB = pB == NULL ? headA : pB-&gt;next;\n}\nreturn pA;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_13","title":"\u94fe\u8868\u6392\u5e8f","text":"<pre><code>struct ListNode *merge(struct ListNode *head1,struct ListNode *head2)//\u57fa\u672c\u7684\u94fe\u8868\u5408\u5e76\u64cd\u4f5c\n{\nstruct ListNode *dummyhead = (struct ListNode*)malloc(sizeof(struct ListNode));\nstruct ListNode *temp=dummyhead,*temp1=head1,*temp2=head2;\nwhile(temp1&amp;&amp;temp2)\n{\nif(temp1-&gt;val&lt;temp2-&gt;val)\n{\ntemp-&gt;next=temp1;\ntemp1=temp1-&gt;next;\n}else\n{\ntemp-&gt;next=temp2;\ntemp2=temp2-&gt;next;\n}\ntemp=temp-&gt;next;\n}\nif(temp1) temp-&gt;next=temp1;\nif(temp2) temp-&gt;next=temp2;\nreturn dummyhead-&gt;next;\n}\nstruct ListNode *sort(struct ListNode *head,struct ListNode *tail)\n{\nif(head==NULL)//\u7a7a\u94fe\u8868\nreturn head;\nif(head-&gt;next==tail)//\u5355\u8282\u70b9\u94fe\u8868\n{\nhead-&gt;next=NULL;\nreturn head;\n}\nstruct ListNode *fast=head,*slow=head;//\u5feb\u6162\u6307\u9488\u6cd5\u5bfb\u627e\u4e2d\u70b9\nwhile(fast!=tail)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next;\nif(fast!=tail)//\u91c7\u7528\u5206\u90e8\u79fb\u52a8\u5feb\u6307\u9488\u7684\u65b9\u6cd5\uff0c\u9632\u6b62fast\u79fb\u51fa\u94fe\u8868\n{\nfast=fast-&gt;next;\n}\n}\nstruct ListNode *mid=slow;\nreturn merge(sort(head,mid),sort(mid,fast));\n}\nstruct ListNode* sortList(struct ListNode* head){\nreturn sort(head,NULL);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_14","title":"\u91cd\u6392\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_15","title":"\u4e2d\u70b9\u53cd\u8f6c\u540e\u534a\u6bb5\u94fe\u8868+\u5408\u5e76","text":"<pre><code>void reorderList(struct ListNode* head){\nif(head==NULL)\nreturn;\nstruct ListNode *slow,*fast;\nslow=head,fast=head;\nwhile(fast&amp;&amp;fast-&gt;next)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next-&gt;next;\n}\nstruct ListNode *l2=reverse(slow-&gt;next);\nslow-&gt;next=NULL;\nstruct ListNode *l1=head;\nstruct ListNode* l1_tmp;\nstruct ListNode* l2_tmp;//\u5408\u5e76\u94fe\u8868\u7684\u65b9\u6cd5\uff0c\u53cc\u6307\u9488\nwhile (l1 &amp;&amp; l2) {\nl1_tmp = l1-&gt;next;\nl2_tmp = l2-&gt;next;\nl1-&gt;next = l2;\nl1 = l1_tmp;\nl2-&gt;next = l1;\nl2 = l2_tmp;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_16","title":"\u5b57\u7b26\u4e32","text":""},{"location":"cs/language/c/c/#_17","title":"\u5b57\u7b26\u4e32\u8f6e\u8f6c","text":"<p>\u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32<code>s1</code>\u548c<code>s2</code>\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5<code>s2</code>\u662f\u5426\u4e3a<code>s1</code>\u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c<code>waterbottle</code>\u662f<code>erbottlewat</code>\u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002</p>"},{"location":"cs/language/c/c/#sprintf","title":"<code>sprintf</code>\u51fd\u6570","text":"<ul> <li> <p>\u8be5\u51fd\u6570\u5305\u542b\u5728<code>stdio.h</code>\u5934\u6587\u4ef6</p> </li> <li> <p><code>sprintf</code>\u51fd\u6570\u6253\u5370\u5230\u5b57\u7b26\u4e32\u4e2d\uff08\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8981\u8db3\u591f\u5bb9\u7eb3\u6253\u5370\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5185\u5b58\u6ea2\u51fa\uff09\uff0c\u800c<code>printf</code>\u51fd\u6570\u6253\u5370\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\u3002</p> </li> <li> <p><code>c   char str[20];   double f=14.309948;   sprintf(str,\"%6.2f\",f);//\u53ef\u4ee5\u63a7\u5236\u7cbe\u5ea6\uff0c\u6570\u5b57\u6574\u4f53\u957f\u5ea6\u5305\u62ec\u5c0f\u6570\u70b9\u4e3a6\u4f4d\uff0c\u4fdd\u75592\u4f4d\u5c0f\u6570   int a=20984,b=48090;   sprintf(str,\"%3d%6d\",a,b)//\u5c06\u591a\u4e2a\u6570\u503c\u6570\u636e\u8fde\u63a5\u8d77\u6765</code></p> </li> <li> <p>\u8fd4\u56de\u503c\uff1a\u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5199\u5165\u7684\u5b57\u7b26\u603b\u6570\uff0c\u4e0d\u5305\u62ec\u5b57\u7b26\u4e32\u8ffd\u52a0\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u5931\u8d25\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6570</p> </li> </ul>"},{"location":"cs/language/c/c/#strstr","title":"<code>strstr</code>\u51fd\u6570","text":"<ul> <li><code>strstr(str1,str2)</code>\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32<code>str2</code>\u662f\u5426\u662f<code>str1</code>\u7684\u5b50\u4e32</li> <li>\u5982\u679c\u662f\u5219\u8be5\u51fd\u6570\u8fd4\u56destr2\u5728str1\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740\uff0c\u5426\u5219\u8fd4\u56deNULL</li> </ul>"},{"location":"cs/language/c/c/#_18","title":"\u65b9\u6cd5\u4e00\uff1a\u641c\u7d22\u5b50\u5b57\u7b26\u4e32","text":"<p><code>s+s</code>\u5305\u542b\u4e86\u6240\u6709<code>s1</code>\u53ef\u4ee5\u901a\u8fc7\u8f6e\u8f6c\u64cd\u4f5c\u5f97\u5230\u7684\u5b57\u7b26\u4e32</p> <pre><code>bool isFlipedString(char* s1, char* s2) {\nint m = strlen(s1), n = strlen(s2);\nif (m != n) {\nreturn false;\n}\nchar * str = (char *)malloc(sizeof(char) * (m + n + 1));//\u6ce8\u610fmalloc\uff0c\u786e\u4fddsprintf\u51fd\u6570\u7684\u5b9e\u73b0\nsprintf(str, \"%s%s\", s2, s2);\nreturn strstr(str, s1) != NULL;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_19","title":"\u65b9\u6cd5\u4e8c\uff1a\u6a21\u62df","text":"<pre><code>bool isFlipedString(char* s1, char* s2){\nint m=strlen(s1);\nint n=strlen(s2);\nif(m!=n)\nreturn false;\nif(n==0)\nreturn true;\nfor(int i=0;i&lt;n;i++)\n{\nint flag=1;\nfor(int j=0;j&lt;n;j++)\n{\nif(s2[j]!=s1[(j+i)%n])\n{\nflag=0;\n}\n}\nif(flag) return true;\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_20","title":"\u5b57\u7b26\u4e32\u538b\u7f29","text":"<p>\u5b57\u7b26\u4e32\u538b\u7f29\u3002\u5229\u7528\u5b57\u7b26\u91cd\u590d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7f16\u5199\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b9e\u73b0\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u538b\u7f29\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u5b57\u7b26\u4e32<code>aabcccccaaa</code>\u4f1a\u53d8\u4e3a<code>a2b1c5a3</code>\u3002\u82e5\u201c\u538b\u7f29\u201d\u540e\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u53d8\u77ed\uff0c\u5219\u8fd4\u56de\u539f\u5148\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>char* compressString(char* S){//\u5178\u578b\u53cc\u6307\u9488\u6cd5\nint len=strlen(S);\nif(len&lt;=2)\nreturn S;\nchar *str=(char*)malloc(sizeof(char)*(len*3));\nint cnt=1;\nint p=0;\nfor(int i=1;i&lt;=len;i++)\n{\nif(S[i-1]==S[i])\n{\ncnt++;\n}\nelse{\nstr[p++]=S[i-1];\nint wlen = sprintf(&amp;str[p],\"%d\",cnt);//sprintf\u51fd\u6570\u8fd0\u7528\np+=wlen;//\u6b64\u5904\u6709\u6613\u9519\u70b9\uff0ccnt\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u5728\u5b57\u7b26\u6570\u7ec4\u4e2d\u5360\u7684\u4f4d\u4e0d\u540c\uff0c\u7528\u5230sprintf\u51fd\u6570\u4e0e\u6307\u9488\ncnt=1;\n}\n}\nstr[p]='\\0';\nif(strlen(str)&gt;=len)\nreturn S;\nreturn str;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_21","title":"\u5b57\u7b26\u4e32\u76f8\u52a0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 <code>num1</code> \u548c<code>num2</code> \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u5e76\u540c\u6837\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u3002</p>"},{"location":"cs/language/c/c/#_22","title":"\u6a21\u62df\u7684\u601d\u60f3 \u6a21\u62df\u52a0\u6cd5\u7ad6\u5f0f","text":"<pre><code>char *addStrings(char *num1,char*num2)\n{\nint i=strlen(num1)-1,j=strlen(num2)-1;\nchar *ans = (char*)malloc(sizeof(char)*(10000));\nint len=0,add=0;\nwhile(i&gt;=0||j&gt;=0||add!=0)\n{\nint x=i&gt;=0?num1[i]-'0':0;\nint y=j&gt;=0?num2[j]-'0':0;\nint result=x+y+add;\nans[len++]='0'+result%10;\nint add=result/10;\ni--,j--;\n}\nfor(int i=0;i*2&lt;len;i++)\n{\nint t=ans[i];\nans[i]=ans[len-1-i];\nans[len-1-i]=t;\n}\nans[len]='\\0';\nreturn ans;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_23","title":"\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6df7\u5408\u4e86\u6570\u5b57\u548c\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u5176\u4e2d\u7684\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u5c06\u8be5\u5b57\u7b26\u4e32\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u7684\u7c7b\u578b\u90fd\u4e0d\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b57\u6bcd\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u6570\u5b57\uff0c\u800c\u6570\u5b57\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de \u91cd\u65b0\u683c\u5f0f\u5316\u540e \u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u65e0\u6cd5\u6309\u8981\u6c42\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5b57\u7b26\u4e32 \u3002</p>"},{"location":"cs/language/c/c/#isdigit","title":"<code>isdigit</code>\u51fd\u6570","text":"<ul> <li>\u5934\u6587\u4ef6 <code>#include&lt;ctype.h&gt;</code></li> <li>\u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u963f\u62c9\u4f2f\u6570\u5b570~9\uff0c\u5982\u679c\u662f\uff0c\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6</li> </ul>"},{"location":"cs/language/c/c/#_24","title":"\u53cc\u6307\u9488\u6cd5\uff08\u53d8\u5f0f\uff09","text":"<p>\u6211\u4eec\u628a\u6570\u5b57\u548c\u5b57\u6bcd\u4e2d\u4e2a\u6570\u591a\u7684\u653e\u5728\u5076\u6570\u4f4d\u4e0a\uff08\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 000 \u5f00\u59cb\uff09\uff0c\u4e2a\u6570\u5c11\u7684\u653e\u5728\u5947\u6570\u4f4d\u4e0a\uff0c\u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u51fa\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u3002\u90a3\u4e48\u6211\u4eec\u7528 i \u548c j \u6765\u5206\u522b\u8868\u793a\u4e2a\u6570\u591a\u7684\u548c\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u653e\u7f6e\u7684\u4e0b\u6807\uff0c\u521d\u59cb\u4e3a i=0,j=1\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\u79fb\u52a8 iii\uff0c\u5f53 s[i] \u4e3a\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u7c7b\u578b\u65f6\uff0c\u90a3\u4e48\u5411\u53f3\u79fb\u52a8 j \u627e\u5230\u5f80\u540e\u7684\u7b2c\u4e00\u4e2a s[j]\u4e3a\u4e2a\u6570\u591a\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u7136\u540e\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u5373\u53ef\uff0c\u4e0d\u65ad\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u81f3 i\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5373\u53ef\u3002</p> <pre><code>char * reformat(char * s){\nint sum_digit = 0;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; i++) {\nchar c = s[i];\nif (isdigit(c)) {\nsum_digit++;\n}\n}\nint sum_alpha = len - sum_digit;\nif (abs(sum_digit - sum_alpha) &gt; 1) {\nreturn \"\";\n}\nbool flag = sum_digit &gt; sum_alpha;\nfor (int i = 0, j = 1; i &lt; len; i += 2) {\nif ((isdigit(s[i]) != 0) != flag) {\nwhile ((isdigit(s[j]) != 0) != flag) {\nj += 2;\n}\nchar c = s[i];\ns[i] = s[j];\ns[j] = c;\n}\n}\nreturn s;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_25","title":"\u540c\u6784\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p> <p>\u5982\u679c <code>s</code> \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u6309\u67d0\u79cd\u6620\u5c04\u5173\u7cfb\u66ff\u6362\u5f97\u5230 <code>t</code> \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p> <p>\u6bcf\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5e94\u5f53\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\uff0c\u540c\u65f6\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e0d\u540c\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u76f8\u540c\u5b57\u7b26\u53ea\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u5230\u81ea\u5df1\u672c\u8eab\u3002</p>"},{"location":"cs/language/c/c/#uthash","title":"<code>uthash</code>","text":"<ul> <li>\u5934\u6587\u4ef6<code>#include&lt;uthash.h&gt;</code></li> </ul>"},{"location":"cs/language/c/c/#_26","title":"\u521b\u5efa\u952e\u2014\u503c\u5bf9\u7ed3\u6784","text":"<ul> <li> <p>\u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u7ed3\u6784\u4f53</p> </li> <li> <p><code>C   struct  HashTable{       int id;                    // key\uff0c\u53ef\u4ee5\u662f\u6574\u578b\uff0c\u5b57\u7b26\uff0c\u6307\u9488        char name[10];             // value \u4e0d\u4e00\u5b9a\u5b58\u5728       UT_hash_handle hh;         /* makes this structure hashable */   };   struct HashTable *users =NULL;//\u521d\u59cb\u5316\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4e00\u5b9a\u8981\u521d\u59cb\u5316\u4e3aNULL</code></p> </li> </ul>"},{"location":"cs/language/c/c/#hash_find_int","title":"HASH_FIND_INT","text":"<pre><code>HASH_FIND_INT( users, &amp;user_id, s ); /* s: output pointer */\n//users:\u5f85\u67e5\u8be2\u7684hash\u8868\n//&amp;nuser_id\uff1a\u6307\u5411\u60f3\u67e5\u8be2\u7684key\u7684\u5730\u5740\n//s\uff1a\u8868\u793a\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u54c8\u5e0c\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u6307\u9488\uff0c\u9700\u8981\u4e8b\u5148\u5b9a\u4e49\n</code></pre> <pre><code>struct my_struct *find_user(int user_id) {   /* \u83b7\u5f97key=user_id\u7684\u952e\u503c\u5bf9 */\nstruct my_struct *s;   /* \u5b9a\u4e49s */\ns=(struct my_struct*)malloc(sizeof(struct my_struct));\nHASH_FIND_INT( users, &amp;user_id, s );  /* s: output pointer */\nreturn s;\n}\n</code></pre>"},{"location":"cs/language/c/c/#hash_add_int","title":"HASH_ADD_INT","text":"<p>\u7531\u4e8e\u8981\u4fdd\u6301\u54c8\u5e0c\u8868\u4e2d\u7684\u552f\u4e00\u6027\uff0c\u5728\u63d2\u5165\u952e\u503c\u5bf9\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5224\u65ad\u8868\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8981\u63d2\u5165\u7684\u952e\uff0c\u5982\u679c\u5df2\u5b58\u5728\uff0c\u5c31\u76f4\u63a5\u4fee\u6539\u952e\u5bf9\u5e94\u7684value\uff1b\u5982\u679c\u6ca1\u6709\u5b58\u5728\uff0c\u63d2\u5165\u952e\u503c\u5bf9\u3002</p> <pre><code>HASH_ADD_INT( users, id, s );  /* id: \u81ea\u5b9a\u4e49\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\u4e2dkey\u57df\u7684\u53d8\u91cf\u540d ,s\u662f\u5f85\u63d2\u5165\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\uff0c\u6307\u9488\u5f62\u5f0f\uff0ckey\u548cvalue\u90fd\u8981\u7ed9\u5b9a\n</code></pre> <pre><code>void add_user(int user_id, char *name) {\nstruct my_struct *s;\nHASH_FIND_INT(users, &amp;user_id, s);  /* id already in the hash? */\nif (s==NULL) {     /* \u5982\u679cs\u7684key\u4e0d\u5b58\u5728 */\ns = (struct my_struct *)malloc(sizeof *s);\ns-&gt;id = user_id;\nHASH_ADD_INT( users, id, s );  /* id: name of key field */\n}\nstrcpy(s-&gt;name, name);   /* s\u7684key\u5b58\u5728\uff0c\u76f4\u63a5\u66f4\u65b0value\u503c */\n}\n</code></pre>"},{"location":"cs/language/c/c/#_27","title":"\u7edf\u8ba1\u5143\u7d20\u4e2a\u6570","text":"<pre><code>num_numbers = HASH_COUNT(users);\n</code></pre>"},{"location":"cs/language/c/c/#_28","title":"\u5faa\u73af\u54c8\u5e0c\u8868","text":""},{"location":"cs/language/c/c/#for","title":"\u65b9\u6cd5\u4e00 \u81ea\u5df1\u5199for\u5faa\u73af","text":"<p>\u5728<code>uthash</code>\u4e2d\uff0c\u54c8\u5e0c\u8868\u4e2d\u6bcf\u4e2a\u952e\u503c\u5bf9\u4e4b\u95f4\u6709\u6307\u9488\u76f8\u8fde\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u53e5\u67c4<code>hh</code>\u6765\u5b9e\u73b0\u6307\u9488\u8c03\u7528\u3002 \u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u4f1a\u6709\u4e00\u4e2a\u524d\u5411\u6307\u9488<code>hh.prev</code>\u4e0e\u540e\u5411\u6307\u9488<code>hh.next</code>\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u53cc\u5411\u94fe\u8868\u4f7f\u7528\u3002</p> <pre><code>void print_users() {\nstruct my_struct *s;\nfor(s=users; s != NULL; s=s-&gt;hh.next) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#hash_iter","title":"\u65b9\u6cd5\u4e8c\uff1aHASH_ITER","text":"<pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp)\n//hh\u662f\u53e5\u67c4\uff0cs\u8868\u793a\u6bcf\u6b21\u5faa\u73af\u65f6\u83b7\u5f97\u7684\u90a3\u4e2a\u952e\u503c\u5bf9\uff0c\u5728\u51fd\u6570\u524d\u76f4\u63a5\u5b9a\u4e49\uff0c\u4e0d\u7528\u8d4b\u521d\u503c\uff0ctmp,\u4e34\u65f6\u53d8\u91cf\uff0c\u7ed3\u6784\u4f53\u6307\u9488\uff08\u4e0d\u7528\u8d4b\u503c\uff09\n</code></pre> <pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_29","title":"\u540c\u6784\u5b57\u7b26\u4e32\u89e3\u6cd5","text":"<ul> <li>\u53cc\u5c04\u5173\u7cfb</li> <li>\u7ef4\u62a4\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u7b2c\u4e00\u5f20\u54c8\u5e0c\u8868s2t\u4ee5s\u4e2d\u5b57\u7b26\u4e3a\u952e\uff0c\u6620\u5c04\u5230t\u7684\u5b57\u7b26\u4e3a\u503c\uff0c\u7b2c\u4e8c\u5f20\u5219\u76f8\u53cd\u3002\u4ece\u5de6\u81f3\u53f3\u904d\u5386\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\uff0c\u4e0d\u65ad\u66f4\u65b0\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u8fd4\u56defalse</li> </ul> <pre><code>struct HashTable {\nchar key;\nchar val;\nUT_hash_handle hh;\n};\nbool isIsomorphic(char* s, char* t) {\nstruct HashTable* s2t = NULL;\nstruct HashTable* t2s = NULL;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; ++i) {\nchar x = s[i], y = t[i];\nstruct HashTable *tmp1, *tmp2;\nHASH_FIND(hh, s2t, &amp;x, sizeof(char), tmp1);\nHASH_FIND(hh, t2s, &amp;y, sizeof(char), tmp2);\nif (tmp1 != NULL) {\nif (tmp1-&gt;val != y) {\nreturn false;\n}\n} else {\ntmp1 = malloc(sizeof(struct HashTable));\ntmp1-&gt;key = x;\ntmp1-&gt;val = y;\nHASH_ADD(hh, s2t, key, sizeof(char), tmp1);\n}\nif (tmp2 != NULL) {\nif (tmp2-&gt;val != x) {\nreturn false;\n}\n} else {\ntmp2 = malloc(sizeof(struct HashTable));\ntmp2-&gt;key = y;\ntmp2-&gt;val = x;\nHASH_ADD(hh, t2s, key, sizeof(char), tmp2);\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_30","title":"\u6392\u5e8f","text":""},{"location":"cs/language/c/c/#_31","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void qsort(int l,int r){\nint mid=a[(l+r)/2];\nint i=l,j=r;\nwhile(i&lt;=j){\nwhile(a[i]&lt;mid) i++;\nwhile(a[j]&gt;mid) j--;\nif(i&lt;=j){\nswap(&amp;a[i],&amp;a[j]);\ni++;\nj--;\n}\n}\nif(l&lt;j) qsort(l,j);\nif(i&lt;r) qsort(i,r);\n}\n</code></pre> <pre><code>void qsort(int a[],int x,int y)\n{\nif(x&gt;=y)\nreturn;\nint left=x;\nint right=y;\nint mid=a[left];\nwhile(left&lt;=right)\n{\nwhile(a[right]&gt;=mid&amp;&amp;left&lt;right)\n{\nright--;\n}\na[left]=a[right];\nwhile(a[left]&lt;=mid&amp;&amp;left&lt;right)\n{\nleft++;\n}\na[right]=a[left];\n}\na[left]=mid;\nqsort(a,x,left-1);\nqsort(a,left+1,y);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_32","title":"\u63d2\u5165\u6392\u5e8f","text":"<pre><code>void insertion_sort(int a[],int len){\nint key;int i,j;\nfor(i=1;i&lt;len;i++){\nkey=a[i];\nj=i-1;\nwhile(j&gt;=0&amp;&amp;a[j]&gt;key){\na[j+1]=a[j];\nj--;\n}\na[j+1]=key;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_33","title":"\u5192\u6ce1\u6392\u5e8f","text":"<pre><code>void bubble_sort(int a[],int len)\n{\nfor(int i=len-1;i&gt;0;i--)\n{\nint loc=0;\nfor(int j=0;j&lt;i;j++)\n{\nif(a[j]&gt;a[j+1])\n{\nswap(&amp;a[j],&amp;a[j+1]);\nloc=j;\n}\n}\ni=loc+1;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_34","title":"\u5f52\u5e76\u6392\u5e8f","text":"<pre><code>void merge_sort(int a[],int start,int end)\n{\nif(start&gt;=end)\nreturn;\nint b[100001];\nint mid=(end+start)/2;\nint start1 = start,end1 = mid;\nint start2 = mid+1,end2 = end;\nmerge_sort(a , start1 , end1);\nmerge_sort(a ,  start2 , end2);\nint k=start;\nwhile(start1 &lt;= end1&amp;&amp;start2 &lt;= end2)\n{\nb[k++]=a[start1]&lt;a[start2]?a[start1++]:a[start2++];\n}\nwhile(start1&lt;=end1)\n{\nb[k++]=a[start1++];\n}\nwhile(start2&lt;=end2)\n{\nb[k++]=a[start2++];\n}\nfor(k=start;k&lt;=end;k++)\n{\na[k]=b[k];\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_35","title":"\u9009\u62e9\u6392\u5e8f","text":"<pre><code>void selection_sort(int a[],int len)\n{\nfor(int i=0;i&lt;n-1;i++)\n{\nint min=i;\nfor(int j=i+1;j&lt;n;j++)\n{\nif(a[j]&lt;a[min])\n{\nmin=j;\n}\n}\nswap(&amp;a[min],&amp;a[i]);\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_36","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"cs/language/c/c/#_37","title":"\u4e0e\u8fd0\u7b97<code>&amp;</code>","text":"<ul> <li>\u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1</li> </ul> <p>3&amp;5 \u5373 0000 0011&amp; 0000 0101 = 0000 0001\uff0c\u56e0\u6b64 3&amp;5 \u7684\u503c\u5f971\u3002</p>"},{"location":"cs/language/c/c/#_38","title":"\u7528\u9014","text":"<p>1.\u6e05\u96f6\uff1a\u5982\u679c\u60f3\u5c06\u4e00\u4e2a\u5355\u5143\u6e05\u96f6\uff0c\u53ea\u8981\u4e0e\u4e00\u4e2a\u5404\u4f4d\u90fd\u4e3a\u96f6\u7684\u6570\u503c\u76f8\u4e0e\uff0c\u7ed3\u679c\u4e3a\u96f6</p> <p>2.\u53d6\u4e00\u4e2a\u6570\u7684\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u53d6\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff08X&amp;Y=0000 1110\uff09\u5373\u53ef\u5f97\u5230X\u7684\u6307\u5b9a\u4f4d\u3002</p> <p>3.\u5224\u65ad\u5947\u5076\uff1a\u53ea\u8981\u6839\u636e\u6700\u672b\u4f4d\u662f0\u8fd8\u662f1\u6765\u51b3\u5b9a\uff0c\u4e3a0\u5c31\u662f\u5076\u6570\uff0c\u4e3a1\u5c31\u662f\u5947\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u7528if ((a &amp; 1) == 0)\u4ee3\u66ffif (a % 2 == 0)\u6765\u5224\u65ada\u662f\u4e0d\u662f\u5076\u6570\u3002</p>"},{"location":"cs/language/c/c/#_39","title":"\u6216\u8fd0\u7b97|","text":"<p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\u53ea\u8981\u6709\u4e00\u4e2a\u4e3a1\uff0c\u5176\u503c\u4e3a1</p>"},{"location":"cs/language/c/c/#_40","title":"\u7528\u9014","text":"<ul> <li>\u5e38\u7528\u6765\u5bf9\u4e00\u4e2a\u6570\u636e\u7684\u67d0\u4e9b\u4f4d\u8bbe\u7f6e\u4e3a1</li> </ul>"},{"location":"cs/language/c/c/#_41","title":"\u5f02\u6216\u8fd0\u7b97^","text":"<pre><code>0^0=0 0^1=1 1^0=1 1^1=0\n</code></pre> <p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u76f8\u540c\u4e3a0\uff0c\u5426\u5219\u4e3a1</p> <p>\u5f02\u6216\u7684\u51e0\u6761\u6027\u8d28:</p> <ul> <li>1\u3001\u4ea4\u6362\u5f8b</li> <li>2\u3001\u7ed3\u5408\u5f8b (a^b)^c == a^(b^c)</li> <li>3\u3001\u5bf9\u4e8e\u4efb\u4f55\u6570x\uff0c\u90fd\u6709 x^x=0\uff0cx^0=x</li> <li>4\u3001\u81ea\u53cd\u6027: a^b^b=a^0=a;</li> </ul>"},{"location":"cs/language/c/c/#_42","title":"\u7528\u9014","text":"<ul> <li>\u7ffb\u8f6c\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u5c06\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff08X^Y=1010 0001\uff09\u5373\u53ef\u5f97\u5230\u3002</li> <li>\u4e0e0\u76f8\u5f02\u6216\u503c\u4e0d\u53d8</li> <li>\u4ea4\u6362\u4e24\u4e2a\u6570</li> </ul>"},{"location":"cs/language/c/c/#_43","title":"\u5de6\u79fb\u8fd0\u7b97\u7b26&lt;&lt;","text":"<p>\u5c06\u4e00\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff08\u5de6\u8fb9\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e22\u5f03\uff0c\u53f3\u8fb9\u88650\uff09\u3002</p> <p>\u8bbe a=1010 1110\uff0ca = a&lt;&lt; 2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u5de6\u79fb2\u4f4d\u3001\u53f3\u88650\uff0c\u5373\u5f97a=1011 1000\u3002</p> <p>\u82e5\u5de6\u79fb\u65f6\u820d\u5f03\u7684\u9ad8\u4f4d\u4e0d\u5305\u542b1\uff0c\u5219\u6bcf\u5de6\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u4e58\u4ee52\u3002</p>"},{"location":"cs/language/c/c/#_44","title":"\u53f3\u79fb\u8fd0\u7b97\u7b26&gt;&gt;","text":"<p>\u5b9a\u4e49\uff1a\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u6b63\u6570\u5de6\u88650\uff0c\u8d1f\u6570\u5de6\u88651\uff0c\u53f3\u8fb9\u4e22\u5f03\u3002</p> <p>\u4f8b\u5982\uff1aa=a&gt;&gt;2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u53f3\u79fb2\u4f4d\uff0c\u5de6\u88650 \u6216\u8005 \u5de6\u88651\u5f97\u770b\u88ab\u79fb\u6570\u662f\u6b63\u8fd8\u662f\u8d1f\u3002</p> <p>\u64cd\u4f5c\u6570\u6bcf\u53f3\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u9664\u4ee52\u3002</p>"},{"location":"cs/language/c/c/#_45","title":"\u5e94\u7528","text":""},{"location":"cs/language/c/c/#_46","title":"\u5feb\u901f\u5e42","text":"<pre><code>int quickpower(int a,int b)\n{\nint ans=1;\nint base=a;\nwhile(b&gt;0)\n{\nif(b&amp;1)//b\u5728\u4e8c\u8fdb\u5236\u4e0b\u6700\u540e\u4e00\u4f4d\u662f\u4e0d\u662f1\n{\nans*=base;\n}\nbase*=base;\nb&gt;&gt;=1;//b\u53f3\u79fb\u4e00\u4f4d\n}\nreturn ans;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_47","title":"\u53d6\u4f59\u8fd0\u7b97","text":"\\[ (A+B)mod\\,b=(A\\,mod\\,b+B\\,mod\\,b)mod\\,b\\\\ (A\\times B)\\,mod\\,b=((A\\,mod\\,b)\\times (B\\,mod\\,b))\\,mod\\,b \\] <pre><code>while(b &gt; 0)\n{\nif(b &amp; 1)\n{\nans *= base;\nans %= m;\n}\nbase *= base;\nbase %= m;\nb &gt;&gt;= 1;\n}\n</code></pre>"},{"location":"cs/language/c/c/#1","title":"\u4f4d1\u7684\u4e2a\u6570","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff08\u4ee5\u4e8c\u8fdb\u5236\u4e32\u7684\u5f62\u5f0f\uff09\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a '1' \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a\u6c49\u660e\u91cd\u91cf\uff09</p>"},{"location":"cs/language/c/c/#_48","title":"\u6cd5\u4e00 \u76f4\u63a5\u8ba1\u7b97","text":"<pre><code>int hammingweight(int x)\n{\nint cnt=0;\nfor(int i=0;i&lt;32;i++)\n{\ncnt+=(n&gt;&gt;i)&amp;1;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_49","title":"\u6cd5\u4e8c\uff1a\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28","text":"\\[ n\\,\\&amp;\\,(n-1) \\] <p>\u7ed3\u679c\u4e3a\u5c06n\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d1\u53d8\u62100</p> <p>\u91cd\u590d\u8be5\u64cd\u4f5c\uff0c\u76f4\u5230 n \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u5168\u90e8\u6570\u4f4d\u90fd\u53d8\u6210 00\uff0c\u5219\u64cd\u4f5c\u6b21\u6570\u5373\u4e3a n\u7684\u4f4d 11 \u7684\u4e2a\u6570\u3002</p> <pre><code>int hammingweight(int x)\n{\nint cnt=0;\nwhile(x!=0)\n{\nx=x&amp;(x-1);\ncnt++;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/language/c/c/#2","title":"\u5224\u65ad\u662f\u4e0d\u662f2\u7684\u6574\u6570\u6b21\u65b9","text":"<pre><code>if(n&amp;(n-1)==0)//2\u7684\u6574\u6570\u6b21\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ea\u67091\u4e2a1\n</code></pre>"},{"location":"cs/opt/","title":"\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66\u201c\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5\u201d\u8bfe\u7a0b\u7b14\u8bb0\u4e0e\u603b\u7ed3</p>"},{"location":"cs/opt/lec1/","title":"Introduction to Optimization","text":"<p> \u7ea6 407 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"cs/opt/lec1/#general-formulation-of-the-optimization-problem","title":"General Formulation of  The Optimization Problem","text":"<p>Let \\(x\\) be an \\(n\\)-dimensional real vector: \\(x=(x^{(1)},\u2026\u2026,x^{(n)})^T \\in \\mathbb R^n\\)</p> <p>and \\(f_0(x),\u2026\u2026, f_m(x)\\) be some real-valued functions defined on a set \\(S\\in \\mathbb{R}^n\\). We consider different variants of the following general minimization problem:</p> \\[ minf_0(x)\\\\s.t. \\ f_j(x)\\leq0,\\ j=1\u2026\u2026m,\\\\x\\in S \\] <ul> <li> <p>We call \\(f_0(x)\\) the objective function of our problem</p> </li> <li> <p>The vector function \\(f( x)=(f_1(x),\u2026\u2026,f_m(x))^T\\) is called the vector of functional constraints(\u6cdb\u51fd\u7ea6\u675f).</p> </li> <li> <p>The set \\(S\\) is the basic feasible set(\u57fa\u672c\u53ef\u884c\u89e3)</p> </li> <li>The set \\(Q =\\left\\{x\\in S| f_j(x)\\le 0, j=1\u2026\u2026m\\right\\}\\) is the entire feasible set of the problem.</li> </ul> <p>There exists a natural classification of the types of minimization problems:</p> <ul> <li>constrained problems: \\(Q\\subset \\mathbb{R}^n\\)</li> <li>unconstrained problems: \\(Q \\equiv \\mathbb R^n\\)</li> <li>smooth problems: all \\(f_j(x)\\) are differentiable</li> <li>nonsmooth problems: there are several non-differentiable components \\(f_k(x)\\)  \uff08\u4f8b\u5982\u7edd\u5bf9\u503c\u51fd\u6570\uff09</li> <li>linearly constrained problems: the functional constraints are affine like:</li> </ul> \\[ f_j(x)=\\sum_{i=1}^na_j^{i}x^{(i)}+b_j\\equiv&lt;a_j,x&gt;+b_j,j=1\u2026\u2026m \\] <ul> <li>linear optimization problems: \\(f_0(\\cdot)\\) is also affine</li> <li>quadratic optimization problem: \\(f_0(\\cdot)\\) is quadratic(\u4e8c\u6b21)</li> </ul> <p>There is also a classification based on properties of the feasible set</p> <ul> <li>called feasible if \\(Q\\neq\\varnothing\\)</li> <li>called strictly feasible, if there exists an \\(x\\in int\\ Q\\)\uff08\u5185\u70b9\uff09 such that \\(f_j(x)&lt;0(or&gt;0)\\) for all inequality constraints and \\(f_j(x)=0\\) for all equality constraints(Slater condition) </li> </ul> <p>Finally, we distinguish different types of solutions to the problem:</p> <ul> <li>\\(x^*\\) is called the global optimal solution if \\(f_0(x^*)\\le f_0(x)\\) for all \\(x\\in Q\\)</li> <li>called a local optimal solution if \\(\\exists \\delta\\), for all \\(x \\in NBR(x^*,\\delta)\\cap Q\\), we have \\(f_0(x^*)\\le f_0(x)\\)</li> </ul> <p>Example:</p> <p>Let our initial problem be as follows: $$ Find\\,  x\\in \\mathbb R^n \\, such \\, that\\, f_j(x)=a_j\\,j=1\u2026\u2026m $$ Then we can consider the problem $$ \\mathop{min}\\limits_{x}\\sum_{j=1}^m(f_j(x)-a_j)^2 $$</p> <p>Sometimes our decision variables must be integers. This can be described by the following constraint: $$ sin(\\pi x^{(i)})=0 $$</p>"},{"location":"cs/opt/lec1/#interplay-of-optimization-and-machine-learning","title":"Interplay of Optimization and Machine Learning","text":""},{"location":"math/","title":"\u6570\u5b66\u57fa\u7840","text":"<p> \u7ea6 36 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u8bb0\u5f55\u5206\u6790\uff0c\u4ee3\u6570\uff0c\u6982\u7387\uff0c\u4f18\u5316\u7684\u5173\u952e\u77e5\u8bc6</p>"},{"location":"math/#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u6570\u5b66\u5206\u6790</li> <li>\u7ebf\u6027\u4ee3\u6570</li> <li>\u6982\u7387\u8bba</li> <li>\u4f18\u5316</li> </ul>"},{"location":"math/algebra/","title":"\u7ebf\u6027\u4ee3\u6570","text":"<p> \u7ea6 92 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\u4f53\u7cfb\u68b3\u7406</p> <p>\u53c2\u8003\u4e66\u76ee\uff1a\u300a\u5927\u5b66\u6570\u5b66\u2014\u2014\u4ee3\u6570\u4e0e\u51e0\u4f55\u300b         \u300aLinear Algebra Done Right\u300b</p> <p>\u672c\u9875\u7684\u6700\u540e\u662f\u6211\u7684\u7ebf\u4ee3II(H)\u671f\u672b\u68b3\u7406\u7b14\u8bb0\uff0c\u662f\u6211\u9488\u5bf9\u81ea\u5df1\u638c\u63e1\u7a0b\u5ea6\u7684\u987a\u5e8f\u6574\u7406\u7684\uff0c\u5e76\u6ca1\u6709\u6309\u7167\u77e5\u8bc6\u4f53\u7cfb\u7684\u987a\u5e8f\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> <p>\u7ebf\u6027\u4ee3\u6570\u671f\u672b\u590d\u4e60\u7b14\u8bb0</p>"},{"location":"math/analysis/","title":"\u6570\u5b66\u5206\u6790","text":"<p> \u7ea6 38 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6570\u5b66\u5206\u6790(\u9648\u7eaa\u4fee)</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300a\u6570\u5b66\u5206\u6790\uff08\u9648\u7eaa\u4fee\uff09\u7b2c\u4e09\u7248\u300b \u300a\u6570\u5b66\u5206\u6790\u4e2d\u7684\u5178\u578b\u95ee\u9898\u4e0e\u65b9\u6cd5\u300b \u88f4\u793c\u6587</p>"},{"location":"math/mdl/","title":"Mathematics for Deep Learning","text":"<p> \u7ea6 553 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Abstract</p> <p>The goal of this note is to repeat the necessary minimal math background to follow computervision lectures.</p> <p>By Prof. Dr.-Ing. Andreas Geiger,University of Tubingen</p>"},{"location":"math/mdl/#linear-algebra","title":"Linear Algebra","text":""},{"location":"math/mdl/#tensors","title":"Tensors","text":"<ul> <li>A tensor is an array with more than 2 axes(e.g.:RGB image)</li> <li>Example for tensor of shape \\(M \\times N \\times K\\): \\(A \\in \\mathbb{R}^{M\\times N\\times K}\\)</li> </ul>"},{"location":"math/mdl/#linear-dependence-and-span","title":"Linear Dependence and Span","text":"<ul> <li>We call \\(A x= \\sum_ix_i A\\) a linear combination</li> <li>\\(A x =  b\\) has solution \\(\\iff\\) \\(b\\) is in the span of columns of \\(A\\)</li> <li>This particualr span is known as column space or range</li> <li>A square matrix with any two linearly dependent columns is called singular</li> </ul>"},{"location":"math/mdl/#vectors-and-matrix-norms","title":"Vectors and Matrix Norms","text":"<ul> <li>\\(\\mathscr{l}_p\\)-norm is defined as : \\(\\Vert x\\Vert_p=(\\sum_i\\vert x_i\\vert^p)^{\\frac{1}{p}}\\)</li> <li>\\(\\Vert x \\Vert_\\infty=max_i\\vert x_i\\vert\\)</li> <li>The size of a matrix can be measured with the Frobenius norm: \\(\\Vert  A \\Vert_F=\\sqrt{\\sum_{i,j}a_{i,j}^2}\\)</li> </ul>"},{"location":"math/mdl/#eigenvalue-decomposition","title":"Eigenvalue Decomposition","text":"<ul> <li>\\(Av=\\lambda  v\\)</li> <li>We concatenate all eigenvectors to form a matrix \\(V=( v_1,\u2026, v_N)\\)</li> <li>We form all eignvalues into a diagnal matrix \\(\\Lambda = diag(\\lambda_1,\u2026\uff0c\\lambda_N)^{T}\\)</li> <li>The eigendecomposition of  \\(A\\) is given by: \\(A =  V \\Lambda  V^{-1}\\)</li> <li>Every real symmetric matrix \\(A\\) can be decomposed into \\(A =  Q \\Lambda  Q^{T}\\)</li> <li>\\(Q\\) is an orthonormal matrix composed of the eigenvectors \\({ v_i}_{i=1}^{N}\\)  of  \\(A\\)</li> </ul> <p> \\(A\\) distorts the unit circle by scaling space in direction \\(v_i\\) by \\(\\lambda_i\\)</p> <p>The EVD can be computed easily in NumPy: np.linalg.eig</p>"},{"location":"math/mdl/#singular-value-decomposition","title":"Singular Value Decomposition","text":"<ul> <li>Eigenvalue decomposition can only be app;ied to square matrices</li> <li>For non-square matrices we can use singular value decomposition</li> <li>Factorizes a matrx \\(A \\in \\mathbb{R}^{M\\times N}\\) as \\(A = U  D  V^{T}\\), where \\(U \\in \\mathbb R^{M\\times M},  D\\in \\mathbb R^{M\\times N},  V \\in \\mathbb R^{N\\times N}\\)</li> <li>The elements along the diagonal of \\(D\\) are known as singular values</li> <li>The columns of \\(U\\) and \\(V\\) are left/right-singular vectors,respectively.</li> </ul>"},{"location":"math/mdl/#relationship-between-evd-and-svd","title":"Relationship between EVD and SVD","text":"<ul> <li>The right-singular vectors are the eigenvectors of \\(A^{T} A\\)</li> <li>\\(A^{T} A =  V  D U^{T} U  DV^{T}= V  D^2 V^{T}\\)</li> <li> <p>The left-singular vectors are the egienvectors of  \\(AA^{T}\\)</p> </li> <li> <p>The eigenvalues of \\(A^{T} A\\) and \\(A A^{T}\\) are equal to the squared singular values of \\(A\\)</p> </li> </ul>"},{"location":"math/mdl/#probability","title":"Probability","text":""},{"location":"math/mdl/#terminology","title":"Terminology","text":"<ul> <li>A random variable is a variable that can take on different values randomly</li> <li>Random variables may be either discrete or continuous</li> <li>A discrete random variable has a finite or countably infinite number of states</li> <li>A continuous random vairiable is associated with a real value</li> <li>A probability distribution is a descrption of how likely a random variable or set of random variable is to take on each of its possible states</li> </ul>"},{"location":"math/mdl/#discrete-probability-distributions","title":"Discrete Probability Distributions","text":"<p>\\(p(x)\\) for \\(p(X=x)\\in [0,1]\\), \\(p(x)\\) is called the probability mass function</p> <p>\\(p(X)\\) denote the probability distribution over \\(X\\)</p> <p>If \\(X\\) follows distribution \\(p(X)\\), we also write \\(X\\sim p(X)\\)</p> <ul> <li>Joint probability: \\(p(x,y)\\) for \\(p(X=x,Y=y)\\)</li> <li>Conditional probability: \\(p(x|y)=\\frac{p(x,y)}{p(y)}\\)</li> <li>Marginal probability: \\(p(y)=\\sum_{x\\in \\mathcal{X}}p(x,y)\\)</li> </ul>"},{"location":"math/quantum/","title":"\u91cf\u5b50\u529b\u5b66","text":"<p> \u7ea6 744 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"math/quantum/#_2","title":"\u6001\u77e2\u91cf","text":"<p>\u91cf\u5b50\u529b\u5b66\u4e0e\u7ecf\u5178\u529b\u5b66\u7684\u672c\u8d28\u533a\u522b\uff1a\u63cf\u8ff0\u7269\u7406\u5bf9\u8c61\u7684\u65b9\u5f0f\u4e0d\u540c</p> <ul> <li>\u7ecf\u5178\u529b\u5b66\u63cf\u8ff0\u7269\u7406\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u4f7f\u7528\u5177\u4f53\u7684\u529b\u5b66\u91cf(\u901f\u5ea6\uff0c\u52a8\u91cf\uff0c\u80fd\u91cf\u7b49)\u3002</li> <li>\u91cf\u5b50\u529b\u5b66\u4f7f\u7528\u6001\u77e2\u91cf\u3002\u6001\u77e2\u91cf\u5b58\u5728\u4e8e\u4eba\u4e3a\u5b9a\u4e49\u7684\u62bd\u8c61\u7a7a\u95f4\u3002</li> </ul> <p>\u4ece\u4e00\u4e2a\u6001\u77e2\u91cf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u51fa\u67d0\u4e2a\u7269\u7406\u5bf9\u8c61\u6240\u6709\u7684\u7ecf\u5178\u529b\u5b66\u91cf\u4fe1\u606f\u3002</p> <p>\u672c\u5f81\u6001\uff1a \u5047\u8bbe\u6211\u4eec\u8981\u5173\u6ce8\u67d0\u4e2a\u7269\u7406\u91cf\\(F\\), \u90a3\u5b83\u53ef\u80fd\u88ab\u6211\u4eec\u89c2\u6d4b\u5230\u7684\u786e\u5b9a\u72b6\u6001\uff0c\u79f0\u4f5c\\(F\\)\u7684\u672c\u5f81\u6001\u3002</p> <p>\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7269\u7406\u91cf\u800c\u8a00\uff0c\u5b83\u7684\u4e0d\u540c\u672c\u5f81\u6001\u4e4b\u95f4\u901a\u5e38\u662f\u6b63\u4ea4\u7684\u3002</p> <p>\u4efb\u610f\u6001\u77e2\u91cf\u90fd\u53ef\u4ee5\u7531\u4e00\u7ec4\u672c\u5f81\u6001\u901a\u8fc7\u7ebf\u6027\u7ec4\u5408\u53e0\u52a0\u800c\u6210\u3002</p> <p>\u6001\u7a7a\u95f4\uff1a \u6001\u77e2\u91cf\u53ef\u4ee5\u5728\u672c\u5f81\u6001\u4e3a\u57fa\u5e95\u5f20\u6210\u7684\u62bd\u8c61\u7a7a\u95f4\u4e2d\u4efb\u610f\u53d6\u503c\uff0c\u672c\u5f81\u6001\u5f20\u6210\u7684\u62bd\u8c61\u7a7a\u95f4\u79f0\u4f5c\u6001\u7a7a\u95f4\u3002</p> <p>\u859b\u5b9a\u8c14\u7684\u732b</p> <p>\u5728\u8be5\u601d\u60f3\u5b9e\u9a8c\u4e2d\uff0c\u4e00\u4e2a\u76d2\u5b50\u91cc\u6709\u4e00\u53ea\u732b\u54aa\u548c\u4e00\u9897\u6709\u4e00\u5b9a\u51e0\u7387\u53d1\u751f\u8870\u53d8\u7684\u7c92\u5b50\u3002\u5f53\u7c92\u5b50\u53d1\u751f\u8870\u53d8\u65f6\uff0c\u732b\u54aa\u5c31\u4f1a\u6b7b\u4ea1\u3002</p> <p>\u5f53\u6211\u4eec\u4e0d\u6253\u5f00\u76d2\u5b50\u65f6\uff0c\u5bf9\u4e8e\u76d2\u5b50\u5916\u9762\u7684\u89c2\u5bdf\u8005\uff0c\u7c92\u5b50\u7684\u8870\u53d8\u72b6\u6001\u662f\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u6ce2\u51fd\u6570\uff0c\u56e0\u6b64\u732b\u5904\u4e8e\u65e2\u751f\u53c8\u6b7b\u7684\u53e0\u52a0\u6001\u3002</p> <p>\u5bf9\u4e8e\u6570\u5b66\u63cf\u8ff0\uff0c\u6211\u4eec\u4f7f\u7528\u72c4\u62c9\u514b\u7b26\u53f7\u3002</p> <p>\\(|{\\psi}\\rangle=a_1|{L}\\rangle+a_2|{D}\\rangle\\)</p> <p>\u4e00\u65e6\u6211\u4eec\u6253\u5f00\u76d2\u5b50\u89c2\u6d4b\u91cc\u9762\u7684\u60c5\u51b5\u65f6\uff0c\u732b\u5c31\u4e0d\u4f1a\u518d\u5904\u4e8e\u53e0\u52a0\u6001\uff0c\u800c\u662f\u4f1a\u51fa\u73b0\u4e00\u4e2a\u786e\u5207\u7684\u7ed3\u679c\uff1a\u8981\u4e48\u751f\u3001\u8981\u4e48\u6b7b\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c\u574d\u7f29\uff0c\u732b\u7684\u53e0\u52a0\u6001\u5728\u89c2\u6d4b\u540e\uff0c\u4f1a\u968f\u673a\u574d\u7f29\u5230\u67d0\u4e2a\u786e\u5b9a\u7684\u672c\u5f81\u6001\u3002</p> <p>\u65e2\u7136\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u6253\u5f00\u76d2\u5b50\u65f6\uff0c\u53d1\u73b0\u6d3b\u732b\u548c\u53d1\u73b0\u6b7b\u732b\uff0c\u4e24\u4e2a\u7ed3\u679c\u5c31\u4f1a\u5404\u5bf9\u5e94\u4e00\u4e2a\u6982\u7387\u3002\u800c\u5176\u4e2d\\(|{\\psi}\\rangle=a_1|{L}\\rangle+a_2|{D}\\rangle\\)\u7684\u4e24\u4e2a\u7cfb\u6570\u51b3\u5b9a\u4e86\u6982\u7387\uff0c\u4e5f\u5c31\u662f\u6d4b\u91cf\u7ed3\u679c\u574d\u7f29\u5230\u4e24\u4e2a\u672c\u5f81\u6001\u7684\u6982\u7387\u3002</p> <p>\\(P(|{L}\\rangle)=a_1^2,P(|{D}\\rangle)=a_2^2\\) \u5e76\u4e14\u6ee1\u8db3\\(a_1^2+a_2^2=1\\)</p> <p>\u901a\u8fc7\u7ebf\u6027\u4ee3\u6570\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u732b\u751f\u548c\u732b\u6b7b\u7684\u603b\u6982\u7387\u5199\u4f5c\u6001\u77e2\u91cf\\({\\psi}\\)\u4e0e\u81ea\u8eab\u7684\u5185\u79ef\u3002\u800c\u5185\u79ef\u603b\u662f\u4e3a1\uff0c\u6545\u4e5f\u79f0\u4f5c\u5f52\u4e00\u5316\u6761\u4ef6\u3002</p> <p>\u6211\u4eec\u628a\u6001\u77e2\u91cf\u548c\u81ea\u8eab\u7684\u5185\u79ef\u8bb0\u4f5c \\(\\langle\\psi|\\psi\\rangle\\)</p> <p>\u5728\\(a_1,a_2\\)\u90fd\u662f\u5b9e\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5de6\u77e2\u5bf9\u5e94\u884c\u5411\u91cf\uff0c\u53f3\u77e2\u5bf9\u5e94\u5217\u5411\u91cf\u3002\u8ba8\u8bba\u6001\u77e2\u91cf\u66f4\u591a\u7528\u53f3\u77e2\u63cf\u8ff0\u3002</p> <p>\u91cf\u5b50\u529b\u5b66\u4e2d\u53e0\u52a0\u6001\u7684\u5404\u4e2a\u7cfb\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u590d\u6570\u3002\u56e0\u6b64\u8981\u6ce8\u610f\u53d6\u590d\u5171\u8f6d\u3002</p>"},{"location":"math/quantum/#_3","title":"\u4e0d\u786e\u5b9a\u6027\u539f\u7406","text":"<p>\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u6d4b\u91cf\u540c\u65f6\u786e\u5b9a\u4e24\u4e2a\u4e0d\u5bf9\u6613\u7684\u7269\u7406\u91cf(\u6bd4\u5982\u4f4d\u7f6e\u548c\u52a8\u91cf)\uff0c\u56e0\u4e3a\u5bf9\u5176\u4e2d\u4e00\u4e2a\u7684\u6d4b\u91cf\u884c\u4e3a\u4f1a\u5e72\u6270\u88ab\u6d4b\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u5bfc\u81f4\u53e6\u4e00\u4e2a\u7269\u7406\u91cf\u65e0\u6cd5\u786e\u5b9a\u3002</p>"},{"location":"math/probability/note14/","title":"Conditional Probability, Independence, and Combinations of Events","text":"<p> \u7ea6 824 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"math/probability/note14/#conditional-probability","title":"Conditional Probability","text":"<p>For events \\(A,B \\in \\Omega\\) in the same probability space such that \\(P[B]&gt;0\\) the conditional probability of \\(A\\) given \\(B\\) is: $$ P[A|B]=\\frac{P[A\\cap B]}{P[B]} $$</p>"},{"location":"math/probability/note14/#bayesian-inference","title":"Bayesian Inference","text":"<ul> <li>Conditional probability is at the heart of a subject called Bayesian inference.</li> <li>Bayesian inference is a way to update knowledge after making an observation.</li> </ul> <p>Example: we may have an estimate of the probability of a given event \\(A\\). After event \\(B\\) occurs, we can update this estimate to \\(P[A|B]\\). In this interpretation, \\(P[A]\\) can be thought of as a \\(prior\\) probability: our assignment of the likelihood of an event of interest, \\(A\\), before making an observation. \\(P[A|B]\\) can be interpreted as the posterior probability of \\(A\\) after observation.</p> <p>We are given \\(P[A]\\), which is the probability that the event of interest happens. We are given \\(P[B|A], P[B|\\overline{A}]\\), which quantify how noisy the observation is. Now we want to calculate \\(P[A|B]\\),  the probability that the event of interest happens given we made the observation. We can proceed as follows:</p> \\[ P[A|B]=\\frac{P[A\\cap B]}{P[B]}=\\frac{P[B|A]P[A]}{P[B]} \\] \\[ P[B]=P[A\\cap B]+P[\\overline{A}\\cap B]=P[B|A]P[A]+P[B|\\overline{A}]P[\\overline{A}]  \\] \\[ So\\, P[A|B]=\\frac{P[B|A]P[A]}{P[B|A]P[A]+P[B|\\overline{A}]P[\\overline{A}]} \\]"},{"location":"math/probability/note14/#bayess-rules-and-total-probability-rule","title":"Bayes's Rules and Total Probability Rule","text":"<ul> <li>Bayes's Rule is useful when one wants to calculate \\(P[A|B]\\) but is given \\(P[B|A]\\) instead.</li> <li>Total Probability Rule is an application of the strategy of dividing into cases. If \\(A\\) happens, the probability that \\(B\\) happens is \\(P[B|A]\\), if \\(A\\) does not happen, the probability that \\(B\\) happens is \\(P[B|\\overline{A}]\\)</li> </ul>"},{"location":"math/probability/note14/#generalization","title":"Generalization","text":"<p>We say that an event \\(A\\) is partitioned into \\(n\\) events \\(A_1,\\cdots, A_n\\) if </p> <ul> <li>\\(A=A_1\\cup \\cdots \\cup A_n\\) and</li> <li>\\(A_i\\cap A_j=\\varnothing\\) for all \\(i \\neq j\\)</li> </ul> <p>In other words, each outcome in \\(A\\) belongs to exactly one of the events \\(A_1,\\cdots, A_n\\)</p> <p>Now let \\(A_1,\\cdots,A_n\\) be a partition of the sample space \\(\\Omega\\). Then, the Total Probability Rule for any event \\(B\\) is </p> \\[ P[B]=\\sum_i^nP[B\\cap A_i]=\\sum_i^nP[B|A_i]P[A_i] \\] <p>while Bayes' Rule , assuming \\(P[B]\\neq 0\\) is given by:</p> \\[ P[A_i|B]=\\frac{P[B|A_i]P[A_i]}{P[B]}=\\frac{P[B|A_i]P[A_i]}{\\sum_{j=1}^nP[B|A_j]P[A_j]} \\]"},{"location":"math/probability/note14/#combinational-of-events","title":"Combinational of Events","text":""},{"location":"math/probability/note14/#independent-events","title":"Independent Events","text":""},{"location":"math/probability/note14/#independence","title":"Independence","text":"<p>Two events \\(A,B\\) in the same probability space are said to be independent if \\(P[A\\cap B]=P[A]\\times P[B]\\)</p> <p>The intuition behind this definition is the following:</p> <p>$$ P[A|B]=\\frac{P[A\\cap B]}{P[B]}=\\frac{P[A]\\times P[B]}{P[B]}=P[A] $$ Thus independence has the natural meaning that \"the probability of \\(A\\) is not affected by whether or not \\(B\\) occurs\".</p>"},{"location":"math/probability/note14/#mutual-independence","title":"Mutual independence","text":"<p>Events \\(A_1,\\cdots,A_n\\) are said to be mutually independent if for every subset \\(I\\subset \\left\\{ 1,\\cdots,n \\right\\} \\ with\\ size\\ \\vert I\\vert\\ge 2\\),</p> <p>$$ P[\\cap_{i\\in I}A_i]=\\mathop{\\Pi}_{i\\in I}P[A_i] $$ For mutually independent events \\(A_1,\\cdots,A_n\\), it is not hard to check from the definition of conditional probability that, for any \\(1\\le i\\le n\\) and any subset \\(I\\subset \\left\\{1,\\cdots,n\\right\\}\\setminus \\left\\{i\\right\\}\\), we have:</p> \\[ P[A_i|\\cap_{j\\in I}A_j]=P[A_j] \\] <p>Note</p> <p>The independence of every pair of events(so-called pairwise independence) does not necessarily imply mutual independence</p>"},{"location":"math/probability/note14/#intersections-of-events","title":"Intersections of Events","text":"<p>Product Rule</p> <p>For any events \\(A,B\\), we have $$ P[A\\cap B]=P[A]P[B|A] $$</p> <p>More generally, for any events \\(A_1,\\cdots,A_n\\),</p> \\[ P[\\cap_{i=1}^nA_i]=P[A_1]\\times P[A_2|A_1]\\times P[A_3|A_1\\cap A_2]\\times \\cdots \\times P[A_n|\\cap_{i=1}^{n-1}A_i] \\]"},{"location":"math/probability/note14/#unions-of-events","title":"Unions of Events","text":"<p>Inclusion-Exclusion</p> <p>Let \\(A_1,\\cdots,A_n\\) be events in some probability space, where \\(n\\ge 2\\). Then, we have $$ P[A_1\\cup \\cdots \\cup A_n]=\\sum_{i=1}^nP[A_i]-\\sum_{i&lt;j}P[A_i\\cap A_j]+\\sum_{i&lt;j&lt;k}P[A_i\\cap A_j\\cap A_k]-\\cdots +(-1)^{n-1}P[A_1\\cap A_2\\cap \\cdots \\cap A_n] $$</p> <ul> <li> <p>Mutually exclusive events: (\\(A_i\\cap A_j=\\varnothing\\)): \\(P[\\cup_{i=1}^nA_i]=\\sum_{i=1}^nP[A_i]\\)</p> </li> <li> <p>Union bound: \\(P[\\cup_{i=1}^n]\\le \\sum_{i=1}^nP[A_i]\\)</p> </li> </ul> <p>This merely says that adding up the \\(P[A_i]\\) can only overestimate the probability of the union</p>"},{"location":"math/probability/note15/","title":"Random Variables: Distribution and Expectation","text":"<p> \u7ea6 545 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"math/probability/note15/#random-variables","title":"Random Variables","text":"<p>A random variable \\(X\\) on a sample space \\(\\Omega\\) is a function \\(X: \\Omega\\rightarrow R\\) that assigns to each point \\(\\omega\\in \\Omega\\) a real number \\(X(\\omega)\\)</p> <p>Note</p> <p>the term \u201crandom variable\u201d is really something of a misnomer: it is a function so there is nothing random about it and it is definitely not a variable!</p> <p></p>"},{"location":"math/probability/note15/#probability-distribution","title":"Probability Distribution","text":"<p>When we introduced the basic probability space we defined two things:</p> <ul> <li>The sample space \\(\\Omega\\) consisting of all the possible outcomes(sample points) of the experiment.</li> <li>The probability of each of the sample points</li> </ul> <p>Analogously, there are two important things about any random variable\"</p> <ul> <li>The set of values that it can take</li> <li>The probability with which it takes on the values.</li> </ul> <p>Since a random variable is defined on a probability space, we can calculate these probabilities given the probabilities of the sample points.</p> <p>Let \\(a\\) be any number in the range of a random variable \\(X\\). Then the set </p> <p>\\(\\left\\{ \\omega\\in\\Omega:X(\\omega)=a\\right\\}\\) is an event in the sample space, abbreviated by \\(X=a\\).</p> <p></p> <p>Distribution:</p> <p>The distribution of a discrete random variable \\(X\\) is the collection of values \\(\\left\\{ (a,P[X=a]):a\\in \\mathscr{A}\\right\\}\\), where \\(\\mathscr{A}\\) is the set of all possible values taken by \\(X\\).</p> <p>Note that the collection of events \\(X=a\\) satisfy two important properties:</p> <ul> <li>Any two events \\(X=a_1,X=a_2\\) with \\(a_1 \\ne a_2\\) are disjoint.</li> <li>The union of all these events is equal to the entire sample space \\(\\Omega\\)</li> </ul> <p>Thus the collection of events form a partition of the sample space.</p> <p></p> <p></p>"},{"location":"math/probability/note15/#bernouli-distribution","title":"Bernouli Distribution","text":"<p>a random variable which takes value in {0,1}: $$ P[X=i]=\\begin{cases}p&amp;i=1\\ 1-p&amp;i=0\\end{cases} $$</p>"},{"location":"math/probability/note15/#binomial-distribution","title":"Binomial Distribution","text":"\\[ P[X=i]=\\begin{pmatrix}n\\\\i\\end{pmatrix}p^i(1-p)^{n-i} \\]"},{"location":"math/probability/note15/#hypergeometric-distribution","title":"Hypergeometric Distribution","text":"\\[ P[Y=k]=\\frac{\\begin{pmatrix}B\\\\k \\end{pmatrix}\\begin{pmatrix}N-B\\\\n-k\\end{pmatrix}}{\\begin{pmatrix}N\\\\n\\end{pmatrix}} \\] <p>Note</p> <p>\u4e8c\u9879\u5206\u5e03\u6709\u653e\u56de\uff0c\u8d85\u51e0\u4f55\u5206\u5e03\u65e0\u653e\u56de</p>"},{"location":"math/probability/note15/#multiple-random-variables-and-independence","title":"Multiple Random Variables and Independence","text":"<p>The joint distribution for two discrete random variable \\(X,Y\\) is the collection of values \\(\\left\\{((a,b),P[X=a,Y=b]):a\\in \\mathscr{A},b\\in \\mathscr{B}\\right\\}\\), where \\(\\mathscr{A}\\) is the set of all possible values taken by \\(X\\) and \\(\\mathscr{B}\\) is the set of all possible values taken by \\(Y\\).</p> <p>When given a joint distribution for \\(X\\) and \\(Y\\), the distribution \\(P[X=a]\\) for \\(X\\) is called the marginal distribution for \\(X\\), and can be found by summing over the values of \\(Y\\), That is:</p> \\[ P[X=a]=\\sum_{b\\in \\mathscr{B}}P[X=a,Y=b] \\] <p>Independence</p> \\[ P[X=a,Y=b]=P[X=a]P[Y=b] \\]"},{"location":"math/probability/note15/#expectation","title":"Expectation","text":"<p>The expectation of a discrete random varaible \\(X\\) is defined as $$ E[X]=\\sum_{a\\in \\mathscr{A}}a\\times P[X=a] $$ where the sum is over all possible values taken by the r.v.</p>"},{"location":"math/probability/note15/#linearity-of-expectation","title":"Linearity of Expectation","text":"<p>For any two random variables \\(X\\) and \\(Y\\) on the same probability space, we have $$ E[X+Y]=E[X]+E[Y] $$ Also, for any constant \\(c\\), we have $$ E[cX]=cE[X] $$</p> <p>Note</p> <p>It is only sums and differences and constant multiples of random variables that behave so nicely.</p>"},{"location":"math/probability/note16/","title":"Variance and Total Expectation","text":"<p> \u7ea6 407 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"math/probability/note16/#random-variables-variance-and-covariance","title":"Random Variables: Variance and Covariance","text":""},{"location":"math/probability/note16/#variance","title":"Variance","text":"<p>For a r.v. \\(X\\) with expectation \\(E[X]=\\mu\\), the variance of \\(X\\) is defined to be: $$ Var(X)=E[(X-\\mu)^2] $$ The square root \\(\\sigma(X)=\\sqrt{Var(X)}\\) is called the standard deviation of \\(X\\).</p> <ul> <li>The point of taking the square root of variance is to put the standard deviation \u201con the same scale\u201d as the r.v. itself.</li> </ul> <p>Theorem: For a r.v. \\(X\\) with expectation \\(E[X]=\\mu\\), we have \\(Var(X)=E[X^2]-{\\mu}^2\\)</p> <p>Property: For any random variable \\(X\\) and constant \\(c\\), we have \\(Var(cX)=c^2Var(X)\\)</p>"},{"location":"math/probability/note16/#sum-of-independent-random-variable","title":"Sum of  Independent Random Variable","text":"<p>Theorm: For independent variables \\(X,Y\\), we have \\(E[XY]=E[X]E[Y]\\).</p> <p>Theorem: For independent random variables \\(X,Y\\), we have $$ Var(X+Y)=Var(X)+Var(Y) $$</p> <p>It is very important to remember that neither of the above two results is true in general when X,Y are not independent</p>"},{"location":"math/probability/note16/#covariance-and-correlation","title":"Covariance and Correlation","text":"<p>Covariance: The covariance of random variables \\(X\\) and \\(Y\\), denoted \\(Cov(X,Y)\\) is defned as $$ Cov(X,Y)=E[(X-\\mu_x)(Y-\\mu_Y)]=E[XY]-E[X]E[Y] $$</p> <ul> <li> <p>If \\(X,Y\\) are independent, then \\(Cov(X,Y)=0\\). However, the converse is not true</p> </li> <li> <p>\\(Cov(X,X)=Var(X)\\)</p> </li> <li> <p>Covariance is bilinear: for any collection of random variables\\(\\left\\{X_1,\\cdots,X_n\\right\\},\\left\\{Y_1,\\cdots,Y_n\\right\\}\\) and fixed constants\\(\\left\\{a_1,\\cdots,a_n\\right\\},\\left\\{b_1,\\cdots,b_n\\right\\}\\),   $$   Cov(\\sum_{i=1}^na_iX_i,\\sum_{j=1}^mb_jY_j)=\\sum_{i=1}^n\\sum_{j=1}^ma_ib_jCov(X_i,Y_j)   $$</p> </li> <li> <p>For general random variables \\(X\\) and \\(Y\\): </p> </li> </ul> \\[ Var(X+Y)=Var(X)+Var(Y)+2Cov(X,Y) \\] <p></p> <p>While the sign of \\(Cov(X,Y)\\) is informative of how \\(X\\) and \\(Y\\) are associated, its magnitude is difficult to interpret. A statistic that is easier to interpret is correlation:</p> <p>Correlation: Suppose \\(X\\) and \\(Y\\) are random variables with \\(\\sigma(X)&gt;0\\) and \\(\\sigma(Y)&gt;0\\). Then, the correlation of \\(X\\) and \\(Y\\) is defined as $$ Corr(X,Y)=\\frac{Cov(X,Y)}{\\sigma(X)\\sigma(Y)} $$ Correlation is more useful than covariance because the former always ranges between \u22121 and +1, as the following theorem shows:</p> <p>For any pair of random variable \\(X\\) and \\(Y\\) with \\(\\sigma(X)&gt;0\\) and \\(sigma(Y)&gt;0\\), $$ -1\\le Corr(X,Y)\\le1 $$</p>"},{"location":"paper_reading/Neuralangelo/","title":"Neuralangelo: High-Fidelity Neural Surface Reconstruction","text":"<p> \u7ea6 881 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"paper_reading/Neuralangelo/#abstract","title":"Abstract","text":"<p>\u4eceNeRF\u5f00\u59cb\uff0c\u57fa\u4e8e\u795e\u7ecf\u8868\u793a\u7684\u7a20\u5bc6\u4e09\u7ef4\u91cd\u5efa\u6380\u8d77\u4e00\u80a1\u70ed\u6f6e\uff0c\u4f46\u662f\u73b0\u6709\u7684\u65b9\u6cd5\u5728\u6062\u590d\u771f\u5b9e\u4e16\u754c\u573a\u666f\u7684\u7ec6\u8282\u4e0a\u8868\u73b0\u4e0d\u597d\u3002Neualangelo\u662f\u4e00\u79cd\u65b0\u76843D\u8868\u9762\u91cd\u5efa\u65b9\u6cd5\uff0c\u65e0\u9700\u4f9d\u8d56\u6df1\u5ea6\u4fe1\u606f\uff0c\u4ec5\u901a\u8fc7RGB\u56fe\u50cf\u5373\u53ef\u5b9e\u73b0\u9ad8\u4fdd\u771f\u76843D\u573a\u666f\u91cd\u5efa\u3002\u5b83\u5c06\u591a\u5206\u8fa8\u73873D\u54c8\u5e0c\u7f51\u683c\u7684\u8868\u793a\u80fd\u529b\u548c\u795e\u7ecf\u8868\u9762\u6e32\u67d3SDF\u76f8\u7ed3\u5408\u3002\u8bba\u6587\u4e2d\u4f7f\u5f97\u8fd9\u79cd\u65b9\u6cd5\u5f97\u4ee5\u5b9e\u65bd\u7684\u4e24\u4e2a\u5173\u952e\u56e0\u7d20\uff1a</p> <ul> <li>numerical gradients for computing higher-order derivatives as a smoothing operation.</li> <li>coarse-to-fine optimization on the hash grids controlling different levels of details.</li> </ul>"},{"location":"paper_reading/Neuralangelo/#method","title":"Method","text":""},{"location":"paper_reading/Neuralangelo/#multi-resolution-hash-encoding","title":"\u591a\u5206\u8fa8\u7387\u54c8\u5e0c\u7f16\u7801(Multi-resolution hash encoding)","text":"<p>\u4e00\u79cd\u9ad8\u6548\u7684\u7a7a\u95f4\u8868\u793a\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e0d\u540c\u5206\u8fa8\u7387\u7684\u7f51\u683c\u6765\u7f16\u7801\u4e09\u7ef4\u70b9\u7684\u7a7a\u95f4\u4fe1\u606f\u3002</p>"},{"location":"paper_reading/Neuralangelo/#pipeline","title":"Pipeline","text":"<ul> <li>\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u8bbe\u7f6e\u591a\u4e2a\u5206\u8fa8\u7387\u7684\u7f51\u683c\u7cfb\u7edf(\u5373\u591a\u5206\u8fa8\u7387\u56fe\u50cf\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6211\u4eec\u5212\u5206\u7684\u5c0f\u7acb\u65b9\u4f53\u5757\u7684\u6570\u91cf)\u3002\u6700\u7c97\u7cd9\u7684\u7f51\u683c\u63d0\u4f9b\u4e86\u6700\u5927\u7684\u7a7a\u95f4\u6982\u89c8\uff0c\u6700\u8be6\u7ec6\u7684\u7f51\u683c\u6709\u52a9\u4e8e\u6355\u6349\u7269\u4f53\u8868\u9762\u7684\u7ec6\u8282\u3002</li> <li>\u54c8\u5e0c\u6620\u5c04\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u4f4d\u7f6e\uff0c\u6211\u4eec\u627e\u5230\u5176\u5728\u6bcf\u4e2a\u7f51\u683c\u5206\u8fa8\u7387\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u7f51\u683c\u5355\u5143\u7684\u89d2\u70b9\u90fd\u88ab\u6620\u5c04\u5230\u4e00\u4e2a\u54c8\u5e0c\u6761\u76ee\u4e2d\uff0c\u8fd9\u5176\u4e2d\u5b58\u50a8\u7740\u7f16\u7801\u7684\u7279\u5f81\u5411\u91cf\u3002\u6211\u4eec\u4f7f\u7528\u4e09\u7ebf\u6027\u63d2\u503c\u5f97\u5230\u8be5\u8f93\u5165\u70b9\u5728\u7279\u5b9a\u5206\u8fa8\u7387\u4e0b\u7684\u7279\u5f81\u5411\u91cf\u3002</li> <li>\u6211\u4eec\u5c06\u6240\u6709\u5206\u8fa8\u7387\u4e0b\u7684\u7279\u5f81\u5411\u91cf\u901a\u8fc7\u52a0\u6743\u5f97\u5230\u6574\u5408\u5f62\u6210\u7684\u7279\u5f81\u5411\u91cf\uff0c\u4f5c\u4e3aMLP\u7684\u8f93\u5165\uff0c\u8fd9\u4e9b\u6743\u91cd\u7531\u7f51\u7edc\u5b66\u4e60\u5f97\u5230\u3002</li> </ul>"},{"location":"paper_reading/Neuralangelo/#numerical-gradient-computation","title":"Numerical Gradient Computation","text":"<p>\u5728NeuS\u7684\u6587\u7ae0\u91cc\u6211\u4eec\u77e5\u9053\uff0cSDF\u68af\u5ea6\u573a\u7684\u8303\u6570\u4e3a1\uff0c\u6211\u4eec\u4e5f\u5229\u7528\u8fd9\u4e00\u6027\u8d28\u8fdb\u884c\u4f18\u5316\uff1a $$ L_{eik}=\\frac{1}{N}\\sum_{i=1}^{N}(\\Vert\\nabla f(x_i)\\Vert_2-1)^2 $$ \u4f46\u662f\u5bf9\u4e8e\u54c8\u5e0c\u7f51\u683c\u6765\u8bf4\uff0c\u7531\u4e8e\\(x_i\\)\u8de8\u8d8a\u7f51\u683c\u5355\u5143\u8fb9\u754c\u65f6\uff0c\u54c8\u5e0c\u6761\u76ee\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u54c8\u5e0c\u7f16\u7801\u7684\u5bfc\u6570\u5e76\u4e0d\u662f\u5168\u5c40\u8fde\u7eed\u7684\uff0c\u4ec5\u5728\u5c40\u90e8\u7684voxel\u91cc\u8fde\u7eed\u3002</p> <p>\u56e0\u6b64\u5728\u6587\u7ae0\u4e2d\u5c06\u5206\u6790\u68af\u5ea6\u6539\u4e3a\u6570\u503c\u68af\u5ea6\uff0c\u5982\u679c\u6570\u503c\u68af\u5ea6\u7684\u6b65\u957f\\(\\epsilon\\)\u5c0f\u4e8e\u54c8\u5e0c\u7f16\u7801\u7684\u7f51\u683c\u5927\u5c0f\uff0c\u5219\u6570\u503c\u68af\u5ea6\u7b49\u4e8e\u5206\u6790\u68af\u5ea6\uff1b\u5426\u5219\uff0c\u6211\u4eec\u91c7\u7528\u591a\u4e2a\u7f51\u683c\u5355\u5143\u7684\u54c8\u5e0c\u6761\u76ee\u53c2\u4e0eSDF\u68af\u5ea6\u7684\u8ba1\u7b97\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u8868\u9762\u6cd5\u7ebf\u53cd\u5411\u4f20\u64ad\u5141\u8bb8\u591a\u4e2a\u7f51\u683c\u7684\u54c8\u5e0c\u6761\u76ee\u540c\u65f6\u63a5\u6536\u4f18\u5316\u66f4\u65b0\u3002</p> <p></p>"},{"location":"paper_reading/Neuralangelo/#progressive-levels-of-details","title":"Progressive Levels of Details","text":"<ul> <li>\u6b65\u957f</li> </ul> <p>\u5728\u6570\u503c\u68af\u5ea6\u4e2d\u8f83\u5927\u7684\u6b65\u957f\u53ef\u4ee5\u786e\u4fddSDF\u6cd5\u7ebf\u5728\u66f4\u5927\u8303\u56f4\u5185\u4fdd\u6301\u4e00\u81f4\uff0c\u5bf9\u5e94\u7684\u662f\u6574\u4f53\u7684\u8f6e\u5ed3\uff1b\u8f83\u5c0f\u7684\u6b65\u957f\u907f\u514d\u5e73\u6ed1\u7ec6\u8282\uff0c\u6709\u52a9\u4e8e\u9ad8\u4fdd\u771f\u8868\u9762\u7684\u751f\u6210\u3002\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u6b65\u957f\u521d\u59cb\u5316\u4e3a\u6700\u7c97\u7684\u54c8\u5e0c\u7f51\u683c\u5927\u5c0f\uff0c\u5728\u4f18\u5316\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u51cf\u5c0f\u3002</p> <ul> <li>\u54c8\u5e0c\u7f51\u683c\u5206\u8fa8\u7387</li> </ul> <p>\u5728\u4f18\u5316\u5f00\u59cb\u65f6\uff0c\u7b97\u6cd5\u5e76\u4e0d\u4e00\u5f00\u59cb\u5c31\u6fc0\u6d3b\u6240\u6709\u7684\u54c8\u5e0c\u7f51\u683c\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u542f\u7528\u4e00\u5957\u521d\u59cb\u7684\u7c97\u7cd9\u54c8\u5e0c\u7f51\u683c\u3002\u8fd9\u6837\u505a\u4e3b\u8981\u662f\u56e0\u4e3a\u5982\u679c\u4e00\u5f00\u59cb\u5c31\u6fc0\u6d3b\u4e86\u6240\u6709\u7684\u7f51\u683c\uff0c\u90a3\u4e48\u5728\u8981\u6355\u83b7\u51e0\u4f55\u7ec6\u8282\u65f6\uff0c\u7ec6\u54c8\u5e0c\u7f51\u683c\u9996\u5148\u5fc5\u987b\u8981\u4ece\u4f7f\u7528\u5927\u6b65\u957f\u03f5\u7684\u7c97\u7565\u4f18\u5316\u4e2d\u201c\u9057\u5fd8\u201d\uff0c\u7136\u540e\u7528\u66f4\u5c0f\u7684\u03f5\u91cd\u65b0\u5b66\u4e60\u3002\u5728\u6574\u4e2a\u4f18\u5316\u8fc7\u7a0b\u4e2d\u5f53\u6b65\u957f\u03f5\u51cf\u5c0f\u5230\u54c8\u5e0c\u7f51\u683c\u7684\u7a7a\u95f4\u5927\u5c0f\u65f6\uff0c\u9010\u6b65\u6fc0\u6d3b\u66f4\u7ec6\u7684\u54c8\u5e0c\u7f51\u683c\u3002</p>"}]}