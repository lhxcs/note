{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to  Iridescent's notebook!","text":"<p> \u7ea6 101 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u672c\u7ad9\u662f\u6211\u57fa\u4e8emkdocs\u642d\u5efa\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6211\u5728\u672c\u79d1\u671f\u95f4\u5b66\u4e60\u7684\u7b14\u8bb0\u4e0e\u603b\u7ed3\u3002</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Computer Science<ul> <li>\u7f16\u7a0b\u8bed\u8a00</li> <li>\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840</li> <li>\u6570\u636e\u7ed3\u6784\u57fa\u7840</li> <li>\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840</li> <li>\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5</li> </ul> </li> <li>AI<ul> <li>Stanford:cs231n</li> <li>ZJU:icv</li> </ul> </li> <li>\u6570\u5b66\u57fa\u7840</li> </ul> <p>\u65bd\u5de5\u4e2d</p> <p>\u7edd\u5927\u90e8\u5206note\u90fd\u672a\u5b8c\u6210</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u8bb0\u5f55","text":"<p> \u7ea6 6 \u4e2a\u5b57 </p>"},{"location":"changelog/#2023","title":"2023","text":"2023-10-22\u00b6 <p> CS &gt; \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 &gt; lec2</p>"},{"location":"AI/cv/cs231n/","title":"CS231n","text":"<p> \u7ea6 61 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5927\u4e00\u6691\u5047\u81ea\u5b66 Stanford cs231n:Deep Learning for Computer Vision\u7684\u7b14\u8bb0</p> <p>Course website:http://cs231n.stanford.edu/</p> <p>Vedios:https://www.bilibili.com/video/BV1nJ411z7fe</p> <p>B\u7ad9\u4e0a\u8bfe\u7a0b\u89c6\u9891\u662f2017\u7248\u672c\u7684\uff0c\u4f46\u662f\u5927\u81f4\u5185\u5bb9\u548cSpring 2023\u662f\u4e00\u81f4\u7684\uff0c\u53ef\u4ee5\u7ed3\u5408Stanford\u7684note\u548cslides\u5b66\u4e60</p>"},{"location":"AI/cv/cs231n/lec2/","title":"Lecture 2: Image Classification with Linear Classifiers","text":"<p> \u7ea6 2216 \u4e2a\u5b57  33 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec2/#image-classification","title":"Image Classification","text":"<p>This is one of the core problems in Computer Vision that, despite its simplicity, has a large variety of practical applications. Moreover, many other seemingly distinct Computer Vision tasks (such as object detection, segmentation) can be reduced to image classification.</p> <p></p> <p>The task in Image Classification is to predict a single label(or a distribution over labels as shown here to indicate our confidence) for a given image. </p> <p>Images are 3-dimensional arrays of integers from 0 to 255, of size Width x Height x 3. The 3 represents the three color channels Red, Green, Blue.</p>"},{"location":"AI/cv/cs231n/lec2/#challenges","title":"Challenges","text":"<ul> <li>Viewpoint cariation. A single instance of an object can be oriented in many ways with respect to the camera.</li> <li>Scale variation. Visual classes often exhibit variation in their size (size in the real world, not only in terms of their extent in the image).</li> <li>Deformation. Many objects of interest are not rigid bodies and can be deformed in extreme ways.</li> <li>Occlusion. The objects of interest can be occluded. Sometimes only a small portion of an object (as little as few pixels) could be visible.</li> <li>Illumination conditions. </li> <li>Background clutter. The objects of interest may blend into their environment, making them hard to identify</li> <li>Intra-class variation. The classes of interest can often be relatively broad, such as chair. There are many different types of these objects, each with their own appearance.</li> </ul> <p>A good image classification model must be invariant to the cross product of all these variations, while simultaneously retaining sensitivity to the inter-class variations.</p>"},{"location":"AI/cv/cs231n/lec2/#data-driven-approach","title":"Data-driven approach","text":"<p>Instead of trying to specify what every one of the categories of interest look like directly in code, we\u2019re going to provide the computer with many examples of each class and then develop learning algorithms that look at these examples and learn about the visual appearance of each class.</p>"},{"location":"AI/cv/cs231n/lec2/#the-image-classification-pipeline","title":"The image classification pipeline","text":"<ul> <li>Input: consists of a set of \\(N\\) images, each labeled with one of \\(K\\) different classes.(training set)</li> <li>Learning: training a classifier</li> <li>Evaluation: by asking it to predict labels for a new set of images that it has never seen before.</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#nearest-neighbour-classifier","title":"Nearest Neighbour Classifier","text":"<p>example image dataset: CIFAR-10: consists of 60,000 tiny images that are 32 pixels high and wide. Each image is labeled with one of 10 classes (for example \u201cairplane, automobile, bird, etc\u201d). These 60,000 images are partitioned into a training set of 50,000 images and a test set of 10,000 images</p> <p></p> <p>The nearest neighbour classifier will take a test image, compare it to every single one of the training image,  and predict the label of the closest training image.</p>"},{"location":"AI/cv/cs231n/lec2/#l1-distance","title":"L1 distance","text":"<ul> <li>compare the images pixel by pixel and add up all the differences.</li> <li>\\(d_1(I_1,I_2)=\\sum_p \\vert I_1^p-I_2^p\\vert\\)</li> </ul> <pre><code>import numpy as np\nclass NearestNeighbor(object):\ndef __init__(self):\npass\ndef train(self, X, y):\n\"\"\" X is N x D where each row is an example. Y is 1-dimension of size N \"\"\"\n# the nearest neighbor classifier simply remembers all the training data\nself.Xtr = X\nself.ytr = y\ndef predict(self, X):\n\"\"\" X is N x D where each row is an example we wish to predict label for \"\"\"\nnum_test = X.shape[0]\n# lets make sure that the output type matches the input type\nYpred = np.zeros(num_test, dtype = self.ytr.dtype)\n# loop over all test rows\nfor i in range(num_test):\n# find the nearest training image to the i'th test image\n# using the L1 distance (sum of absolute value differences)\ndistances = np.sum(np.abs(self.Xtr - X[i,:]), axis = 1)\nmin_index = np.argmin(distances) # get the index with smallest distance\nYpred[i] = self.ytr[min_index] # predict the label of the nearest example\nreturn Ypred\n</code></pre> <ul> <li>However, this classifier only achieves 38.6% on CIFAR-10.</li> </ul> <p>Note</p> <p>Train O(1),predict O(N) But we want classifiers that are fast at prediction; slow for training is ok.</p>"},{"location":"AI/cv/cs231n/lec2/#the-choice-of-distance","title":"The choice of distance","text":"<ul> <li>L2 distance: \\(d_2(I_1,I_2)=\\sqrt {\\sum_p{(I_1^p-I_2^p)}^2}\\), 35.4% accuracy</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#k-nearest-neighbor-classifier","title":"K-Nearest Neighbor Classifier","text":"<p>Instead of finding the single closest image in the training set, we will find the top k closest images, and have them vote on the label of the test image.</p> <p></p> <p>Intuitively, higher values of k have a smoothing effect that makes the classifier more resistant to outliers.</p>"},{"location":"AI/cv/cs231n/lec2/#pros-and-cons-of-nearest-neighbour-classifier","title":"Pros and Cons of Nearest Neighbour classifier","text":"<ul> <li>\u4f18\u70b9\uff1a\u8bad\u7ec3\u4e0d\u82b1\u8d39\u65f6\u95f4</li> <li>\u7f3a\u70b9\uff1a\u4e0d\u9002\u7528\u4e8e\u9ad8\u7ef4\u6570\u636e\uff0c\u57fa\u4e8e\u50cf\u7d20\u8ddd\u79bb\u7684\u6bd4\u8f83\u9020\u6210\u7ef4\u6570\u707e\u96be</li> </ul>"},{"location":"AI/cv/cs231n/lec2/#setting-hyperparameters","title":"Setting Hyperparameters","text":"<p>Which number of k works best?</p> <p></p> <p></p> <p>Note</p> <p>Evaluate on the test set only a single time, at the very end.</p>"},{"location":"AI/cv/cs231n/lec2/#linear-classification","title":"Linear Classification","text":"<p>\u7531\u4e8eKNN\u5b58\u5728\u4e0d\u8db3\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u5f3a\u5927\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\uff0c\u5e76\u4e14\u8be5\u65b9\u6cd5\u53ef\u4ee5\u81ea\u7136\u5ef6\u7533\u5230\u795e\u7ecf\u7f51\u7edc\u4e0a\u3002</p> <p>\u8be5\u65b9\u6cd5\u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u4e2a\u662fscore function(\u8bc4\u5206\u51fd\u6570)\uff0c\u5b83\u662f\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5230\u7c7b\u522b\u5206\u503c\u7684\u6620\u5c04\u3002\u53e6\u4e00\u4e2a\u662floss function \uff08\u635f\u5931\u51fd\u6570\uff09\uff0c\u5b83\u662f\u7528\u6765\u91cf\u5316\u9884\u6d4b\u5f97\u5206\u4e0e\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u7684\u4e00\u81f4\u6027\u3002\u8be5\u65b9\u6cd5\u6700\u7ec8\u53ef\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#parameterized-mapping-from-images-to-label-scores","title":"Parameterized mapping from images to label scores","text":"<p>score function \u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u6620\u5c04\u4e3a\u5404\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u5f97\u5206\u9ad8\u4ee3\u8868\u56fe\u50cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u7684\u6982\u7387\u5927\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4ece\u4e00\u4e2a\u4f8b\u5b50\u51fa\u53d1\uff1a \u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b\u5f88\u591a\u56fe\u50cf\u7684\u8bad\u7ec3\u96c6\\(x_i \\in \\mathbb{R}^D\\), \u6bcf\u4e2a\u56fe\u50cf\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\\(y_i\\), \u5373\u6211\u4eec\u6709\\(N\\)\u4e2a\u56fe\u50cf\uff0c\u6bcf\u4e2a\u56fe\u50cf\u7684\u7ef4\u5ea6\u662f\\(D\\)\uff08\u5c06\u56fe\u50cf\u62c9\u957f\uff0c\u53ef\u4ee5\u628a\u56fe\u50cf\u770b\u4f5c\u9ad8\u7ef4\u7a7a\u95f4\u7684\u4e00\u4e2a\u70b9\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u5c31\u662f\u4e00\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u70b9\u5e26\u6709\u4e00\u4e2a\u5206\u7c7b\u6807\u7b7e\uff09, \u5171\u6709\\(K\\)\u79cd\u4e0d\u540c\u7684\u5206\u7c7b\u3002\u5b9a\u4e49\\(f:\\mathbb{R}^D \\rightarrow \\mathbb{R}^K\\)</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#linear-classifier","title":"Linear classifier","text":"<p>\u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u51fd\u6570\u5f00\u59cb\uff0c\u4e00\u4e2a\u7ebf\u6027\u6620\u5c04\uff1a $$ f(x_i,W,b)=Wx_i +b $$ \u5176\u4e2d\\(x_i\\)\u7684\u5927\u5c0f\u662f\\(D\\times 1\\), \\(W\\)\u7684\u5927\u5c0f\u662f\\(K\\times D\\) ,\\(b\\)\u662f\\(K\\times 1\\)</p> <p>\\(W\\) \u88ab\u79f0\u4e3aweights(\u6743\u91cd)\uff0c\\(b\\) \u5f71\u54cd\u8f93\u51fa\u7684\u6570\u503c\u4f46\u662f\u5e76\u4e0d\u548c\u539f\u59cb\u6570\u636e\u4ea7\u751f\u5173\u8054\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4fee\u6b63\u91cf\uff0c\u88ab\u79f0\u4e3abias vector\uff08\u504f\u5dee\u5411\u91cf\uff09</p> <p>\u800c\u5bf9\u4e8e\\(W\\)\u77e9\u9635\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6bcf\u4e2a\u7c7b\u7684\u5206\u7c7b\u5668\u5c31\u662f\\(W\\)\u7684\u4e00\u4e2a\u884c\u5411\u91cf\u3002\u4ee5\u8239\u7684\u5206\u7c7b\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u60f3\u8c61\u8239\u88ab\u5927\u91cf\u84dd\u8272\u5305\u56f4\u3002\u90a3\u4e48\u8239\u5206\u7c7b\u5668\u5728\u84dd\u8272\u901a\u9053\u4e0a\u5c31\u6709\u8f83\u591a\u7684\u6b63\u6743\u91cd\uff0c\u800c\u5728\u7eff\u8272\u7ea2\u8272\u901a\u9053\u4e0a\u8d1f\u6743\u91cd\u8f83\u591a\u3002</p> <p>\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5047\u8bbeinput image\u53ea\u6709\u56db\u4e2a\u50cf\u7d20\uff08\u4e0d\u8003\u8651RGB\u901a\u9053\uff09\uff0c\u6709\u4e09\u4e2a\u5206\u7c7b\uff08\u7ea2\u7eff\u84dd\u5206\u522b\u4ee3\u7801\u732b\u72d7\u8239\uff0c\u4e0d\u662fRGB\u7684\u610f\u601d\uff01\uff09\u3002\u9996\u5148\u5c06\u56fe\u50cf\u50cf\u7d20\u62c9\u957f\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\uff0c\u4e0e\\(W\\)\u8fdb\u884c\u77e9\u9635\u4e58\uff0c\u7136\u540e\u5f97\u5230\u5404\u4e2a\u5206\u7c7b\u7684\u5206\u503c\u3002</p> <p>Warning</p> <p>\u8be5\u4f8b\u4ec5\u4f9b\u7406\u89e3\u5206\u7c7b\u5668\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u5b83\u7684\u77e9\u9635W is bad.\u53ef\u4ee5\u770b\u51fa\u6765\u8be5\u5206\u7c7b\u5668\u732b\u7684\u5206\u503c\u975e\u5e38\u4f4e\uff0c\u7b97\u6cd5\u5012\u89c9\u5f97\u8fd9\u4e2a\u56fe\u50cf\u662f\u4e00\u53ea\u72d7\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#_1","title":"\u51e0\u4f55\u89e3\u91ca","text":"<p>\u53e6\u4e00\u4e2a\u5bf9linear classifier\u76f4\u89c2\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u56fe\u50cf\u62c9\u957f\u540e\u90fd\u662f\u4e8c\u7ef4\u7684\uff08\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u53ef\u89c6\u5316\u771f\u5b9e\u56fe\u50cf\u90a3\u4e48\u9ad8\u7ef4\u7a7a\u95f4\u7684\u7ebf\u6027\u51fd\u6570\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u901a\u8fc7\u8be5\u56fe\u6211\u4eec\u518d\u6b21\u7406\u89e3\u4e00\u4e0b \\(W\\) \u548c \\(b\\) \u7684\u4f5c\u7528\uff1a\\(W\\)\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5206\u7c7b\u5668\u3002\u5982\u679c\u6539\u53d8\u5176\u4e2d\u4e00\u884c\u7684\u6570\u5b57\uff0c\u5206\u7c7b\u5668\u5728\u7a7a\u95f4\u4e2d\u5bf9\u5e94\u7684\u76f4\u7ebf\u5c31\u5f00\u59cb\u65cb\u8f6c\uff0c\u800c\\(b\\)\u5141\u8bb8\u76f4\u7ebf\u5e73\u79fb\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\\(b\\), \u90a3\u4e48\u65e0\u8bba\u6743\u91cd\u5982\u4f55\uff0c\u5728\\(x_i=0\\)\u65f6\u5206\u503c\u59cb\u7ec8\u4e3a\\(0\\),\u8fd9\u6837\u6240\u6709\u76f4\u7ebf\u90fd\u8981\u7a7f\u8fc7\u539f\u70b9\u3002\u8fd9\u662f\u6211\u4eec\u5728\\(Wx\\)\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u504f\u5dee\u5411\u91cf\u7684\u53e6\u4e00\u79cd\u89e3\u91ca\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#_2","title":"\u5c06\u7ebf\u6027\u5206\u7c7b\u5668\u770b\u4f5c\u6a21\u677f\u5339\u914d","text":"<p>\u5173\u4e8e\\(W\\) \u7684\u53e6\u4e00\u79cd\u89e3\u91ca\u662f\u5b83\u7684\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5206\u7c7b\u7684\u6a21\u677f\u3002\u6bcf\u5f20\u56fe\u50cf\u7684\u4e0d\u540c\u7c7b\u522b\u5f97\u5206\uff0c\u662f\u4f7f\u7528\u5185\u79ef\u6765\u6bd4\u8f83\u56fe\u50cf\u548c\u6a21\u677f\uff0c\u6700\u540e\u5f97\u5230\u7684\u76f8\u4f3c\u5ea6\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u5c31\u662f\u5728\u5229\u7528\u5b66\u4e60\u5230\u7684\u6a21\u677f\uff0c\u9488\u5bf9\u56fe\u50cf\u505a\u6a21\u677f\u5339\u914d\u3002\u800c\u8054\u7cfb\u5230\u4e4b\u524d\u7684kNN\u7b97\u6cd5\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3alinear classifier\u662f\u5728\u9ad8\u6548\u4f7f\u7528kNN\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u6240\u6709\u8bad\u7ec3\u96c6\u7684\u56fe\u50cf\u6765\u6bd4\u8f83\uff0c\u800c\u662f\u4f7f\u7528\u6a21\u677f\u56fe\u7247\u6765\u5224\u65ad\uff0c\u800c\u4e14\u6ca1\u6709\u4f7f\u7528\\(L_1.L_2\\)\u8ddd\u79bb\u8ba1\u7b97\uff0c\u800c\u662f\u4f7f\u7528\u5185\u79ef\u6765\u8ba1\u7b97\u76f8\u5173\u6027\u3002</p> <p>Note</p> <p>\u5185\u79ef\u7ecf\u5e38\u5728\u76f8\u5173\u6027\u7684\u8ba1\u7b97\u4e2d\u88ab\u4f7f\u7528</p> <p></p>"},{"location":"AI/cv/cs231n/lec2/#loss-function","title":"Loss function","text":"<p>The loss function quantifies our unhappiness with predictions on the training set</p> <p>\u5728\u4e0a\u4e2aunit\u4e3e\u7684\u4f8b\u5b50\u4e2d\uff0c\\(W\\)\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u6743\u91cd\u77e9\u9635\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u5c31\u662f\u8c03\u6574\u6743\u91cd\u77e9\u9635\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u8bc4\u5206\u51fd\u6570\u7684\u7ed3\u679c\u4e0e\u8bad\u7ec3\u96c6\u4e2d\u56fe\u50cf\u7684\u771f\u5b9e\u7c7b\u522b\u4e00\u81f4\u3002\u6240\u4ee5\u5f15\u5165\u635f\u5931\u51fd\u6570\u7684\u6982\u5ff5\u3002</p> <p>\u5f53\u8bc4\u5206\u51fd\u6570\u8f93\u51fa\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u5dee\u5f02\u8d8a\u5927\uff0c\u635f\u5931\u51fd\u6570\u8f93\u51fa\u8d8a\u5927\uff0c\u53cd\u4e4b\u8d8a\u5c0f\u3002</p>"},{"location":"AI/cv/cs231n/lec2/#multiclass-support-vector-machine-loss","title":"Multiclass Support Vector Machine Loss","text":"<p>Key idea: SVM\u7684loss function \u60f3\u8981SVM\u5728\u6b63\u786e\u5206\u7c7b\u4e0a\u7684\u5f97\u5206\u59cb\u7ec8\u6bd4\u4e0d\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u9ad8\u51fa\u4e00\u4e2a\u8fb9\u754c\u503c \\(\\Delta\\)</p> <p>\u9996\u5148\u5c06score\u7b80\u5199\u4e3a\\(s\\), \u5373\\(s_j=f(x_i,W)_j\\). \u5219\u9488\u5bf9\u7b2c\\(i\\)\u4e2a\u6570\u636e\u7684svm\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a $$ L_i = \\sum_{j \\neq y_i}max(0,s_j-s_{y_i}+\\Delta) $$ \u4e0b\u56fe\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u7684\u8fb9\u754c\u503c\u8bbe\u7f6e\u4e3a1</p> <p></p> <p>\u5173\u4e8e0\u7684\u9608\u503c\uff1a\\(max(0, )\\)\u51fd\u6570\u88ab\u79f0\u4f5c\u6298\u53f6\u635f\u5931\u51fd\u6570\uff08hinge loss)</p>"},{"location":"AI/cv/cs231n/lec2/#softmaxmultinomial-logistic-regression","title":"Softmax((Multinomial Logistic Regression)","text":"<p>\u4e0eSVM\u4e0d\u540c\uff0cSoftmax\u7684\u8f93\u51fa\u4e3a\u5f52\u4e00\u5316\u7684\u6982\u7387\u5206\u5e03\uff0c\u66f4\u52a0\u76f4\u89c2\u3002</p> <p>\\(s=f(x_i,W), P(Y=k|X=x_i)=\\frac{e^{s_k}}{\\sum_j{e^{s_j}}}\\)</p> <p>\u4f7f\u7528\\(f_j\\)\u8868\u793a\u8bc4\u5206\u5411\u91cf\\(f\\)\u4e2d\u7684\u7b2c\\(j\\)\u4e2a\u5143\u7d20\uff0c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a\uff1a $$ L_i=-log(\\frac{e^{f_j}}{\\sum_j{e^{f_j}}}) $$</p>"},{"location":"AI/cv/cs231n/lec2/#_3","title":"\u4fe1\u606f\u7406\u8bba\u89c6\u89d2","text":"<p>\u771f\u5b9e\u5206\u5e03 \\(p\\) \u548c\u4f30\u8ba1\u5206\u5e03 \\(q\\) \u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\uff1a  $$ H(p,q)=-\\sum_x p(x)log(q(x)) $$ \u56e0\u6b64\uff0csoftmax\u5206\u7c7b\u5668\u6240\u4f5c\u7684\u5c31\u662f\u6700\u5c0f\u5316\u5728\u4f30\u8ba1\u5206\u5e03 \\(\\frac{e^{f_{y_i}}}{\\sum_j e^{f_j}}\\) \u548c\u771f\u5b9e\u5206\u5e03\u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\u3002\u771f\u5b9e\u5206\u5e03\u5c31\u662f\u6240\u6709\u6982\u7387\u5bc6\u5ea6\u90fd\u5206\u5e03\u5728\u6b63\u786e\u7684\u7c7b\u522b\u4e0a\uff08\u6bd4\u5982\\(p=[0,\u2026,1,\u2026,0]\\)\u4e2d\\(y_i\\)\u7684\u6982\u7387\u662f\\(1\\), \u4ee3\u8868\u771f\u5b9e\u7c7b\u522b\uff0c\u5176\u4ed6\u5168\u4e3a\\(0\\))</p>"},{"location":"AI/cv/cs231n/lec2/#practical-issues","title":"Practical issues","text":"<p>\u4ee3\u7801\u5b9e\u73b0softmax\u51fd\u6570\u8ba1\u7b97\u65f6\uff0c\u56e0\u4e3a\u5b58\u5728\u6307\u6570\u51fd\u6570\uff0c\u9664\u4ee5\u5927\u6570\u503c\u53ef\u80fd\u9020\u6210\u6570\u503c\u8ba1\u7b97\u7684\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5f52\u4e00\u5316\u6280\u5de7 $$ \\frac{e^{f_{y_i}}}{\\sum_j{e^{f_j}}}=\\frac{Ce^{f_{y_i}}}{C\\sum_j{e^{f_j}}}=\\frac{e^{f_{y_i}+logC}}{\\sum_j{e^{f_j}+logC}} $$ \u5176\u4e2d\\(C\\)\u7684\u503c\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\uff0c\u901a\u5e38\u5c06\\(C\\)\u8bbe\u5b9a\u4e3a\\(logC=-max_jf_j\\)\uff0c \u5373\u5c06\\(f\\)\u4e2d\u7684\u6570\u503c\u5e73\u79fb\u4f7f\u5f97\u6700\u5927\u503c\u4e3a\\(0\\), \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50</p> <pre><code>f = np.array([123, 456, 789]) # example with 3 classes and each having large scores\np = np.exp(f) / np.sum(np.exp(f)) # Bad: Numeric problem, potential blowup\n# instead: first shift the values of f so that the highest number is 0:\nf -= np.max(f) # f becomes [-666, -333, 0]\np = np.exp(f) / np.sum(np.exp(f)) # safe to do, gives the correct answer\n</code></pre>"},{"location":"AI/cv/cs231n/lec3/","title":"Lecture 3: Regularization and Optimization","text":"<p> \u7ea6 904 \u4e2a\u5b57  11 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec3/#regularization","title":"Regularization","text":"<p>\u8003\u8651\u4e0a\u4e00\u8282\u635f\u5931\u51fd\u6570\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u4e00\u4e2a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u6743\u91cd\u96c6\\(W\\)\u80fd\u591f\u6b63\u786e\u5206\u7c7b\u6bcf\u4e2a\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u4e2a\\(W\\)\u5e76\u4e0d\u552f\u4e00\u3002\u4f8b\u5982\uff0c\\(W\\)\u53ef\u4ee5\u4f7f\u5f97\\(L=0\\), \u90a3\u4e48\\(2W\\)\u540c\u6837\u4e5f\u53ef\u4ee5\u505a\u5230\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u8981\u600e\u4e48\u9009\u62e9\uff1f</p> <p>\u8fd9\u65f6\u5019\u5c31\u8981\u5f15\u5165\u6b63\u5219\u5316\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u635f\u5931\u51fd\u6570\u540e\u52a0\u4e00\u4e2a\u6b63\u5219\u5316penalty\u90e8\u5206\uff1a $$ L(W)=\\frac{1}{N}\\sum_{i=1}^{N}L_i(f(x_i,W),y_i)+\\lambda R(W) $$</p>"},{"location":"AI/cv/cs231n/lec3/#regularization-intuition","title":"Regularization intuition","text":"<p>\u4e00\u4e2a\u76f4\u89c2\u7684\u4f8b\u5b50\u5982\u4e0a\u56fe\uff0c\u84dd\u8272\u7684\u70b9\u4ee3\u7801\u8bad\u7ec3\u96c6\u7684\u6570\u636e\uff0c\u6211\u4eec\u60f3\u5f97\u5230\u7684\u4e0d\u662f\u4e00\u4e2a\u80fd\u591f\u975e\u5e38\u597d\u7684\u62df\u5408\u73b0\u6709\u6570\u636e\u7684\\(W\\)\uff08\u5982\u56fe\u4e2d\u7684\\(f_1\\)),\u800c\u662f\u53ef\u4ee5\u5bf9\u964c\u751f\u6570\u636e\u5177\u6709\u540c\u6837\u597d\u7684\u6548\u679c\uff08\\(f_2\\))\u3002\u6240\u4ee5\u6b63\u5219\u5316\u8d77\u5230\u7684\u4f5c\u7528\u662f\u9632\u6b62\u6570\u636e\u8fc7\u62df\u5408\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#simple-examples","title":"Simple examples","text":"<ul> <li>L2 regularization: \\(R(W)=\\sum_k\\sum_lW_{k,l}^2\\), likes to spread out weights</li> <li>L1 regularization: \\(R(W)=\\sum_k\\sum_l \\vert W_{k,l}\\vert\\) , prefer sparse weights</li> <li>Elastic net(L1+L2): \\(R(W)=\\sum_k\\sum_l \\beta W_{k,l}^2+\\vert W_{k,l}\\vert\\)</li> </ul>"},{"location":"AI/cv/cs231n/lec3/#optimization","title":"Optimization","text":"<p>\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u91cf\u5316\u67d0\u4e2a\u6743\u91cd\u77e9\u9635\u7684\u8d28\u91cf\uff0c\u800c\u6700\u4f18\u5316\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u80fd\u591f\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u503c\u7684\\(W\\), \u6211\u4eec\u73b0\u5728\u5c31\u671d\u7740\u8fd9\u4e2a\u76ee\u6807\uff0c\u5f15\u5165\u4f18\u5316\u7684\u65b9\u6cd5\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#_1","title":"\u4e24\u4e2a\u76f4\u89c2\u4f46\u4e0d\u592a\u597d\u7684\u60f3\u6cd5","text":"<ul> <li> <p>\u968f\u673a\u641c\u7d22\uff1a\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u662f\u4e2avery bad idea</p> </li> <li> <p>\u968f\u673a\u672c\u5730\u641c\u7d22\uff1a\u4ece\u4e00\u4e2a\u968f\u673a\\(W\\)\u5f00\u59cb\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6270\u52a8 \\(\\delta W\\), \u53ea\u6709\u5f53 \\(W+\\delta W\\)\u7684\u635f\u5931\u503c\u53d8\u4f4e\uff0c\u6211\u4eec\u624d\u4f1a\u66f4\u65b0\u3002\u867d\u7136\u6bd4\u968f\u673a\u641c\u7d22\u597d\u4e00\u4e9b\uff0c\u4f46\u662f\u4f9d\u7136\u5f88\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90</p> </li> </ul>"},{"location":"AI/cv/cs231n/lec3/#_2","title":"\u8ddf\u968f\u68af\u5ea6","text":"<p>\u5728\u4e00\u7ef4\u7a7a\u95f4\uff0c\u51fd\u6570\u7684\u5bfc\u6570\u4e3a\uff1a\\(\\frac{df(x)}{dx}=lim_{h \\rightarrow 0}\\frac{f(x+h)-f(x)}{h}\\)</p> <p>\u5728\u8f93\u5165\u7a7a\u95f4\u4e2d\uff0c\u68af\u5ea6\u662f\u5404\u4e2a\u7ef4\u5ea6\u7684\u659c\u7387\u7ec4\u6210\u7684\u5411\u91cf</p>"},{"location":"AI/cv/cs231n/lec3/#_3","title":"\u8ba1\u7b97\u68af\u5ea6\uff1a\u6570\u503c\u68af\u5ea6\u6cd5","text":"<p>\u5229\u7528\u516c\u5f0f\\(\\frac{df(x)}{dx}=lim_{h \\rightarrow 0}\\frac{f(x+h)-f(x)}{h}\\)\u8ba1\u7b97</p>"},{"location":"AI/cv/cs231n/lec3/#_4","title":"\u8ba1\u7b97\u68af\u5ea6\uff1a\u5fae\u5206\u5206\u6790\u6cd5","text":"<p>\\(\\nabla_w L\\)</p>"},{"location":"AI/cv/cs231n/lec3/#_5","title":"\u68af\u5ea6\u4e0b\u964d","text":""},{"location":"AI/cv/cs231n/lec3/#vanilla-gradient-descent","title":"Vanilla Gradient Descent\uff08\u666e\u901a\u68af\u5ea6\u4e0b\u964d\uff09","text":"<pre><code># Vanilla Gradient Descent\nwhile True:\nweights_grad = evaluate_gradient(loss_fun, data, weights)\nweights += - step_size * weights_grad # perform parameter update\n</code></pre> <p>\u5176\u4e2d<code>step_size</code>\u4e5f\u53eb\u5b66\u4e60\u7387\uff0c\u662f\u6700\u91cd\u8981\u7684\u8d85\u53c2\u4e4b\u4e00\u3002\u82e5\u5b66\u4e60\u7387\u8fc7\u4f4e\uff0c\u867d\u7136\u68af\u5ea6\u4e0b\u964d\u7a33\u5b9a\u4f46\u8017\u65f6\u957f\uff1b\u5982\u679c\u5b66\u4e60\u7387\u8fc7\u9ad8\uff0c\u6709\u53ef\u80fd\u8d8a\u8fc7\u5c40\u90e8\u6700\u4f18\u70b9\u5bfc\u81f4\u66f4\u9ad8\u7684\u635f\u5931\u503c\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#mini-batch-gradient-descent","title":"Mini-batch gradient descent\uff08\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\uff09","text":"<p>\u5728\u5927\u89c4\u6a21\u7684\u5e94\u7528\u4e2d\uff0c\u8bad\u7ec3\u6570\u636e\u53ef\u4ee5\u8fbe\u5230\u767e\u4e07\u7ea7\u91cf\u7ea7\u3002\u5982\u679c\u50cf\u8fd9\u6837\u8ba1\u7b97\u6574\u4e2a\u8bad\u7ec3\u96c6\uff0c\u6765\u83b7\u5f97\u4ec5\u4ec5\u4e00\u4e2a\u53c2\u6570\u7684\u66f4\u65b0\u5c31\u6bd4\u8f83\u6d6a\u8d39\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u8ba1\u7b97\u8bad\u7ec3\u96c6\u4e2d\u7684*\u5c0f\u6279\u91cf\u6570\u636e\u3002</p> <pre><code># Vanilla Minibatch Gradient Descent\nwhile True:\ndata_batch = sample_training_data(data, 256) # sample 256 examples\nweights_grad = evaluate_gradient(loss_fun, data_batch, weights)\nweights += - step_size * weights_grad # perform parameter update\n</code></pre> <p>\u8fd9\u4e2a\u65b9\u6cd5\u4e4b\u6240\u4ee5\u6548\u679c\u4e0d\u9519\uff0c\u662f\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\u90fd\u662f\u76f8\u5173\u7684\u3002\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u6781\u7aef\u60c5\u51b5\uff1a\u5728ILSVRC\u4e2d\u7684120\u4e07\u4e2a\u56fe\u50cf\u662f1000\u5f20\u4e0d\u540c\u56fe\u7247\u7684\u590d\u5236\uff08\u6bcf\u4e2a\u7c7b\u522b1\u5f20\u56fe\u7247\uff0c\u6bcf\u5f20\u56fe\u7247\u67091200\u5f20\u590d\u5236\uff09\u3002\u90a3\u4e48\u663e\u7136\u8ba1\u7b97\u8fd91200\u5f20\u590d\u5236\u56fe\u50cf\u7684\u68af\u5ea6\u5c31\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\u5bf9\u6bd4120\u4e07\u5f20\u56fe\u7247\u7684\u6570\u636e\u635f\u5931\u7684\u5747\u503c\u4e0e\u53ea\u8ba1\u7b971000\u5f20\u7684\u5b50\u96c6\u7684\u6570\u636e\u635f\u5931\u5747\u503c\u65f6\uff0c\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u6570\u636e\u96c6\u80af\u5b9a\u4e0d\u4f1a\u5305\u542b\u91cd\u590d\u56fe\u50cf\uff0c\u90a3\u4e48\u5c0f\u6279\u91cf\u6570\u636e\u7684\u68af\u5ea6\u5c31\u662f\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u68af\u5ea6\u7684\u4e00\u4e2a\u8fd1\u4f3c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u8df5\u4e2d\u901a\u8fc7\u8ba1\u7b97\u5c0f\u6279\u91cf\u6570\u636e\u7684\u68af\u5ea6\u53ef\u4ee5\u5b9e\u73b0\u66f4\u5feb\u901f\u5730\u6536\u655b\uff0c\u5e76\u4ee5\u6b64\u6765\u8fdb\u884c\u66f4\u9891\u7e41\u7684\u53c2\u6570\u66f4\u65b0\u3002</p>"},{"location":"AI/cv/cs231n/lec3/#summary","title":"Summary","text":""},{"location":"AI/cv/cs231n/lec4/","title":"Lec 4: Neural Networks and Backpropagation","text":"<p> \u7ea6 2110 \u4e2a\u5b57  37 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec4/#neural-networks","title":"Neural Networks","text":""},{"location":"AI/cv/cs231n/lec4/#_1","title":"\u7531\u751f\u7269\u7cfb\u7edf\u7684\u795e\u7ecf\u5143\u5230\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"AI/cv/cs231n/lec4/#_2","title":"\u57fa\u672c\u7ed3\u6784","text":"<p>\u5927\u8111\u7684\u57fa\u672c\u8ba1\u7b97\u5355\u4f4d\u662f\u795e\u7ecf\u5143\uff0c\u4eba\u7c7b\u795e\u7ecf\u7cfb\u7edf\u4e2d\u7684\u5927\u7ea6\\(860\\)\u4ebf\u795e\u7ecf\u5143\u88ab\\(10^{14}-10^{15}\\)\u4e2a\u7a81\u89e6\u8fde\u63a5\u8d77\u6765\u3002\u6bcf\u4e2a\u795e\u7ecf\u5143\u4ece\u6811\u7a81\u83b7\u5f97\u4fe1\u53f7\uff0c\u6cbf\u7740\u8f74\u7a81\u8f93\u51fa\u4fe1\u53f7\uff0c\u8f74\u7a81\u672b\u7aef\u4f1a\u5f62\u6210\u5206\u679d\uff0c\u901a\u8fc7\u7a81\u89e6\u548c\u5176\u5b83\u795e\u7ecf\u5143\u7684\u6811\u7a81\u76f8\u8fde\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#_3","title":"\u5177\u4f53\u8fc7\u7a0b","text":"<ul> <li>\u5728\u795e\u7ecf\u5143\u7684\u8ba1\u7b97\u6a21\u578b\u4e2d\uff0c\u6cbf\u7740\u8f74\u7a81\u4f20\u64ad\u7684\u4fe1\u53f7(\\(x\\))\u5c06\u57fa\u4e8e\u7a81\u89e6\u5f3a\u5ea6(\\(w\\))\uff0c\u4e0e\u5176\u5b83\u795e\u7ecf\u5143\u7684\u6811\u7a81\u8fdb\u884c\u4e58\u6cd5\u4ea4\u4e92\u3002</li> <li>\u7a81\u89e6\u7684\u5f3a\u5ea6(\\(w\\))\u53ef\u5b66\u4e60\uff0c\u5e76\u4e14\u63a7\u5236\u4e00\u4e2a\u795e\u7ecf\u5143\u5bf9\u53e6\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u5f71\u54cd\u5f3a\u5ea6\u4e0e\u65b9\u5411\u3002</li> <li>\u6811\u7a81\u5c06\u4fe1\u53f7\u4f20\u9012\u5230\u7ec6\u80de\u4f53\uff0c\u4fe1\u53f7\u5728\u7ec6\u80de\u4f53\u4e2d\u76f8\u52a0\uff0c\u5982\u679c\u7ed3\u679c\u9ad8\u4e8e\u9608\u503c\uff0c\u90a3\u4e48\u795e\u7ecf\u5143\u5c06\u4f1a\u88ab\u6fc0\u6d3b\uff0c\u5411\u8f74\u7a81\u8f93\u51fa\u4e00\u4e2a\u5cf0\u503c\u4fe1\u53f7\u3002</li> <li>\u5728\u8ba1\u7b97\u6a21\u578b\u4e2d\uff0c\u662f\u6fc0\u6d3b\u4fe1\u53f7\u7684\u9891\u7387\u5728\u4ea4\u6d41\u4fe1\u606f\uff0c\u56e0\u6b64\u5c06\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u7387\u5efa\u6a21\u4e3aactivation function \\(f\\)\uff0c\u5b83\u8868\u8fbe\u8f74\u7a81\u4e0a\u6fc0\u6d3b\u4fe1\u53f7\u7684\u9891\u7387\u3002</li> </ul> <p>Note</p> <p>\u8be5\u751f\u7269\u795e\u7ecf\u5143\u7684\u5efa\u6a21\u662f\u975e\u5e38\u7c97\u7cd9\u7684\uff0c\u751f\u7269\u795e\u7ecf\u5143\u7684\u6811\u7a81\u53ef\u4ee5\u8fdb\u884c\u590d\u6742\u7684\u975e\u7ebf\u6027\u8ba1\u7b97\u3002\u7a81\u89e6\u5e76\u4e0d\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6743\u91cd\uff0c\u5b83\u4eec\u662f\u590d\u6742\u7684\u975e\u7ebf\u6027\u52a8\u6001\u7cfb\u7edf\uff0cetc.\u8be5\u6a21\u578b\u53ea\u662f\u4e3a\u4e86\u5f15\u5165\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u66f4\u4e3a\u91cd\u8981\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u800c\u975e\u4ecb\u7ecd\u795e\u7ecf\u79d1\u5b66\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#_4","title":"\u4f5c\u4e3a\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u5355\u4e2a\u795e\u7ecf\u5143","text":"<p>\u7531\u795e\u7ecf\u5143\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\u7684\u538b\u7f29\uff0c\u53ef\u89c1\u5b83\u6709\u80fd\u529blike or dislike \u8f93\u5165\u7a7a\u95f4\u7684\u67d0\u4e9b\u7ebf\u6027\u533a\u57df\uff08\u6fc0\u6d3b\u51fd\u6570\u503c\u63a5\u8fd11or0\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5408\u9002\u7684\u635f\u5931\u51fd\u6570\uff0c\u4f7f\u5f97\u5355\u4e2a\u795e\u7ecf\u5143\u53d8\u6210\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\u3002</p> <p>Question</p> <p>\u5728SVM/Softmax\u7684\u4f8b\u5b50\u4e2d\uff0c\u6b63\u5219\u5316\u635f\u5931\u4ece\u751f\u7269\u5b66\u89d2\u5ea6\u53ef\u4ee5\u770b\u505a\u9010\u6e10\u9057\u5fd8\uff0c\u56e0\u4e3a\u5b83\u7684\u6548\u679c\u662f\u8ba9\u6240\u6709\u7a81\u89e6\u6743\u91cdw\u5728\u53c2\u6570\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u9010\u6e10\u5411\u77400\u53d8\u5316\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#neural-network","title":"Neural Network","text":"<ul> <li>(Before) Linear score function: \\(f=Wx,x\\in \\mathbb{R}^D,W\\in \\mathbb{R}^{C\\times D}\\)</li> <li>(Now) 2-layer Neural Network: \\(f=W_2max(0,W_1x), x\\in \\mathbb{R}^D,W_1\\in \\mathbb{R}^{H\\times D}, W_2\\in \\mathbb{R}^{C\\times H}\\)</li> </ul> <p>\u201cNeural Network\u201d is a very broad term; these are more accurately called  \u201cfully-connected networks\u201d or sometimes \u201cmulti-layer perceptrons\u201d (MLP)</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u795e\u7ecf\u7f51\u7edc\u5f15\u5165\u4e86\u975e\u7ebf\u6027\u51fd\u6570\uff08\u5728\u8be5\u4f8b\u4e2d\u662fmax\u51fd\u6570\uff09\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0cWhy do we want non-linearity?</p> <p>\u4e0b\u56fe\u7684\u4f8b\u5b50\u662f\u4e2a\u5f88\u597d\u7684\u89e3\u91ca\uff1a\u6211\u4eec\u5f15\u5165\u975e\u7ebf\u6027\u51fd\u6570\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u975e\u7ebf\u6027\u53d8\u6362\uff0c\u4f7f\u5f97\u6ee1\u8db3\u5176\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u8981\u6c42\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#architectures","title":"Architectures","text":"<ul> <li>\u547d\u540d\u89c4\u5219\uff1a\u5f53\u6211\u4eec\u8bf4N\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u628a\u8f93\u5165\u5c42\u7b97\u5165\u3002</li> </ul> <p>\u7528\u6765\u5ea6\u91cf\u795e\u7ecf\u7f51\u7edc\u7684\u5c3a\u5bf8\u7684\u6807\u51c6\u4e3b\u8981\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f\u795e\u7ecf\u5143\u7684\u4e2a\u6570\uff0c\u53e6\u4e00\u4e2a\u662f\u53c2\u6570\u7684\u4e2a\u6570\u3002</p> <ul> <li>\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6709\\(4+2=6\\) \u4e2a\u795e\u7ecf\u5143\uff0c\\(3\\times 4+4\\times 2=20\\)\u4e2a\u6743\u91cd\uff0c\u8fd8\u6709\\(4+2=6\\)\u4e2abias, \u517126\u4e2a\u53ef\u5b66\u4e60\u53c2\u6570\u3002</li> <li>\u7b2c\u4e8c\u4e2a\u7f51\u7edc\u670941\u4e2a\u53ef\u5b66\u4e60\u53c2\u6570\uff08\u53ef\u81ea\u5df1\u8ba1\u7b97\u9a8c\u8bc1\uff09</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#_5","title":"\u795e\u7ecf\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b","text":"<p>\u6211\u4eec\u53ef\u4ee5\u628a\u795e\u7ecf\u7f51\u7edc\u7406\u89e3\u4e3a\u4e00\u4e2a\u51fd\u6570\u65cf\uff0c\u7f51\u7edc\u7684\u6743\u91cd\u5c31\u662f\u6bcf\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u6211\u4eec\u73b0\u5728\u60f3\u77e5\u9053\u7684\u662f\u8be5\u51fd\u6570\u65cf\u7684\u8868\u8fbe\u80fd\u529b\u3002(\u4e0d\u4e25\u8c28\u7684\u7c7b\u6bd4\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5411\u91cf\u7a7a\u95f4\u7684\u57fa\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5c3d\u53ef\u80fd\u6269\u5f20\u6210\u66f4\u5927\u7684\u7a7a\u95f4)</p> <p>\u53ef\u4ee5\u8bc1\u660e\uff0c\u62e5\u6709\u81f3\u5c11\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u4e00\u4e2a\u901a\u7528\u7684\u8fd1\u4f3c\u5668\uff0c\u5373\u7ed9\u5b9a\u4efb\u610f\u8fde\u7eed\u51fd\u6570\\(f(x)\\)\u548c\u4efb\u610f\\(\\epsilon&gt;0\\), \u5747\u5b58\u5728\u4e00\u4e2a\u81f3\u5c11\u542b\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc \\(g(x)\\) \uff08\u7f51\u7edc\u4e2d\u6709\u5408\u7406\u9009\u62e9\u7684\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff09, \u5bf9\u4e8e\\(\\forall x\\), \u4f7f\u5f97 \\(\\vert f(x)-g(x)\\vert &lt; \\epsilon\\).</p> <p>\u5373\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u8fd1\u4f3c\u4efb\u4f55\u8fde\u7eed\u51fd\u6570\uff0c\u4e14\u6df1\u5c42\u7f51\u7edc\u6548\u679c\u6bd4\u5355\u5c42\u7f51\u7edc\u597d\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#setting-the-number-of-layers-and-their-sizes","title":"Setting the number of layers and their sizes","text":"<p>\u5f53\u6211\u4eec\u589e\u52a0\u5c42\u7684\u6570\u91cf\u548c\u5c3a\u5bf8\u65f6\uff0c\u7f51\u7edc\u7684\u5bb9\u91cf\u4e0a\u5347\uff0c\u5373\u795e\u7ecf\u5143\u4eec\u53ef\u4ee5\u5408\u4f5c\u8868\u8fbe\u8bb8\u591a\u590d\u6742\u51fd\u6570\uff0c\u6240\u4ee5\u8868\u8fbe\u51fd\u6570\u7684\u7a7a\u95f4\u589e\u52a0\u3002\u8003\u8651\u4e00\u4e2a\u5206\u7c7b\u95ee\u9898\uff0c\u8bad\u7ec3\u4e09\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u90fd\u53ea\u6709\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u4f46\u6bcf\u5c42\u795e\u7ecf\u5143\u6570\u76ee\u4e0d\u540c\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5177\u6709\u66f4\u591a\u795e\u7ecf\u5143\u7684\u7f51\u7edc\u663e\u7136\u53ef\u4ee5\u5206\u7c7b\u66f4\u590d\u6742\u7684\u6570\u636e\uff0c\u4f46\u662f\u53ef\u80fd\u9020\u6210\u6570\u636e\u7684\u8fc7\u62df\u5408\uff08\u7f51\u7edc\u5bf9\u6570\u636e\u4e2d\u7684\u566a\u58f0\u6709\u5f88\u5f3a\u7684\u62df\u5408\u80fd\u529b\uff0c\u800c\u6ca1\u6709\u91cd\u89c6\u6570\u636e\u95f4\u7684\u6f5c\u5728\u57fa\u672c\u5173\u7cfb\uff09\u3002\u6b63\u5219\u5316\u5f3a\u5ea6\u63a7\u5236\u53ef\u4ee5\u8f83\u597d\u89e3\u51b3\u8be5\u95ee\u9898\uff1a</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#activation-functions","title":"Activation functions","text":"<p>\u4e0b\u56fe\u662f\u5e38\u89c1\u7684\u6fc0\u6d3b\u51fd\u6570\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec4/#sigmoid","title":"Sigmoid","text":"<p>\u5b83\u8f93\u5165\u5b9e\u6570\u503c\u5e76\u5c06\u5176\u201c\u6324\u538b\u201d\u52300\u52301\u8303\u56f4\u5185\uff0c\u7531\u4e8e\u5b83\u5bf9\u4e8e\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u9891\u7387\u6709\u826f\u597d\u7684\u89e3\u91ca\uff0c\u5728\u5386\u53f2\u4e0a\u975e\u5e38\u5e38\u7528\u3002\u4f46\u662f\u5b83\u6709\u4e24\u4e2a\u7f3a\u70b9\uff1a</p> <ul> <li>\u51fd\u6570\u9971\u548c\u4f7f\u68af\u5ea6\u6d88\u5931\u3002\u5f53\u6fc0\u6d3b\u503c\u63a5\u8fd10\u62161\u65f6\uff0c\u51fd\u6570\u7684\u68af\u5ea6\u51e0\u4e4e\u4e3a\u96f6\uff0c\u800c\u53cd\u5411\u4f20\u64ad\u65f6\uff08\u4e0b\u6587\u4f1a\u63d0\u5230\uff09\u5c40\u90e8\u68af\u5ea6\u4f1a\u4e0e\u6574\u4e2a\u635f\u5931\u51fd\u6570\u5bf9\u4e8e\u8be5\u95e8\u5355\u5143\u7684\u68af\u5ea6\u76f8\u4e58\uff0c\u5219\u5bfc\u81f4\u7ed3\u679c\u63a5\u8fd10\uff0c\u90a3\u4e48\u5c31\u51e0\u4e4e\u6ca1\u6709\u4fe1\u53f7\u901a\u8fc7\u795e\u7ecf\u5143\u4f20\u5230\u6570\u636e\uff0c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u5b66\u4e60\u3002</li> <li>\u51fd\u6570\u8f93\u51fa\u4e0d\u662f\u4ee5\u96f6\u4e3a\u4e2d\u5fc3\u3002\u6743\u91cd\u66f4\u65b0\u51fa\u73b0Z\u5b57\u578b\u4e0b\u964d\uff1f</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#relurectified-linear-unit","title":"ReLU(Rectified Linear Unit)","text":"<ul> <li>\u4f18\u70b9\uff1a\u5bf9\u4e8e\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6536\u655b\u6709\u5de8\u5927\u7684\u52a0\u901f\u4f5c\u7528</li> <li>\u7f3a\u70b9\uff1a \u5bf9\u4e8e\u5c0f\u4e8e\u96f6\u7684\u6570\u636e\uff0c\u68af\u5ea6\u4e3a\u96f6\uff0c\u5bfc\u81f4\u4e0d\u53ef\u9006\u8f6c\u7684\u6b7b\u4ea1\uff0c\u800cLeaky ReLU\u662f\u4e3a\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5c1d\u8bd5\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#maxout","title":"Maxout","text":"<p>Maxout\u662f\u5bf9ReLU\u548cLeaky ReLU\u7684\u4e00\u822c\u5316\u5f52\u7eb3\uff0c\u8fd9\u91cc\u62e5\u6709ReLU\u7684\u6240\u6709\u4f18\u70b9\u800c\u4e14\u4e0d\u5177\u5907\u7f3a\u70b9\uff0c\u4f46\u662f\u6574\u4f53\u53c2\u6570\u6570\u91cf\u6fc0\u589e\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#backpropagation","title":"Backpropagation(\u53cd\u5411\u4f20\u64ad)","text":"<p>\u6838\u5fc3\u95ee\u9898\uff1a\u7ed9\u5b9a\u51fd\u6570\\(f(x)\\), \u9700\u8981\u8ba1\u7b97\\(f\\)\u5173\u4e8e\\(x\\)\u7684\u68af\u5ea6\uff0c\u5373\\(\\nabla f(x)\\)</p> <ul> <li>bad idea: derive \\(\\nabla_wL\\) on paper: very tedious</li> <li>better idea: computational graphs + backpropagation</li> </ul>"},{"location":"AI/cv/cs231n/lec4/#_6","title":"\u7b80\u5355\u7684\u8868\u8fbe\u5f0f","text":"<p>\u6211\u4eec\u4ee5\\(f(x,y,z)=(x+y)z\\)\u4e3a\u4f8b\uff0c\u76f4\u89c2\u7406\u89e3\u4e00\u4e0b\u53cd\u5411\u4f20\u64ad\u7684\u601d\u60f3</p> <p>Note</p> <p>\u5bf9\u4e8e\u8be5\u51fd\u6570\uff0c\u663e\u7136\u53ef\u4ee5\u8fdb\u884c\u76f4\u63a5\u5fae\u5206\u3002\u4f46\u76f4\u63a5\u5fae\u5206\u5728\u51fd\u6570\u5f88\u590d\u6742\u65f6\u9700\u8981\u6781\u5927\u7684\u8ba1\u7b97\u91cf\uff0c\u53cd\u5411\u4f20\u64ad\u5219\u6781\u5927\u7b80\u5316\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <p>\u9996\u5148\u5c06\u516c\u5f0f\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\\(q=x+y, f=qz\\), \u53ef\u4ee5\u5f97\u5230 \\(\\frac{\\partial f}{\\partial q}=z, \\frac{\\partial q}{\\partial x}=1\\), \u5e76\u4e14\u7531\u94fe\u5f0f\u6cd5\u5219\uff1a\\(\\frac{\\partial f}{\\partial x}=\\frac{\\partial f}{\\partial q}\\frac{\\partial q}{\\partial x}\\), \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\u3002\u800c\u6574\u4e2a\u8ba1\u7b97\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u5c06\u8f93\u5165\u503c\u6839\u636e\u516c\u5f0f\u524d\u5411\u4f20\u64ad\uff0c\u5f97\u5230\u6700\u7ec8\\(f\\)\u51fd\u6570\u7684\u503c\u3002\u7136\u540e\u7531\\(\\frac{\\partial f}{\\partial f}=1\\)\u5f00\u59cb\u9010\u6b65\u8fd4\u56de\uff0c\u5206\u522b\u8ba1\u7b97\u672c\u5730\u7684\u68af\u5ea6\u503c\uff0c\u76f4\u81f3\u5f97\u5230\u7ed3\u679c\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7684\u793a\u4f8b\u4ee3\u7801\u548c\u8ba1\u7b97\u6d41\u56fe\uff08\u524d\u5411\u4f20\u64ad\u4ece\u8f93\u5165\u8ba1\u7b97\u5230\u8f93\u51fa\uff08\u7eff\u8272\uff09\uff0c\u53cd\u5411\u4f20\u64ad\u4ece\u8f93\u51fa\u8ba1\u7b97\u5230\u8f93\u5165\uff08\u7ea2\u8272\uff09\uff09\u3002</p> <pre><code># set some inputs\nx = -2; y = 5; z = -4\n# perform the forward pass\nq = x + y # q becomes 3\nf = q * z # f becomes -12\n# perform the backward pass (backpropagation) in reverse order:\n# first backprop through f = q * z\ndfdz = q # df/dz = q, so gradient on z becomes 3\ndfdq = z # df/dq = z, so gradient on q becomes -4\ndqdx = 1.0\ndqdy = 1.0\n# now backprop through q = x + y\ndfdx = dfdq * dqdx  # The multiplication here is the chain rule!\ndfdy = dfdq * dqdy  \n</code></pre> <p></p> <p>\u5728\u6574\u4e2a\u8ba1\u7b97\u7ebf\u8def\u56fe\u4e2d\uff0c\u6bcf\u4e2a\u95e8\u5355\u5143\u90fd\u4f1a\u5f97\u5230\u8f93\u5165\u5e76\u7acb\u5373\u8ba1\u7b97\uff1a</p> <ul> <li>\u8be5\u5355\u5143\u7684\u5c40\u90e8\u68af\u5ea6</li> <li>\u5c40\u90e8\u68af\u5ea6\u4e58\u4ee5\u8f93\u5165\u503c\uff0c\u5f97\u5230\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u5bf9\u4e8e\u8be5\u5355\u5143\u7684\u68af\u5ea6</li> </ul> <p>\u8fd9\u91cc\u5c06\u5c40\u90e8\u68af\u5ea6\u4e0e\u6bcf\u4e2a\u8f93\u5165\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u662f\u57fa\u4e8e\u94fe\u5f0f\u6cd5\u5219\u3002\u8be5\u64cd\u4f5c\u8ba9\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u5355\u5143\u53d8\u6210\u590d\u6742\u8ba1\u7b97\u7ebf\u8def\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u53cd\u5411\u4f20\u64ad\u53ef\u4ee5\u770b\u505a\u662f\u95e8\u5355\u5143\u4e4b\u95f4\u5728\u901a\u8fc7\u68af\u5ea6\u4fe1\u53f7\u76f8\u4e92\u901a\u4fe1\uff0c\u53ea\u8981\u8ba9\u5b83\u4eec\u7684\u8f93\u5165\u6cbf\u7740\u68af\u5ea6\u65b9\u5411\u53d8\u5316\uff0c\u65e0\u8bba\u5b83\u4eec\u81ea\u5df1\u7684\u8f93\u51fa\u503c\u5728\u4f55\u79cd\u7a0b\u5ea6\u4e0a\u5347\u6216\u964d\u4f4e\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u503c\u66f4\u9ad8\u3002</p>"},{"location":"AI/cv/cs231n/lec4/#sigmoid-example","title":"Sigmoid example","text":"<p>\\(f(w,x)=\\frac{1}{1+e^{\\neg(w_0x_0+w_1x_1+w2)}}\\)</p> <p>\u8fd9\u662f\u4f7f\u7528sigmoid\u6fc0\u6d3b\u51fd\u6570\u7684\u4e8c\u7ef4\u795e\u7ecf\u5143\uff1a\u8f93\u5165\u662f\\([x_0,x_1]\\), \u53ef\u5b66\u4e60\u7684\u6743\u91cd\u662f\\([w_o,w_1,w_2]\\)\u3002\u8be5\u795e\u7ecf\u5143\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5185\u79ef\uff0c\u7136\u540e\u5176\u6570\u636e\u88absigmoid\u51fd\u6570\u538b\u7f29\u81f3\\([0,1]\\)\u533a\u95f4\u3002</p> <p>\u6ce8\u610f\u5230sigmoid\u51fd\u6570\u7684\u5fae\u5206\u662f\u53ef\u4ee5\u7b80\u5316\uff1a $$ \\frac{d\\sigma(x)}{dx}=(1-\\sigma(x))\\sigma(x) $$ \u56e0\u6b64\u53ef\u4ee5\u5c06\u4e2d\u95f4\u7684\u6d41\u7a0b\u88c5\u8fdb\u4e00\u4e2a\u72ec\u7acb\u7684\u95e8\u5355\u5143\uff0c\u5927\u5927\u7b80\u5316\u8ba1\u7b97\uff1a</p> <pre><code>w = [2,-3,-3] # assume some random weights and data\nx = [-1, -2]\n# forward pass\ndot = w[0]*x[0] + w[1]*x[1] + w[2]\nf = 1.0 / (1 + math.exp(-dot)) # sigmoid function\n# backward pass through the neuron (backpropagation)\nddot = (1 - f) * f # gradient on dot variable, using the sigmoid gradient derivation\ndx = [w[0] * ddot, w[1] * ddot] # backprop into x\ndw = [x[0] * ddot, x[1] * ddot, 1.0 * ddot] # backprop into w\n# we're done! we have the gradients on the inputs to the circuit\n</code></pre> <p></p>"},{"location":"AI/cv/cs231n/lec4/#_7","title":"\u77e9\u9635\u4e58\u6cd5\u7684\u68af\u5ea6","text":"<pre><code># forward pass\nW = np.random.randn(5, 10)\nX = np.random.randn(10, 3)\nD = W.dot(X)\n# now suppose we had the gradient on D from above in the circuit\ndD = np.random.randn(*D.shape) # same shape as D\ndW = dD.dot(X.T) #.T gives the transpose of the matrix\ndX = W.T.dot(dD)\n</code></pre> <p>Note</p> <p>quite tricky,\u5728\u64cd\u4f5c\u65f6\u8981\u6ce8\u610f\u8f6c\u7f6e\u64cd\u4f5c\u3002\u53ef\u4ee5\u4f7f\u7528\u5206\u6790\u7ef4\u5ea6\u7684\u65b9\u6cd5\u3002</p>"},{"location":"AI/cv/cs231n/lec5/","title":"Lec5: Image Classification with CNNs","text":"<p> \u7ea6 639 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#overview","title":"Overview","text":"<p>\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u662f\u5168\u8fde\u63a5\u7684\uff0c\u5bf9\u4e8e\u5927\u5c3a\u5bf8\u56fe\u50cf\u6548\u679c\u4e0d\u597d\u3002\u800c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u9488\u5bf9\u8f93\u5165\u5168\u90e8\u662f\u56fe\u50cf\u7684\u60c5\u51b5\uff0c\u5c06\u7ed3\u6784\u8c03\u6574\u5f97\u66f4\u52a0\u5408\u7406\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u53ea\u4e0e\u524d\u4e00\u5c42\u4e2d\u7684\u4e00\u5c0f\u5757\u533a\u57df\u8fde\u63a5\uff0c\u6700\u540e\u7684\u8bc4\u5206\u5411\u91cf\u662f\u5728\u6df1\u5ea6\u65b9\u5411\u6392\u5217\u7684\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#_1","title":"\u5177\u4f53\u7ed3\u6784","text":"<p>\u4e3b\u8981\u7531\u5377\u79ef\u5c42\uff0c\u6c60\u5316\u5c42\uff0c\u5168\u8fde\u63a5\u5c42\u6784\u6210\uff0c\u901a\u8fc7\u5c06\u8fd9\u4e9b\u5c42\u53e0\u52a0\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc</p>"},{"location":"AI/cv/cs231n/lec5/#_2","title":"\u5377\u79ef\u5c42","text":""},{"location":"AI/cv/cs231n/lec5/#introduction","title":"introduction","text":"<p>\u5377\u79ef\u5c42\u662f\u6784\u5efa\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u6838\u5fc3\u5c42\uff0c\u5b83\u4ea7\u751f\u4e86\u7f51\u7edc\u4e2d\u5927\u90e8\u5206\u7684\u8ba1\u7b97\u91cf</p> <ul> <li>\u5377\u79ef\u5c42\u7684\u53c2\u6570\u662f\u7531\u4e00\u4e9b\u53ef\u5b66\u4e60\u7684\u6ee4\u6ce2\u5668\uff08\u4e5f\u79f0\u8be5\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\uff09\u96c6\u5408\u6784\u6210\u7684</li> <li>\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5728\u7a7a\u95f4\u4e0a\u90fd\u6bd4\u8f83\u5c0f\uff0c\u4f46\u662f\u6df1\u5ea6\u4e0e\u8f93\u5165\u4e00\u81f4\u3002</li> <li>\u5728\u524d\u5411\u4f20\u64ad\u65f6\uff0c\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u4e0e\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5377\u79ef\uff0c\u751f\u6210\u4e00\u4e2a\u4e8c\u7ef4\u7684activation map\u3002</li> <li>\u5728\u6bcf\u4e2a\u5377\u79ef\u5c42\u4e0a\uff0c\u6709\u4e00\u6574\u4e2a\u96c6\u5408\u7684\u6ee4\u6ce2\u5668\uff0c\u6240\u6709\u6ee4\u6ce2\u5668\u7684\u6fc0\u6d3b\u6620\u5c04\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\u5806\u53e0\u8d77\u6765\u5c31\u751f\u6210\u4e86\u8be5\u5c42\u7684\u8f93\u51fa\u6570\u636e\u3002</li> </ul> <p>The brain view. If you\u2019re a fan of the brain/neuron analogies, every entry in the 3D output volume can also be interpreted as an output of a neuron that looks at only a small region in the input and shares parameters with all neurons to the left and right spatially (since these numbers all result from applying the same filter).</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#spaital-arrangment","title":"spaital arrangment","text":"<p>\u67093\u4e2a\u8d85\u53c2\u63a7\u5236\u7740\u8f93\u51fa\u7684\u5927\u5c0f\uff1adepth, stirde, zero-padding</p> <ul> <li>depth: \u4e0e\u4f7f\u7528\u7684filter\u7684\u6570\u91cf\u4e00\u81f4</li> <li>stirde: \u6ed1\u52a8\u6ee4\u6ce2\u5668\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b65\u957f\uff08\u6bcf\u6b21\u79fb\u52a8\u7684\u50cf\u7d20\u4e2a\u6570\uff09</li> <li>zero-padding\uff1a\u7528\u6765\u4fdd\u6301\u8f93\u5165\u6570\u636e\u5728\u7a7a\u95f4\u4e0a\u5c3a\u5bf8\u7684trick</li> </ul>"},{"location":"AI/cv/cs231n/lec5/#summary","title":"Summary","text":"<p>input: \\(W_1\\times H_1\\times C\\)</p> <p>hyperparameters:</p> <ul> <li>Number of filters \\(K\\)</li> <li>The filter size \\(F\\)</li> <li>The stride \\(S\\)</li> <li>The zero-padding \\(P\\)</li> </ul> <p>Output: \\(W_2\\times H_2\\times K\\)</p> <ul> <li>\\(W_2=(W_1-F+2P)/S+1\\)</li> <li>\\(H_2=(H_1-F+2P)/S+1\\)</li> </ul> <p>Number of parameters: \\(F^2CK+K\\) </p>"},{"location":"AI/cv/cs231n/lec5/#_3","title":"\u6c60\u5316\u5c42","text":"<p>\u901a\u5e38\uff0c\u5728\u8fde\u7eed\u7684\u5377\u79ef\u5c42\u4e4b\u95f4\u4f1a\u5468\u671f\u6027\u63d2\u5165\u6c60\u5316\u5c42\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9010\u6e10\u964d\u4f4e\u6570\u636e\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4ee5\u51cf\u5c11\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u6570\u91cf\uff0c\u540c\u65f6\u6709\u6548\u63a7\u5236\u8fc7\u62df\u5408\u73b0\u8c61\u3002</p> <p>\u6c60\u5316\u5c42\u5bf9\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u5207\u7247\u72ec\u7acb\u8fdb\u884cmax\u64cd\u4f5c\uff0c\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528\\(2\\times 2\\)\u7684\u6ee4\u6ce2\u5668\uff0c\u4ee5\u6b65\u957f\u4e3a2\u5bf9\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u964d\u91c7\u6837\uff0c\u4e22\u5f0375%\u7684\u6fc0\u6d3b\u4fe1\u606f\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec5/#_4","title":"\u5168\u8fde\u63a5\u5c42","text":"<p>\u4e0e\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u4e00\u6837\uff0c\u795e\u7ecf\u5143\u5bf9\u4e8e\u524d\u4e00\u5c42\u7684\u6240\u6709\u6fc0\u6d3b\u6570\u636e\u662f\u5168\u90e8\u8fde\u63a5\u7684</p>"},{"location":"AI/cv/cs231n/lec6/","title":"Lec6: Training Neural Networks","text":"<p> \u7ea6 600 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"AI/cv/cs231n/lec6/#data-preprocessing","title":"Data Preprocessing","text":"<p>\u5047\u8bbe\u6570\u636e\u77e9\u9635\\(X\\), \u5927\u5c0f\u4e3a\\([N\\times D]\\), (\\(N\\) \u662f\u6570\u636e\u6837\u672c\u7684\u6570\u91cf\uff0c\\(D\\) \u662f\u6570\u636e\u7684\u7ef4\u5ea6)</p>"},{"location":"AI/cv/cs231n/lec6/#_1","title":"\u51cf\u5747\u503c+\u5f52\u4e00\u5316","text":"<p>\u9996\u5148\u56de\u987e\u5728\u6fc0\u6d3b\u51fd\u6570\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u63d0\u5230sigmoid\u51fd\u6570\u7684\u7f3a\u70b9\u5c31\u662f\u4e0d\u4ee5\u96f6\u4e3a\u4e2d\u5fc3\uff0c\u5047\u8bbe\u795e\u7ecf\u5143\u7684\u8f93\u5165\u5168\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u68af\u5ea6\u4e0b\u964d\u7684\u4f18\u5316\u5c31\u4f1a\u51fa\u73b0zigzag\u7684\u73b0\u8c61\uff0c\u6548\u7387\u6781\u4f4e\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u72ec\u7acb\u7279\u5f81\u51cf\u53bb\u5e73\u5747\u503c\uff0c\u4ece\u51e0\u4f55\u4e0a\u7406\u89e3\u5c31\u662f\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u90fd\u5c06\u6570\u636e\u7684\u4e2d\u5fc3\u79fb\u5230\u539f\u70b9\u3002\u518d\u8fd9\u4e4b\u540e\u5c06\u6570\u636e\u7684\u6240\u6709\u7ef4\u5ea6\u5f52\u4e00\u5316\uff0c\u4f7f\u5176\u6570\u503c\u8303\u56f4\u8fd1\u4f3c\u76f8\u7b49\u3002\u800c\u5f52\u4e00\u5316\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li>\u5148\u5bf9\u6570\u636e\u505azero-centered\u5904\u7406\uff0c\u7136\u540e\u6bcf\u4e2a\u7ef4\u5ea6\u9664\u4ee5\u6807\u51c6\u5dee</li> <li>\u6bcf\u4e2a\u7ef4\u5ea6\u90fd\u505a\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7ef4\u5ea6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5206\u522b\u4e3a-1\u548c1</li> </ul> <p></p> <p>\u5747\u503c\u5904\u7406\u7684\u53e6\u4e00\u4e2a\u4f18\u70b9\u5c31\u5728\u4e8e\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\u7ebf\u6027\u5206\u7c7b\u5668\u5bf9\u4e8e\u5fae\u5c0f\u7684\u6743\u91cd\u53d8\u6362\u4e0d\u90a3\u4e48\u654f\u611f\uff0c\u4f7f\u5f97\u6574\u4e2a\u7f51\u7edc\u80fd\u591f\u66f4\u597d\u7684\u4f18\u5316\u3002</p> <p></p>"},{"location":"AI/cv/cs231n/lec6/#pca-and-whitening","title":"PCA and  Whitening","text":"<p>Question</p> <p>\u6211\u5bf9PCA\u8fc7\u7a0b\u7684\u7406\u89e3\u8fd8\u4e0d\u662f\u5f88\u900f\u5f7b\uff0c\u4e0d\u592a\u7406\u89e3\u5176\u4e2d\u534f\u65b9\u5dee\u77e9\u9635\u7684\u5177\u4f53\u542b\u4e49</p> <p>Note</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4efb\u4f55\u9884\u5904\u7406\u64cd\u4f5c\u90fd\u53ea\u80fd\u5728\u8bad\u7ec3\u96c6\u6570\u636e\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e94\u8be5\u5148\u5c06\u6574\u4e2a\u6570\u636e\u96c6\u5206\u6210\u8bad\u7ec3/\u9a8c\u8bc1/\u6d4b\u8bd5\u96c6\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u6c42\u51fa\u5747\u503c\uff0c\u518d\u5728\u5404\u4e2a\u96c6\u5408\u7684\u56fe\u50cf\u4e2d\u51cf\u53bb\u5e73\u5747\u503c\u3002</p>"},{"location":"AI/cv/cs231n/lec6/#weight-initialization","title":"Weight Initialization","text":"<p>\u5728\u5f00\u59cb\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u521d\u59cb\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570</p>"},{"location":"AI/cv/cs231n/lec6/#idea","title":"\u4e00\u4e9b\u9519\u8bef\u7684idea","text":"<ul> <li>\u5168\u96f6\u521d\u59cb\u5316\uff1a\u4f7f\u5f97\u6240\u6709\u795e\u7ecf\u5143\u90fd\u4e00\u6a21\u4e00\u6837</li> <li>\u5c0f\u968f\u673a\u6570\u521d\u59cb\u5316\uff1a<code>W=0.01*np.random.randn(D,H)</code>, \u8fd9\u4e2a\u65b9\u6cd5\u5bf9\u4e8e\u5c0f\u89c4\u6a21\u7684\u7f51\u7edc\u662f\u53ef\u53d6\u7684\uff0c\u4f46\u662f\u5728\u5927\u89c4\u6a21\u7684\u6df1\u5ea6\u7f51\u7edc\u4e0a\uff0c\u968f\u7740\u5c42\u7684\u6df1\u5165\uff0c\u6240\u6709\u6fc0\u6d3b\u503c\u90fd\u8d8b\u5411\u4e8e\u96f6\uff0c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u5b66\u4e60\u3002</li> </ul>"},{"location":"AI/cv/cs231n/lec6/#_2","title":"\u53ef\u53d6\u7684\u65b9\u6cd5","text":""},{"location":"AI/cv/cs231n/lec6/#xavier-initalization","title":"Xavier Initalization","text":"<p>\u4f7f\u7528<code>1/sqrt(Din)</code>\u7684\u65b9\u6cd5\u6821\u51c6\u65b9\u5dee\u3002\u53ef\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u4e2d\u7684\u795e\u7ecf\u5143\u6709\u8fd1\u4f3c\u7684\u8f93\u51fa\u5206\u5e03\uff0c\u63d0\u9ad8\u6536\u655b\u7684\u901f\u5ea6 (\u5bf9\u4e8e\u5377\u79ef\u5c42\uff0cdin\u662f\u5377\u79ef\u6838\u7684\u7ef4\u5ea6</p> <p>Note</p> <p>\u8be5\u65b9\u6cd5\u7684\u8bc1\u660e\u5c06\u5728\u6211\u5b66\u5b8c\u6982\u7387\u8bba\u4e4b\u540e\u8865\u4e0a</p>"},{"location":"AI/cv/cs231n/lec6/#batch-normalization","title":"Batch Normalization","text":"<p>\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\uff1a\\(\\hat{x}^{(k)}=\\frac{x^{k}-E[x^{(k)}]}{\\sqrt{Var[x^{(k)}]}}\\)</p> <p></p>"},{"location":"AI/cv/icv/","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p> <p>Abstract</p> <p>ZJU 2023-2024\u79cb\u51ac\u8bfe\u7a0b\uff1a\u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba</p> <p>\u4efb\u8bfe\u6559\u5e08\uff1a\u5468\u6653\u5dcd</p>"},{"location":"AI/cv/icv/lab1/","title":"Lab 1 Matplotlib, OpenCV and Open3d","text":"<p> \u7ea6 164 \u4e2a\u5b57  99 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Firstly, import packages</p> <pre><code>import matplotlib.pyplot as plt\nimport open3d as o3d\nimport imageio\nimport numpy as np\nimport cv2\n</code></pre>"},{"location":"AI/cv/icv/lab1/#matplotlib","title":"Matplotlib","text":""},{"location":"AI/cv/icv/lab1/#read-an-image-using-imageio-and-opencv","title":"Read an image using imageio and opencv","text":"<pre><code>def read_image_cv_io(img_path):\n'''\n    Input:\n    img_path: string\n    Return:\n    img_cv: array, (H, W, 3)\n    img_io: array, (H, W, 3)\n    '''\nimg_io = imageio.imread(img_path)\nimg_cv = cv2.imread(img_path)\nreturn img_cv,img_io\n</code></pre> <p>The difference of two methods:</p> <ul> <li>imageio.imread: RGB</li> <li>cv2.imread: BGR</li> </ul>"},{"location":"AI/cv/icv/lab1/#show-images-using-matplotlib","title":"Show images using matplotlib","text":"<pre><code>def show_image(img)\uff1a\nplt.imshow(img)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#show-images-in-a-1times-2-subplot","title":"Show images in a \\(1\\times 2\\) subplot","text":"<pre><code>def show_image_subplot(images):\n'''\n    Input: \n    images: tuple of 2 images\n    '''\nplt.subplot(1,2,1)\nplt.imshow(images[0])\nplt.subplot(1,2,2)\nplt.imshow(inages[1])\n</code></pre> <p>The first graph is the result of img_io(RGB), the second is img_cv(BGR).</p>"},{"location":"AI/cv/icv/lab1/#show-concated-images-using-matplotlib","title":"Show concated images using matplotlib","text":"<pre><code>def concat_images(images):\n'''\n    Input: \n    images: tuple of two images, ((H, W, 3), (H, W, 3))\n    Output:\n    image: (H, 2*W, 3)\n    '''\nnewimage = np.concatenate((images[0],images[1]),axis=1)\nreturn newimage\n</code></pre>"},{"location":"AI/cv/icv/lab1/#plot-the-function-of-y2x2-3-during-1010","title":"Plot the function of \\(y=2x^2-3\\) during [-10,10]","text":"<pre><code>def func(x):\nreturn 2 * x**2 - 3\ndef plot(func):\nx = np.arange(-10,10,0.1)\ny = func(x)\nplt.plot(x,y)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#opencv","title":"OpenCV","text":""},{"location":"AI/cv/icv/lab1/#convert-and-show-images","title":"Convert and show images","text":"<pre><code>def convert_rgb_to_bgr(img):\n'''\n    Input:\n    img: (H, W, 3), RGB channels.\n    Return:\n    img: (H, W, 3), BGR channels.\n    '''\nnewimage = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\nreturn newimage\ndef convert_rgb_to_gray(img):\n'''\n    Input:\n    img: (H, W, 3), RGB channels.\n    Return:\n    img: (H, W), Gray image.\n    '''\nnewimage = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\nreturn newimage\ndef cv_imshow(img):\n'''\n    Input:\n    img: (H, W, 3), BGR channels\n    '''\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()# called to close any open windows.\n</code></pre> <p><code>waitkey</code>\u63a7\u5236\u7740<code>imshow</code>\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5f53<code>imshow</code>\u4e4b\u540e\u4e0d\u8ddf<code>waitkey</code>\u65f6\uff0c\u76f8\u5f53\u4e8e\u6ca1\u6709\u7ed9<code>imshow</code>\u63d0\u4f9b\u65f6\u95f4\u5c55\u793a\u56fe\u50cf\uff0c\u6240\u4ee5\u53ea\u6709\u4e00\u4e2a\u7a7a\u7a97\u53e3\u4e00\u95ea\u800c\u8fc7\u3002</p> <p>\u8bbe\u7f6e <code>waitKey(0</code>) , \u5219\u8868\u793a\u7a0b\u5e8f\u4f1a\u65e0\u9650\u5236\u7684\u7b49\u5f85\u7528\u6237\u7684\u6309\u952e\u4e8b\u4ef6</p>"},{"location":"AI/cv/icv/lab1/#read-videos-and-show-videos","title":"Read videos and show videos","text":"<pre><code>def read_and_show_video(video_path):\n'''\n    Input: \n    video_path: string\n    '''\nvideo = cv2.VideoCapture(video_path)\nwhile video.isOpened():\nret,frame = video.read()# ret is a boolean value indicating whether a frame was successfully read; frame holds the actual frame that was read from the video source. It is a NumPy array representing an image.\nif ret:\ncv2.imshow('frame',frame)\nif key==ord('q'):\nvideo.release()\nbreak\nelse:\nvideo.release()\n</code></pre>"},{"location":"AI/cv/icv/lab1/#write-student-id-in-the-image-and-save-it","title":"Write student ID in the image and save it","text":"<pre><code>def write_student_id(img):\ntext=\" \"\nnewimage = cv2.putText(img,text,(100,50),cv2.FONT_HERSHEY_COMPLEX,2.0,(255,255,255),5)\n# 2.0:determines the size of the text.\n#5:the thickness of the text\nreturn newimage\ndef write_img(img_path,img):\ncv2.imwrite(img_path,img)\n</code></pre>"},{"location":"AI/cv/icv/lab1/#open3d","title":"Open3d","text":""},{"location":"AI/cv/icv/lab1/#read-and-visualize-3d-modelsin-point-cloud","title":"Read and visualize 3D models(in point cloud)","text":"<pre><code>def read_vis_model(model_path):\npcd = o3d.io.read_point_cloud(model_path)\no3d.visualization.draw_geometries([pcd],width=800,height=600)\n</code></pre>"},{"location":"AI/cv/icv/lec1/","title":"Introduction","text":"<p> \u7ea6 156 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec1/#what-is-computer-vision","title":"What is Computer Vision","text":"<p>A standard computer vision system:</p> <p></p>"},{"location":"AI/cv/icv/lec1/#computer-vision-tasks","title":"Computer vision tasks","text":"<ul> <li>3D reconstruction<ul> <li>3D reconstruction, localization, SLAM\uff0c\u2026\u2026</li> </ul> </li> <li>Image undestanding<ul> <li>Image recognition, object detection, image segmentation, action recognition, deep learning,\u2026\u2026</li> </ul> </li> <li>Image synthesis<ul> <li>Colorization, super-resolution, debluring, HDR, panorama, free-viewpoint, GANs, \u2026\u2026</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec1/#why-is-computer-vision-hard","title":"Why is computer vision hard?","text":"<ul> <li>computers can be better at computing</li> <li>humans are better at understanding</li> </ul>"},{"location":"AI/cv/icv/lec1/#linear-algebra-recap","title":"Linear Algebra Recap","text":"<p>\u77e9\u9635\u548c\u5411\u91cf\u7684\u4e58\u6cd5\u8868\u793a\u5bf9\u5411\u91cf\u4f4d\u7f6e\u8fdb\u884c\u51e0\u4f55\u53d8\u6362\uff0c\u77e9\u9635\u7684\u5217\u63cf\u8ff0\u4e86\u8be5\u53d8\u6362\u7684\u5177\u4f53\u5f62\u5f0f\uff08\u6807\u51c6\u57fa\u7ecf\u53d8\u6362\u540e\u7684\u5750\u6807\uff09</p> <p>\u4ece\u51e0\u4f55\u89d2\u5ea6\u7406\u89e3\u77e9\u9635\u53ef\u9006\uff1a\u53d8\u6362\u524d\u540e\u7684\u4e24\u4e2a\u70b9\u4e00\u4e00\u5bf9\u5e94</p> <p>\u884c\u5217\u5f0f\u51e0\u4f55\u610f\u4e49\uff1aThe determinant is the volume of an n-dimensional parallel body</p>"},{"location":"AI/cv/icv/lec1/#application-of-eigenvalues-and-eigenvectors","title":"Application of Eigenvalues and eigenvectors","text":"<ul> <li>Principal components analysis(PCA)</li> </ul>"},{"location":"AI/cv/icv/lec2/","title":"Lec2 Image Formation","text":"<p> \u7ea6 1046 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec2/#camera-and-lens","title":"Camera and lens","text":"<p>\u9996\u5148\u8ba9\u6211\u4eec\u6765\u8bbe\u8ba1\u4e00\u4e2a\u76f8\u673a\u3002</p> <p>\u5047\u5982\u76f4\u63a5\u5728\u7269\u4f53\u9762\u524d\u653e\u4e00\u4e2a\u5e95\u7247\uff0c\u663e\u7136\u4e0d\u80fd\u5f97\u5230\u8f83\u597d\u7684\u56fe\u50cf\uff0c\u56e0\u4e3a\u5b9e\u7269\u4e0e\u50cf\u5e73\u9762\u4e0a\u7684\u70b9\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u56e0\u6b64\u6211\u4eec\u6700\u5148\u60f3\u5230\u7684\u5c31\u662f\u5c0f\u5b54\u6210\u50cf(Pinhole camera)\uff0c\u5c3d\u53ef\u80fd\u4f7f\u5f97\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u6210\u7acb\u3002</p> <p>\u4f46\u6b64\u65f6\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u5b54\u8d8a\u5c0f\u56fe\u50cf\u5c31\u8d8a\u6e05\u695a\uff1a</p> <ul> <li>\u7531\u7269\u7406\u5b66\u53ef\u4ee5\u5f97\u5230\uff0c\u5f53\u5b54\u592a\u5c0f\u65f6\uff0c\u4f1a\u4ea7\u751f\u5149\u7684\u884d\u5c04\u73b0\u8c61</li> <li>\u5b54\u592a\u5c0f\u4e5f\u4f1a\u5bfc\u81f4\u901a\u5149\u91cf\u4e0d\u8db3</li> </ul> <p></p> <p>\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528\u955c\u5934\u2014\u2014Lens(\u4fdd\u6301\u4e00\u4e00\u5bf9\u5e94\u7684\u540c\u65f6\u6c47\u805a\u66f4\u591a\u7684\u5149)</p> <p></p> <p>If \\(o=\\infty\\), then \\(f=i\\)</p>"},{"location":"AI/cv/icv/lec2/#image-magnification","title":"Image Magnification","text":"<p>\u653e\u5927\u7387 \\(m=\\frac{h_i}{h_o}=\\frac{i}{o}\\), </p> <p>\u7531\u516c\u5f0f\\(\\frac{1}{i}=\\frac{1}{o}+\\frac{1}{f}\\) \u53ef\u5f97\uff0c\u5f53\u7269\u4f53\u79bb\u900f\u955c\u8db3\u591f\u8fdc\u65f6\uff0c\u50cf\u8ddd\u53ef\u4ee5\u8fd1\u4f3c\u7b49\u4e8e\u7126\u8ddd\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bf4\u7126\u8ddd\u4e5f\u51b3\u5b9a\u4e86\u56fe\u50cf\u653e\u5927\u7387\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec2/#field-of-viewfov","title":"Field of  View(FOV)","text":"<p>\u89c6\u573a\u89d2\u53d6\u51b3\u4e8e\u4e24\u4e2a\u56e0\u7d20\uff1a\u7126\u8ddd\u4e0e\u5e95\u7247(sensor)\u7684\u5927\u5c0f\uff0c\u7531\u4e0a\u56fe\u53ef\u4ee5\u76f4\u89c2\u770b\u51fa</p> <p>\u4ece\u6210\u50cf\u8d28\u91cf\u6765\u770b\uff0c\u5e95\u7247\u8d8a\u5927\u8d8a\u597d\uff08\u6bcf\u4e2a\u50cf\u7d20\u6536\u5230\u7684\u5149\u66f4\u591a\uff0c\u4fe1\u566a\u6bd4\u66f4\u597d\uff09\uff0c\u56e0\u6b64\u73b0\u5728\u7684\u5de5\u4e1a\u76ee\u6807\u5c31\u662f\u5728\u7f29\u5c0f\u5e95\u7247\u7684\u540c\u65f6\u7ef4\u6301\u597d\u7684\u4fe1\u566a\u6bd4\u3002</p>"},{"location":"AI/cv/icv/lec2/#aperture","title":"Aperture","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u653e\u5927/\u7f29\u5c0f\u5149\u5708\u6765\u63a7\u5236\u56fe\u50cf\u7684\u4eae\u5ea6</p>"},{"location":"AI/cv/icv/lec2/#f-number","title":"F-number","text":"<ul> <li> <p>More convenient to represent aperture as a fraction of focal length: \\(D=\\frac{f}{N}\\)</p> </li> <li> <p>F-Number: \\(N=\\frac{f}{D}\\)</p> </li> </ul>"},{"location":"AI/cv/icv/lec2/#lens-defocus","title":"Lens Defocus","text":"<p>\u5f53 \\(f\\) \u548c \\(i\\) \u56fa\u5b9a\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u9762(\u6df1\u5ea6)\u5728\u6210\u50cf\u5e73\u9762\u4e0a\u662f\u6e05\u695a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u7126</p> <p>\uff08\u5f25\u6563\u5706\uff09Blur circle diameter: \\(b=\\frac{D}{i^{'}}\\vert i^{'}-i\\vert\\)\uff0c \u4e0b\u56fe\u662f\u751f\u6d3b\u4e2d\u5e38\u89c1\u7684\u4e00\u4e2a\u4f8b\u5b50</p> <p></p>"},{"location":"AI/cv/icv/lec2/#depth-of-fielddof","title":"Depth of Field(DoF)","text":"<p>\u867d\u7136\u6709\u4e86\u5f25\u6563\u5706\u4e0edefocus\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u4f1a\u7591\u60d1\u751f\u6d3b\u4e2d\u7684\u7167\u7247\u5e76\u975e\u4ec5\u6709\u4e00\u4e2a\u6df1\u5ea6\u624d\u662f\u6e05\u6670\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u56fe\u50cf\u5e76\u975e\u8fde\u7eed\u7684\uff0c\u800c\u662f\u7531\u4e00\u4e2a\u4e2a\u65b9\u683c\uff08\u50cf\u7d20\uff09\u6784\u6210\u7684\uff0c\u5f53\u5f25\u6563\u5706\u843d\u5728\u4e00\u4e2a\u50cf\u7d20\u5185\u65f6\uff0c\u5b83\u8868\u73b0\u51fa\u6765\u4e5f\u662f\u6e05\u6670\u7684\uff0c\u8fd9\u5c31\u5f15\u5165\u4e86\u666f\u6df1\u7684\u6982\u5ff5\uff1a</p> <p>Range of object distances over which the image is sufficiently well focused, i.e. range over which blur b is less than pixel size.</p> <p></p> <p>DoF: \\(o_2-o_1=\\frac{2pf^2cN(o-f)}{f^4-c^2N^2(o-f)^2}\\)</p>"},{"location":"AI/cv/icv/lec2/#geometric-image-formation","title":"Geometric image formation","text":"<p>Geometric image formation \u5c31\u662f\u4f7f\u7528\u76f8\u673a\u6a21\u578b\u6765\u63cf\u8ff03D\u4e16\u754c\u548c2D\u56fe\u50cf\u4e4b\u95f4\u7684\u51e0\u4f55\u5173\u7cfb\u3002</p>"},{"location":"AI/cv/icv/lec2/#perspective-projection","title":"Perspective Projection","text":"<p>\u4f7f\u7528Pin-hole camera model\u63cf\u8ff0\u7684\u6295\u5f71\u79f0\u4e3a\u900f\u89c6\u6295\u5f71\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec2/#homogeneous-coordinates","title":"\u9f50\u6b21\u5750\u6807\u7684\u5f15\u5165(Homogeneous coordinates)","text":"<p>Note</p> <p>\u4e4b\u524d\u5b66\u4e60\u4e86\u591a\u6b21\u9f50\u6b21\u5750\u6807\u7684\u8868\u793a\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5c55\u5f00\u3002\u53ea\u9700\u6ce8\u610f\u5f15\u5165\u9f50\u6b21\u5750\u6807\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u5c06\u6295\u5f71\u8868\u793a\u4e3a\u7ebf\u6027\u53d8\u6362\uff08\u5373\u80fd\u591f\u4f7f\u7528\u77e9\u9635\u8868\u793a\uff09\u3002</p> <p>\u6df1\u5165\u4e86\u89e3\u9f50\u6b21\u5750\u6807\uff1aGAMES101 Lec3 https://www.bilibili.com/video/BV1X7411F744?p=3&amp;vd_source=49519b2e89bff31aec426f55ae7d4afa</p> <p>\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u8868\u793a\u7684\u6295\u5f71\u77e9\u9635\uff1a</p> <p>\\(\\begin{bmatrix} f&amp;0&amp;0&amp;0 \\\\  0&amp;f&amp;0&amp;0 \\\\ 0&amp;0&amp;1&amp;0  \\end{bmatrix} \\begin{bmatrix}x\\\\ y\\\\ z\\\\ 1\\end{bmatrix}=\\begin{bmatrix}fx\\\\ fy\\\\ z\\end{bmatrix}=\\begin{bmatrix}f\\frac{x}{z}\\\\ f\\frac{y}{z} \\\\ 1\\end{bmatrix}\\)</p> <p>Visualize Perspective Projection</p> <p></p>"},{"location":"AI/cv/icv/lec2/#projection-can-be-tricky","title":"Projection can be tricky","text":"<p>In perspective projection, straight lines are still straight, however, lenghth and angles are lost.</p>"},{"location":"AI/cv/icv/lec2/#vanishing-points","title":"Vanishing points","text":"<ul> <li>Any two parallel lines have the same vanishing point \\(v\\)</li> <li>The ray from C through \\(v\\) is parallel to the lines<ul> <li>\\(v\\) tells us the direction of the lines</li> <li>\\(v\\) may be outside the image frame or at infinity</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec2/#vanishing-lines","title":"Vanishing lines","text":"<p>The union of all of these vanishing points is the vanishing line</p>"},{"location":"AI/cv/icv/lec2/#perspective-distortion","title":"Perspective distortion","text":"<ul> <li>The exterior columns appear bigger(but why?)</li> <li>The distortion is not due to lens flaws.</li> </ul>"},{"location":"AI/cv/icv/lec2/#radial-distortion","title":"Radial distortion","text":"<ul> <li>Caused by imperfect lenses</li> <li>More noticeable for rays that pass through the edge of the lens.</li> <li>(two common categories)Pin cushion and Barrel</li> </ul>"},{"location":"AI/cv/icv/lec2/#orthographic-projectioin","title":"Orthographic projectioin","text":"<p>\\(\\begin{bmatrix} 1&amp;0&amp;0&amp;0 \\\\ 0&amp;1&amp;0&amp;0\\\\ 0&amp;0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\z\\\\1\\end{bmatrix}=\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</p> <p></p>"},{"location":"AI/cv/icv/lec2/#photometric-image-formation","title":"Photometric image formation","text":"<ul> <li>Describe the relation between the physical properies of 3D world and the color of 2d image.</li> </ul>"},{"location":"AI/cv/icv/lec2/#shutter-speed","title":"Shutter speed","text":"<ul> <li>control exposure time</li> <li>The pixel value is equal to the integral of the light intensity within the exposure time</li> </ul>"},{"location":"AI/cv/icv/lec2/#rolling-shutter-effect","title":"Rolling shutter effect","text":""},{"location":"AI/cv/icv/lec2/#color-spaces","title":"Color spaces","text":"<ul> <li>RGB</li> <li>HSV</li> </ul>"},{"location":"AI/cv/icv/lec2/#bayre-filter","title":"Bayre filter","text":"<p>Why more green?\u2014\u2014Human eyes are more sensitive to green.</p>"},{"location":"AI/cv/icv/lec2/#model-the-light-reflected-by-an-object-shading","title":"Model the light reflected by an object : Shading","text":"<ul> <li>Compute light reflected toward camera at a specific point</li> <li>Inputs:viewer direction, surface normal, light direction, surface parameters</li> </ul> <p>The light received per unit area is proportional to \\(cos\\theta = l\\cdot n\\)</p>"},{"location":"AI/cv/icv/lec2/#materialbrdfbidirectional-reflectance-distribution-function","title":"Material=BRDF(Bidirectional reflectance distribution function)","text":"<p>BRDF: \\(f_r(v_i;v_r;n;\\lambda)\\) $$ L_r(v_r;\\lambda)=\\int L_i(v_i;\\lambda)f_r(v_i;v_r;n;\\lambda)cos^{+}\\theta_idv_i $$</p>"},{"location":"AI/cv/icv/lec3/","title":"Lec 3 : Image Processing","text":"<p> \u7ea6 254 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec3/#image-processing-basics","title":"Image processing basics","text":""},{"location":"AI/cv/icv/lec3/#_1","title":"\u4e00\u4e9b\u57fa\u672c\u7684\u5904\u7406","text":"<ul> <li>\u589e\u52a0\u5bf9\u6bd4\u5ea6\uff08\u4f7f\u7528\"S curve\")</li> <li>\u6a21\u7cca\uff0c\u9510\u5316\uff0c\u8fb9\u7f18\u63d0\u53d6</li> </ul>"},{"location":"AI/cv/icv/lec3/#convolution","title":"convolution","text":"\\[ (f*g)(x)=\\int_{-\\infty}^{\\infty}f(y)g(x-y)dy \\]"},{"location":"AI/cv/icv/lec3/#discrete-2d-convolution","title":"Discrete 2D convolution","text":"<p>$$ (f*g)(x,y)=\\sum_{i,j=-\\infty}^{\\infty}f(i,j)I(x-i,y-j) $$ </p>"},{"location":"AI/cv/icv/lec3/#padding","title":"Padding","text":"<p>\u5982\u679c\u6ca1\u6709padding\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u7ecf\u8fc7\u5377\u79ef\u64cd\u4f5c\u4e4b\u540e\u5f97\u5230\u7684\u56fe\u50cfsize\u4f1a\u53d8\u5c0f\uff0c\u4e3a\u4e86\u5f97\u5230\u5927\u5c0f\u76f8\u540c\u7684\u56fe\u50cf\uff0c\u6211\u4eec\u9009\u62e9\u5728\u56fe\u50cf\u5468\u56f4\u8fdb\u884cpadding\u3002</p> <p></p>"},{"location":"AI/cv/icv/lec3/#guassian-blur","title":"Guassian blur","text":"<ul> <li>Obtain filter coefficients by sampling 2D Gaussian function \\(f(i,j)=\\frac{1}{2\\pi\\sigma^2}e^{-\\frac{i^2+j^2}{2\\sigma^2}}\\)</li> </ul>"},{"location":"AI/cv/icv/lec3/#sharpening","title":"Sharpening","text":"<p>\u9510\u5316\u64cd\u4f5c\u5c31\u662f\u5f80\u56fe\u50cf\u91cc\u6dfb\u52a0\u9ad8\u9891\u4fe1\u606f</p> <ul> <li>Let \\(I\\) be the original image</li> <li>High frequencies in image \\(I=I-blur(I)\\)</li> <li>Sharpened image = \\(I+(I-blur(I))\\)</li> </ul>"},{"location":"AI/cv/icv/lec3/#bilateral-filter","title":"Bilateral filter","text":"<p>removing noise while preserving image edges</p> <p></p> <p></p>"},{"location":"AI/cv/icv/lec3/#image-sampling","title":"Image sampling","text":""},{"location":"AI/cv/icv/lec3/#image-resizing","title":"Image resizing","text":""},{"location":"AI/cv/icv/lec3/#image-magnification","title":"Image magnification","text":""},{"location":"AI/cv/icv/lec3/#interpolation","title":"Interpolation","text":""},{"location":"AI/cv/icv/lec3/#nearest-neighbor-interpolation","title":"Nearest-neighbor interpolation","text":"<ul> <li>Not continuous</li> <li>Not smooth(\u5149\u6ed1\u51fd\u6570\uff1a\u51e0\u9636\u5bfc\u8fde\u7eed\u5c31\u79f0\u8be5\u51fd\u6570\u51e0\u9636\u5149\u6ed1)</li> </ul>"},{"location":"AI/cv/icv/lec3/#linear-interpolation","title":"Linear interpolation","text":""},{"location":"AI/cv/icv/lec3/#cubic-interpolation","title":"Cubic interpolation","text":"<p>For each interval: \u5e76\u4e0d\u662f\u5bf9\u6574\u4f53\u8fdb\u884c\u62df\u5408\uff0c\u800c\u662f\u6bcf\u4e24\u70b9\u9996\u5148\u62df\u5408\u7ebf\u6027\u51fd\u6570\uff0c\u975e\u7ebf\u6027\u9879\u7684\u5f15\u5165\u662f\u4e3a\u4e86\u4f7f\u66f2\u7ebf\u5149\u6ed1</p>"},{"location":"AI/cv/icv/lec3/#bilinear-interpolation","title":"Bilinear Interpolation","text":""},{"location":"AI/cv/icv/lec4/","title":"Lec4: Model fitting and Optimization","text":"<p> \u7ea6 773 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/icv/lec4/#optimization","title":"Optimization","text":"<p>\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u4e86\u4f18\u5316\u7684\u57fa\u672c\u8303\u5f0f\uff0c\u8be6\u89c1\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5c55\u5f00</p> <p>\u4e00\u4e2a\u6709\u8da3\u7684example\uff1aImage deblurring</p> <p>\u6211\u4eec\u5df2\u77e5\u6a21\u7cca\u56fe\u50cfY\u548c\u5377\u79ef\u6838F\uff0c\u9700\u8981\u901a\u8fc7\u4f18\u5316\u7684\u65b9\u6cd5\u5f97\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cfX</p> <p>\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u627e\u5230\u6e05\u6670\u7684\u56fe\u50cfX\uff0c\u4f7f\u5f97\u5b83\u505a\u6a21\u7cca\u5904\u7406\u540e\u4e0e\u5df2\u77e5\u7684\u56fe\u50cfY\u5dee\u522b\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e8e\u662f\u5f97\u5230\u76ee\u6807\u51fd\u6570\uff1a $$ \\mathop{min}_X \\Vert Y-FX\\Vert_2^2 $$</p>"},{"location":"AI/cv/icv/lec4/#model-fitting","title":"Model fitting","text":"<p>\u4e00\u4e2a\u6a21\u578b\u63cf\u8ff0\u95ee\u9898\u4e2d\u8f93\u5165\u548c\u8f93\u51fa\u7684\u5173\u7cfb\uff1a\u4f8b\u5982\u7ebf\u6027\u6a21\u578b\\(b=a^Tx\\) \u63cf\u8ff0\u8f93\u5165\\(a\\) \u548c\u8f93\u51fa \\(b\\) \u5173\u4e8e\u6a21\u578b\u53c2\u6570 \\(x\\) \u7684\u5173\u7cfb\u3002</p> <p>\u4f46\u5b9e\u9645\u7ed3\u679c\u5f88\u96be\u5b8c\u5168\u6ee1\u8db3\u6570\u5b66\u6a21\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u505a\u7684\u662f\u8fdb\u884c\u6a21\u578b\u62df\u5408\uff0c\u5373\u6211\u4eec\u6709\u4e00\u4e2a\u5148\u9a8c\u7684\u5047\u8bbe\uff08\u6570\u636e\u7b26\u5408\u54ea\u79cd\u6a21\u578b\uff09\uff0c\u7136\u540e\u4ece\u4ece\u6570\u636e\u96c6\u4e2d\u9884\u6d4b\u51fa\u6a21\u578b\u7684\u53c2\u6570\uff08\u8be5\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5b66\u4e60\uff09</p> <p>\u4e00\u4e2a\u7ecf\u5178\u7684\u65b9\u6cd5\uff1a\u6700\u5c0f\u4e8c\u4e58\u6cd5(Minimize the Mean Square Error(MSE)) $$ \\hat{x}=\\mathop{argmin}_x\\sum_i(b_i-a_i^Tx)^2 $$</p> <p>\u5982\u679c\u6211\u4eec\u5047\u8bbe\u6570\u636e\u4e2d\u7684\u566a\u58f0\u662f\u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0e\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u8054\u7cfb\u8d77\u6765</p>"},{"location":"AI/cv/icv/lec4/#maximum-likelihood-estimation","title":"Maximum Likelihood Estimation","text":"<p>\u9996\u5148\u5047\u8bbe\u6570\u636e\u670d\u4ece\u9ad8\u65af\u5206\u5e03 $$ b_i=a_i^T+n, n\\sim G(0,\\sigma) $$ \u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(x\\), \u89c2\u5bdf\u5230 \\((a_i,b_i)\\) \u7684\u4f3c\u7136\uff08\u53ef\u80fd\u6027\uff09\uff1a $$ P[(a_i,b_i)|x]=P[b_i-a_i^Tx]\\propto exp-\\frac{(b_i-a_i^Tx)^2}{2\\sigma^2} $$ \u5982\u679c\u6570\u636e\u70b9\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u90a3\u4e48\uff1a $$ P[(a_1,b_1)(a_2,b_2)\\cdots|x]=\\Pi_iP[b_i-a_i^Tx]\\propto exp\\frac{(b_i-a_i^Tx)^2}{2\\sigma^2}=exp-\\frac{\\Vert Ax-b\\Vert_2}{2\\sigma^2} $$</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u5373\u4e3a\u627e\u5230\\(x\\)\u80fd\u591f\u6700\u5927\u5316\u4f3c\u7136\u51fd\u6570\uff0c\u800c\u8fd9\u5373\u4e3a\u6700\u5c0f\u5316\\(\\Vert Ax-b\\Vert_2\\)</p> <p>\u56e0\u6b64MSE=MLE with Gaussian noise assumption</p>"},{"location":"AI/cv/icv/lec4/#numerical-methods","title":"Numerical methods","text":""},{"location":"AI/cv/icv/lec4/#recap-taylor-expansion","title":"Recap: Taylor expansion","text":"<ul> <li>First-order approximation</li> </ul> <ul> <li>Second-order approximation</li> </ul>"},{"location":"AI/cv/icv/lec4/#_1","title":"\u68af\u5ea6\u4e0b\u964d\u6cd5","text":""},{"location":"AI/cv/icv/lec4/#steepest-descent-method","title":"Steepest descent method","text":"<ul> <li>Advantage<ul> <li>Easy to implement</li> <li>Perform well when far from the minimum</li> </ul> </li> <li>Disadvantage<ul> <li>Converge slowly when near the minimum</li> <li>Waste a lot of computation</li> </ul> </li> </ul>"},{"location":"AI/cv/icv/lec4/#newton-method","title":"Newton method(\u8003\u8651\u4e86\u4e8c\u9636\u5bfc)","text":"<ul> <li>Do second-order expansion</li> </ul> \\[ F(x_k+\\Delta x)\\approx F(x_k)+J_F\\Delta x+\\frac{1}{2}\\Delta x^{T}H_F\\Delta x \\] <ul> <li>Find \\(\\Delta x\\) to minmize \\(F(x_k+\\Delta x)\\)</li> </ul> \\[ H_F\\Delta x+J_F^{T}=0 \\\\ \\Delta x=-H_F^{-1}J_F^{T}\\ (Newton Step) \\] <ul> <li>Advantage: fast convergence near the minimum</li> <li>Disadvantage: Hessian requires a lot of computation</li> </ul>"},{"location":"AI/cv/icv/lec4/#gauss-newton-method","title":"Gauss-Newton method","text":"<p>Useful for solving nonlinear least squares \\(\\hat{x}=arg \\mathop{min}_x\\Vert R(x)\\Vert_2^2\\)</p> <ul> <li>Instead of expanding \\(F(x)\\), we expand \\(R(x)\\)</li> </ul> \\[ \\Vert R(x_k+\\Delta x)\\Vert_2^2 \\approx \\Vert R(x_k)+J_k\\Delta x\\Vert_2^2=\\Vert R(x_k)\\Vert_2^2+2R(x_k)^TJ_R\\Delta x+\\Delta x^TJ_R^TJ_R\\Delta x \\] <ul> <li>Optimal direction</li> </ul> \\[ \\Delta x=-(J_R^TJ_R)^{-1}J_R^TR(x_k) \\] <p>\u5373\u4f7f\u7528\\((J_R^TJ_R)\\) \u6765\u8fd1\u4f3c\u4ee3\u66ff\\(H_F\\). \u5927\u5927\u51cf\u5c11\u8ba1\u7b97\u91cf</p> <ul> <li>Disadvantage: \\((J_R^TJ_R)\\)\u4e0d\u6b63\u5b9a\uff0c\u6240\u4ee5\u672a\u5fc5\u53ef\u9006</li> </ul>"},{"location":"AI/cv/icv/lec4/#levenberg-marquardt","title":"Levenberg-Marquardt","text":"\\[ \\Delta x=-(J_R^TJ_R+\\lambda I)^{-1}J_R^{T}R(x_k) \\] <p>The effect of \\(\\lambda\\)</p> <ul> <li>\\(\\lambda \\rightarrow \\infty\\)\uff1a Gradient descent, and stepsize is small</li> <li>\\(\\lambda \\rightarrow 0\\): Gauss-Newton step</li> </ul> <p>Advantage</p> <ul> <li>Start quickly(\u8fdc\u79bb\u76ee\u6807\u70b9\u65f6\u4f7f\u7528\u6700\u901f\u68af\u5ea6\u4e0b\u964d)</li> <li>Converge quickly(\u63a5\u8fd1\u76ee\u6807\u70b9\u65f6\u8fd1\u4f3c\u9ad8\u65af\u725b\u987f\u6cd5\uff0c\u4fdd\u8bc1\u6536\u655b\u901f\u5ea6\u5feb)</li> <li>\\(J_R^TJ_R+\\lambda I\\)\u6b63\u5b9a\uff0c\u4fdd\u8bc1\u9ad8\u65af\u725b\u987f\u6cd5\u6210\u7acb</li> </ul>"},{"location":"AI/cv/ml4360/","title":"ML4360","text":"<p> \u7ea6 34 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u8fd9\u662f\u6211\u5728\u5927\u4e00\u6691\u5047\u81ea\u5b66University of Tubingen\u7684 Computer Vision\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u4e3b\u8981\u4ecb\u7ecd\u57fa\u7840\u76843D computer vision\u77e5\u8bc6</p>"},{"location":"AI/cv/ml4360/Coordinate-Based_Networks/","title":"Coordinate-Based Networks","text":"<p> \u7ea6 93 \u4e2a\u5b57 </p>"},{"location":"AI/cv/ml4360/Coordinate-Based_Networks/#implicit-neural-representations","title":"Implicit Neural Representations","text":"<p>Can we learn 3D reconstruction from data**?</p>"},{"location":"AI/cv/ml4360/Coordinate-Based_Networks/#learning-based-3d-reconstruction","title":"Learning-based 3D Reconstruction","text":"<p>Voxels: Discretization of 3D space into grid</p> <ul> <li>Cubic memory, which leads to limited resolution</li> <li>Introduce Manhattan bias\uff08Disadvantage)</li> </ul> <p>Points: Discretization of surface into 3D points</p> <ul> <li>Does not model connectivity/topology</li> <li>Limited number of points</li> <li>Global shape description</li> </ul> <p>Meshes: Discretization into vertices and faces</p> <ul> <li>Limited number of vertices</li> <li>Require class-specific template -</li> <li>Leads to self-intersections</li> </ul> <p>This work:Key idea</p> <ul> <li>Do not represent 3D shape explicitly</li> <li>Instead, consider surface implicitly as desicion boundary of a non-linear classifier: $f_\\theta:\\mathbb{R}^3\\times $</li> </ul>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/","title":"Stereo Reconstruction","text":"<p> \u7ea6 122 \u4e2a\u5b57 </p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#preliminaries","title":"Preliminaries","text":"<p>How to bring images in a suitable configuration such that matching is fast? How to obtain depth from the actual measurements(so called disparities)?</p> <p>How to recover 3D from an image? occlusion, parallax, perspective, accomodation, stereopsis\u2026\u2026</p> <p>Why Binocular Stereopsis?</p> <ul> <li>a minimal configuration to percieve depth relatively robustly</li> </ul>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#two-view-stereo-matching","title":"Two-View Stereo Matching","text":"<p>Goal: Recovering the disparity for every pixel from the input images</p> <p>The disparity defined as the relative displacement between pixels in the two images</p> <p>Task: Construct a dense 3D model from two images of a static scene</p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#pipeline","title":"Pipeline","text":"<p>1.Calibrate cameras intrinsically and extrinsically 2.Rectify images given the calibration 3.Compute disparity map for reference image 4.Remove outliers using consistency/occulation test 5.Obtain depth from disparity using camera calibration 6.Construct 3D model</p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#image-rectification","title":"Image Rectification","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/","title":"Structure from Motion","text":"<p> \u7ea6 585 \u4e2a\u5b57  89 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#preliminaries","title":"Preliminaries","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/#camera-calibration","title":"Camera Calibration","text":"<ul> <li>Camera calibration is the process of finding the intrinsic/extrinsic parameters<ul> <li>First, the known calibration target is captured in different poses</li> <li>Second, features on the target are detected in the images</li> <li>Finally,the camera intrinsics and extrinsics are jointly optimized.</li> </ul> </li> </ul>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#feature-detection-and-description","title":"Feature Detection and Description","text":"<ul> <li>Point features describe the appearance of local,salient regions in an image</li> <li>They can be used to describe and match images taken from different viewpoints.</li> <li>They form the basis of sparse 3D reconstruction methods covered in the lecture</li> </ul> <p>Features should be invariant to perspective effects and illumination,and the same point should have similar vectors independent of pose/viewpoint</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#siftscale-invariant-feature-transform","title":"SIFT(Scale Invariant Feature Transform)","text":"<p>Question</p> <p>For now I could not fully undestand the essence of this algorithem, so the contente here are lost.</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#two-frame-sfm","title":"Two-frame SFM","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/#epipolar-geometry","title":"Epipolar Geometry","text":"<p>Goal:Recovery of camera pose from image correspondences</p> <p></p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#derivation-of-essential-matrix","title":"Derivation of essential matrix","text":"<p>Let \\(K_i \\in \\mathbb{R}^{3 \\times 3}\\) denote the camera matrix of camera \\(i\\)</p> <p>Let \\(\\tilde{x_i} = {K_i}^{-1} \\overline{x_i}\\) denote the local ray direction of pixel \\(\\overline{x_i}\\) in camera \\(i\\)</p> <p>We have: \\(\\tilde{x}_2 \\propto x_2 = Rx_1 + t \\propto R \\tilde{x}_1 + st\\)</p> <p>Taking the cross product of both sides with \\(t\\) we obtain: \\([t]_{\\times}\\tilde{x}_2 \\propto [t]_{\\times}R\\tilde{x}_1\\)</p> <p>Taking the dot product of both sides with \\(\\tilde{x}_2^{T}\\) yields: \\(\\tilde{x}_2^{T}[t]_{\\times}R\\tilde{x}_1 =0\\), which is the epipolar constraint, with essential matrix \\(\\tilde{E} = [t]_{\\times}R\\)</p> <p>\\(\\tilde{E}\\) maps a point \\(\\tilde{x}_1\\) in image 1 to the corresponding epipolar line in image 2:</p> <p>\\(\\tilde{l}_2=\\tilde{E}\\tilde{x}_1\\) as \\(\\tilde{x}_2^{T}\\tilde{l}_2=0\\), the epipolar line in image 1 is similar, \\(\\tilde{l}_1=\\tilde{E}^{T}\\tilde{x}_2\\)</p> <p>For any point \\(\\tilde{x}_1\\) in the first image ,the corresponding epipolar line in the second image passes through the epipole \\(\\tilde{e}_2\\) which therefore satisfied:  $$ \\tilde{e}_2^{T}\\tilde{l}_2 = \\tilde{e}_2^{T}\\tilde{E}\\tilde{x}_1=0 $$ for all \\(\\tilde{x}_1\\), It follows that : \\(\\tilde{e}_2^{T}\\tilde{E} = 0\\)</p> <p>Thus,\\(\\tilde{e}_2^{T}\\) is the left null-space of \\(\\tilde{E}\\)\\(. Similarly,\\)\\(\\tilde{e}_1^{T}\\) is the right null-space of \\(E\\)</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#estimating-the-epipolar-geometry","title":"Estimating the Epipolar Geometry","text":"<p>using 8-point algorithm</p> <pre><code>def compute_fundamental_matrix(keypoints1, keypoints2):\n''' \n    Computes the fundamental matrix from image coordinates using the 8-point \n    algorithm by constructing and solving the corresponding linear system.\n    Args:\n        keypoints1 (np.ndarray): Nx3 array of correspondence points in first \n            view in homogenous image coordinates.\n        keypoints2 (np.ndarray): Nx3 array of correspondence points in second \n            view in homogenous image coordinates.\n    Returns:\n        F (np.ndarray): 3x3 fundamental matrix.\n    '''\nnum_points = keypoints1.shape[0]\nassert(num_points &gt;= 8)\n# Assemble homogenous linear system\n# each correspondence yields one equation in the nine elements of F\nA = np.zeros([num_points, 9])\nfor i in range(num_points):\nA[i] = [keypoints1[i, 0]*keypoints2[i, 0],\nkeypoints1[i, 1]*keypoints2[i, 0],\nkeypoints2[i, 0],\nkeypoints1[i, 0]*keypoints2[i, 1],\nkeypoints1[i, 1]*keypoints2[i, 1],\nkeypoints2[i, 1],\nkeypoints1[i, 0],\nkeypoints1[i, 1],\n1,]\n# Solve the homogeneous linear system via SVD\nu, s, vh = np.linalg.svd(A)\nF = vh[-1].reshape(3, 3)\n# Force rank 2 by zeroing smallest singular value\n# see \"In defense of the 8-point algorithm\", Hartley, TPAMI 1997\nu, s, vh = np.linalg.svd(F)\ns[2] = 0\nF =  u @ (np.diag(s) @ vh)\n# return standardized fundamental matrix\nreturn F/F[2, 2]\n</code></pre>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#case-with-unknwon-intrinsics","title":"case with unknwon intrinsics","text":"<p>If the camera calibration \\(K_i\\) is unknown, we cannot use the local ray diretion.</p> <p>The essential matrix becomes \\(\\overline{x}_2^{T}K_2^{-T}\\tilde{E}K_1^{-1}\\overline{x}_1 = 0\\),where we get the fundamental matrix: $$ \\tilde{F}=K_2^{-T}\\tilde{E}K_1^{-1} $$</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#triangulation","title":"Triangulation","text":"<p>Given noisy 2D image observations, the two rays might not intersect in one point. We like to recover the 3D point \\(x\\) that is closest to the two rays.</p> <p>Let \\(\\tilde{x}_i^s=\\tilde P_i\\tilde{x}_w\\) denote the projection of  a 3D world point \\(\\tilde{x}_w\\) onto the image of the i'th camera \\(\\tilde{x}_i^s\\). We consider the cross product \\(\\tilde{x}_i^s \\times \\tilde {P}_i\\tilde{x}_w=0\\) and using \\(\\tilde{p}_{ik}^{T}\\) to denote the k/th row of the matrix \\(\\tilde{P}_i\\),we obtain:</p> <p>\\(\\begin{bmatrix}x_i^s \\tilde{p}_{i3}^{T}-\\tilde{p}_{i1}^{T}\\\\y_i^s \\tilde{p}_{i3}^{T}-\\tilde{p}_{i2}^{T}\\end{bmatrix}\\tilde{x}_w=0\\)</p> <p>Then using DLT.</p> <pre><code>def triangulate_point(keypoint1, keypoint2, K1, K2, R, t):\n''' \n    Triangulates world coordinates given correspondences from two views with\n    relative extrinsics R and t.\n    Args:\n        keypoints1 (np.ndarray): Nx3 array of correspondence points in first \n            view in homogenous image coordinates.\n        keypoints2 (np.ndarray): Nx3 array of correspondence points in second \n            view in homogenous image coordinates.\n        K1 (np.ndarray): The 3x3 calibration matrix K for the first \n            view/camera.\n        K2 (np.ndarray): The 3x3 calibration matrix K for the second\n            view/camera.\n        R (np.ndarray): 3x3 rotation matrix from first to second view.\n        t (np.ndarray): 3-d translation vector from first to second view.\n    Returns:\n        x_w (np.ndarray): Nx4 array of 3-d points in homogenous world \n            coordinates.\n    '''\n# Initialize extrinsics for reference view as identity transform\nR0 = np.eye(3)\nt0 = np.zeros([3, 1])\n# assemble projection matrix P0 for reference view\nP0 = assemble_projection_matrix(K1, R0, t0)\n# assemble camera matrix P0 for other view\nP1 = assemble_projection_matrix(K2, R, t)\nA = np.array(\n# A0\n[keypoint1[0] * P0[2].transpose() - P0[0].transpose(),\nkeypoint1[1] * P0[2].transpose() - P0[1].transpose(),\n# A1\nkeypoint2[0] * P1[2].transpose() - P1[0].transpose(),\nkeypoint2[1] * P1[2].transpose() - P1[1].transpose()]\n)\n# solve linear system\nu, s, vh = np.linalg.svd(A)\nx_w = vh[-1]\n# standardize and return\nreturn x_w/x_w[3]\n</code></pre>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#factorization","title":"Factorization","text":""},{"location":"AI/cv/ml4360/image_formation/","title":"Image Formation","text":"<p>key terms:how a 3D scene is projected onto a 2D image plane</p> <p></p>"},{"location":"AI/cv/ml4360/image_formation/#primitives-and-transformations","title":"Primitives and Transformations","text":"<p> \u7ea6 726 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"AI/cv/ml4360/image_formation/#2d-points","title":"2D Points","text":"<ul> <li>can be wirtten in inhomogeneous coordinates</li> <li>or in homogeneous coordinates</li> <li>projective space</li> </ul> <p>Homogeneous vectors that differ only by scale are considered equivalent and define an equivalence class</p> <ul> <li>An inhomogeneous vector x could be converted to a homogeneous vector -&gt;augmented vector</li> <li>Homogeneous points whose last element is \\(0\\) are called ideal points or points at infinity</li> </ul> <p></p>"},{"location":"AI/cv/ml4360/image_formation/#2d-lines","title":"2D Lines","text":"<ul> <li>using homogeneous coordinates \\(\\widetilde{l}=(a,b,c)^{T}\\)</li> <li>normalize \\(\\tilde{l}\\) </li> <li>line at infinity \\(\\tilde{l}_{\\infty} = (0,0,1)^{T}\\),which passes through all ideal points</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#cross-product","title":"Cross Product","text":""},{"location":"AI/cv/ml4360/image_formation/#2d-line-arithmetic","title":"2D Line Arithmetic","text":"<ul> <li>intersection of tow lines:\\(\\tilde{x} = \\tilde{l}_1 \\times \\tilde{l}_2\\)</li> <li>line joining two points:\\(\\tilde{l}=\\tilde{x}_1 \\times \\tilde{x}_2\\)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#3d-points-and-planes","title":"3D Points and Planes","text":"<ul> <li>the same as case in 2D</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#3d-lines","title":"3D Lines","text":"<ul> <li>less elegent</li> <li>linear combination of two points</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#2d-transformations","title":"2D Transformations","text":"<ul> <li>the action of a projective transformation on a co-vector can be represented by the transposed inverse of the matrix</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#direct-linear-transformation","title":"Direct Linear Transformation","text":"<p>We want a homography estimation using a set of 2D correspondences</p> <ul> <li>Homography estimation:find the relationship between two images of the same scene, but captured from different viewpoints</li> <li></li> </ul> <p>Stacking all equations into a \\(2N \\times 9\\) dimensional matrix \\(A\\) leads to the constrained least squares problem,whose solution is the singular vector corresponding to the smallest singulat value of \\(A\\)(i.e.,the last column of \\(V\\) when decomposing \\(A=UDV^T\\)) derivation</p>"},{"location":"AI/cv/ml4360/image_formation/#geometric-image-formation","title":"Geometric Image Formation","text":""},{"location":"AI/cv/ml4360/image_formation/#orthographic-projection","title":"Orthographic Projection","text":"<ul> <li>The x and y axes of the camera and image coordinate systems are shared</li> <li>Light rats are parallel to the z-coordinate of the camera coordinate system</li> <li>During projection, the z-coordinate is dropped,x and y remain the same  scaled orthorgraphy </li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#perspective-projection","title":"Perspective Projection","text":"<p> - The light ray passes through the camera center,the pixel \\(x_s\\) and the point \\(x_c\\) - Convention:the principal axis aligns with the z-axis - 3D points in camera coordinates are mapped to the image plane by dividing them by their z component and multiplying with thr focal length. - </p> <p>this projection is linear when using homogeneous coordinates</p> <ul> <li>To ensure positive pixel coordinates,a principal point offset is usually added,which moves the image coordinate system to the corner of the image plane. Now we can give the complete perspective projection model as follows: </li> <li>The left \\(3 \\times 3\\) submatrix is called calibration matrix \\(K\\)</li> <li>The parameters of \\(K\\) are called camera intrinsics</li> <li>The skew \\(s\\) arises due to the sensor not mouted perpendicular to the optical axis</li> <li>In practice,we often set \\(f_x =f_y\\) and \\(s=0\\)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#chaining-transformations","title":"Chaining Transformations","text":"<p>Full Rank Representation  The homogeneous vector \\(\\tilde{x}_s\\) is a 4D vector and must be normalized wrt. its 3rd entry to obtain inhomogeneous image pixels: \\(\\overline{x}_s = \\tilde{x}_s / z_s = (x_s/z_s,y_s/z_s,1,1/z_s)^{T}\\)</p>"},{"location":"AI/cv/ml4360/image_formation/#photometric-image-formation","title":"Photometric Image Formation","text":"<p>Discuss how an image is formed in terms of pixel intensities and colors - Light is emitted by one or more light sources and reflected of refracted at surfaces of objects in the scene Rendering Equation </p> <p>\\(n^Ts\\)  represents the inner product factor</p> <ul> <li> <p>Typical BRDFs have a diffuse and a specular component</p> <ul> <li>diffuse component scatters light uniformly in all directions</li> <li>specular component depends strongly on the outgoing light direction</li> </ul> <p></p> </li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#why-camera-lenses","title":"Why camera lenses?","text":"<ul> <li>Large and very small pinholes result in image blur</li> <li>small pinholes require long shutter times,which leads to motion blur</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#thin-lens-model","title":"Thin Lens Model","text":"<p> \\(\\frac{1}{z_s}+\\frac{1}{z_c}=\\frac{1}{f}\\)</p>"},{"location":"AI/cv/ml4360/image_formation/#depth-of-field","title":"Depth of Field","text":"<ul> <li>For \\(z_c \\rightarrow \\infty\\) ,we obtain \\(z_s=f\\)</li> <li>If the image plane is out of foucs,a 3D point projects to the circle of confusion c</li> <li>To control the size of \\(c\\),we change the lens aperture</li> <li>The allowable depth variation that limits the circle of confusion is called DOF and is a function of both the focus distance and the lens aperture <p>distance between the nearest and farthest objects that are acceptably sharp</p> </li> <li>f-number is defined as \\(N = \\frac{f}{d}\\)(\\(d\\): the aperture diameter)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#questionsnot-found-in-searching-engine","title":"Questions(Not Found in Searching Engine)","text":"<p>1.normalize \\(\\tilde{l} = (n_x,n_y,-d)^{T}\\) why minus \\(d\\)?</p> <p>2.DLT\uff1f 3.Under orthography,structure and motion can be estimated simultaneously using factorization methods(e.g.,via svm) 4.The skew \\(s\\) arises due to the sensor not mouted perpendicular to the optical axis,only affects x axis?</p>"},{"location":"AI/cv/ml4360/shape_from_x/","title":"Shape-from-X","text":"<p> \u7ea6 400 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"AI/cv/ml4360/shape_from_x/#shape-from-shading","title":"Shape-from-Shading","text":""},{"location":"AI/cv/ml4360/shape_from_x/#rendering-equation","title":"Rendering Equation","text":"<ul> <li>Typical BRDFs have a diffuse and a specular component</li> <li></li> </ul>"},{"location":"AI/cv/ml4360/shape_from_x/#simplifying-the-rendering-equation","title":"Simplifying the Rendering Equation","text":"<p>Dropping the deoendency on \\(\\lambda\\) and \\(p\\) for notational simplicity, and considering a single point light source located in direction \\(s\\), and assuming a purely diffuse material with albedo BRDF\\((s,v)\\) = \\(\\rho\\)</p> \\[ L_{out}(v)=\\rho\\cdot L_{in}\\cdot n^{T}s \\] <p></p> <ul> <li>For a fixed material and light source, the reflected light is a function of \\(n\\)</li> <li>\\(L_{out}=R(n)\\) is called reflectance map</li> <li>If we know \\(n\\) at each surface point, we can integrate the geometry</li> </ul> <p>SfS makes the following assumptions:</p> <ul> <li> <p>Diffuse material with spatially constant albedo \\(\\rho\\) </p> </li> <li> <ul> <li>Reduces number of material parameters to 1</li> </ul> </li> <li> <p>Known point light source at infinity</p> </li> <li> <ul> <li> <p>Keeps light direction \\(s\\) constant across all pixels</p> </li> <li> <p>Makes \\(s\\) independent of geometry</p> </li> </ul> </li> <li> <p>Known camera at infinity</p> </li> <li> <ul> <li> <p>Keeps view direction \\(v\\) constant across all pixels</p> </li> <li> <p>Makes \\(v\\) independent of geometry</p> </li> </ul> </li> </ul>"},{"location":"AI/cv/ml4360/shape_from_x/#gradient-space-representation","title":"Gradient Space Representation","text":""},{"location":"AI/cv/ml4360/shape_from_x/#photometric-stereo","title":"Photometric Stereo","text":"<ul> <li>Instead of smoothness constraints, add more observations per pixel.</li> <li>Take K images of the object from same viewpoint but with different point light source each.</li> <li>Capture K images, construct reflectance maps per pixel, find intersection</li> </ul>"},{"location":"AI/cv/ml4360/shape_from_x/#formulation","title":"Formulation","text":"<p>Assuming Lambertian reflectance and \\(L_{in}=1\\), the iimage intensity light is: $$ I=L_{out}=\\rho\\cdot n^{T}s=\\rho\\cdot s^{T}n $$ Given 3 observations, we can express this in matrix form:\\(\\begin{pmatrix}I_1\\\\I_2\\\\I_3\\end{pmatrix}=\\begin{pmatrix}s_1^{T}\\\\s_2^{T}\\\\s_3^{T}\\end{pmatrix}\\rho n\\)</p> <p>\\(\\rho n\\) denoted by \\(\\tilde{n}\\), solution is given by \\(\\tilde{n}=S^{-1}I, \\rho = \\Vert \\tilde{n}\\Vert_2, n= \\frac{\\tilde{n}}{\\rho}\\)</p> <p>However, when the linear system becomes rand-deficient, there exists no unique solution \\(\\tilde{n}=S^{-1}I\\), The least squares solution is given by:\\(\\tilde{n}=(S^{T}S)^{-1}S^{T}I\\)</p>"},{"location":"AI/cv/ml4360/shape_from_x/#volumetric-fusion","title":"Volumetric Fusion","text":""},{"location":"AI/cv/ml4360/shape_from_x/#sdf-representations","title":"SDF Representations","text":"<ul> <li>SDF models store the signed distance to the closest surface at each voxel</li> <li>The surface is hence represented implicitly as the zero level set</li> <li>Crucial advantage:</li> <li>Implicit modles allow for representing arbitrary topology</li> </ul>"},{"location":"AI/cv/ml4360/shape_from_x/#depth-to-sdf-conversion","title":"Depth-to SDF Conversion","text":"<ul> <li>As the distance to surface is unknown, approximate it with distance along ray</li> <li>This approximation is good only in the vincinity of the surface(often suffices)</li> </ul>"},{"location":"AI/cv/ml4360/shape_from_x/#volumetric-fusion_1","title":"Volumetric Fusion","text":"<ul> <li>After conversion, caluculate average of te discrete SDF fields</li> <li>The implicit surface will be an average of the two original ones</li> </ul>"},{"location":"AI/cv/ml4360/lab/lab1/","title":"Lab1 Image Formation","text":"<p> \u7ea6 347 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Abstract</p> <p>In this exercise, you will gain hands-on experience regarding the image formation process and geometric transformations.</p>"},{"location":"AI/cv/ml4360/lab/lab1/#perspective-projection","title":"Perspective Projection","text":""},{"location":"AI/cv/ml4360/lab/lab1/#a","title":"a","text":"<p>Implement the function <code>get camera intrinsics</code> which takes as input the focal lengths <code>fx, fy</code> and the principal point \\((c_x, c_y)^T\\)  and returns a 3 \u00d7 3 camera intrinsics matrix K.</p>"},{"location":"AI/cv/ml4360/lab/lab1/#b","title":"b","text":"<p>Implement the function <code>get perspective projection</code> which takes as input a 3D point in camera space \\(x_c\\) and the camera matrix K and it returns a two-dimensional point in screen space, hence the pixel coordinates \\(x_s\\) for the 3D point \\(x_c\\).</p>"},{"location":"AI/cv/ml4360/lab/lab1/#c","title":"c","text":"<p>Implement the function <code>get face color</code> which maps a normal vector n and a point light direction vector r to an RGB color value. We assume the light to be a point light source, i.e., the light source is infinitely small. You should follow the rendering equation discussed in the lecture where you can assume that the surface does not emit light, the BRDF term is always 1, and the incoming light \\(L\\) in is 1 for the point light source direction.</p>"},{"location":"AI/cv/ml4360/lab/lab1/#d","title":"d","text":"<p>Create a visualization showing the Dolly Zoom Effect. For this, linearly change the focal lengths between [10, 150] while you also translate the cube along the z-axis between [0.9, 5]</p>"},{"location":"AI/cv/ml4360/lab/lab1/#orthographic-projection","title":"Orthographic Projection","text":"<p>Implement the function <code>get orthographic projection</code> which maps a 3D point in camera space \\(x_c\\) to 2D pixel coordinates \\(x_s\\) using a orthographic projection.</p>"},{"location":"AI/cv/ml4360/lab/lab1/#panorama-stitching-using-dlt","title":"Panorama Stitching using DLT","text":""},{"location":"AI/cv/ml4360/lab/lab1/#a_1","title":"a","text":"<p>Implement the function <code>get_Ai</code> which takes as input the two homogeneous points \\(\\tilde{x}_i\\) and \\(\\tilde{x}_i^{'}\\) and returns the 2 \u00d7 9 matrix \\(A_i\\) discussed in the lecture. (Note: It\u2019s 2 \u00d7 9 and not 3 \u00d7 9 as you can drop the last row (see lecture).)</p>"},{"location":"AI/cv/ml4360/lab/lab1/#b_1","title":"b","text":"<p>Implement the function <code>get A</code> which uses the <code>get Ai</code>for all N correspondence pairs and concatenates them to return the 2N \u00d7 9 matrix A.</p>"},{"location":"AI/cv/ml4360/lab/lab1/#c_1","title":"c","text":"<p>Implement the function <code>get homography</code> which maps the N point correspondences to the homography H using the Direct Linear Transform (DLT) algorithm.</p>"},{"location":"cs/","title":"Computer Science","text":"<p> \u7ea6 2 \u4e2a\u5b57 </p>"},{"location":"cs/dm/","title":"\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840","text":"<p> \u7ea6 323 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201d\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u201c \u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a \u300aDiscrete Mathematics and its Application\u300b</p> <p>\u8bfe\u7a0b\u5185\u5bb9\uff1a\u79bb\u6563\u6570\u5b66\u7684\u7279\u70b9\u5c31\u662f\u77e5\u8bc6\u70b9\u96f6\u6563\uff08\u79bb\u6563\u6570\u5b66\u79bb\u6563\u5b66(^_^)\uff09\u4e3b\u8981\u5206\u4e3a\u547d\u9898\u903b\u8f91\u4e0e\u8bc1\u660e\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u6570\u8bba\uff0c\u8ba1\u6570\uff0c\u5173\u7cfb\uff0c\u56fe\u8bba\u51e0\u4e2a\u90e8\u5206\u3002\u56fd\u5185\u7684\u79bb\u6563\u4f3c\u4e4e\u5728\u903b\u8f91\u8bba\u8fd9\u4e00\u7ae0\u4e0a\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u800c\u6bd4\u8f83\u91cd\u8981\u7684\u751f\u6210\u51fd\u6570\uff0c\u56fe\uff0c\u6811\u76f8\u5173\u6982\u5ff5\u4e0e\u7b97\u6cd5\u4e0d\u80fd\u5f88\u8be6\u7ec6\u5168\u9762\u7684\u9610\u8ff0\u3002\u56e0\u6b64ZJU\u7684\u8fd9\u95e8\u8bfe\u7531\u4e8e\u8bfe\u7a0b\u8bbe\u7f6e\u4ee5\u53ca\u4efb\u8bfe\u6559\u5e08\u539f\u56e0\uff0c\u4f53\u9a8c\u5e76\u4e0d\u597d\u3002\u8fd9\u91cc\u63a8\u8350UCB\u7684CS70\uff0c\u867d\u7136\u8bfe\u7a0b\u5185\u5bb9\u4e0a\u4e0e\u8fd9\u95e8\u8bfe\u6709\u8f83\u5927\u533a\u522b\uff0c\u4f46\u662f\u8bfe\u7a0b\u7684note\u975e\u5e38\u8be6\u5c3d\uff0c\u8fd8\u6709discussion\u548chomework\u5e2e\u52a9\u638c\u63e1\u77e5\u8bc6\uff0c\u4f53\u9a8c\u6781\u4f73\u3002</p> <p>\u7531\u4e8e\u8fd9\u95e8\u8bfe\u4e0a\u8bfe\u6240\u5b66\u7684\u4e1c\u897f\u6709\u9650\uff0c\u4f46\u662f\u5c0f\u6d4b\u4e0e\u8003\u8bd5\u975e\u5e38\u7075\u6d3b\uff0c\u6240\u6709\u77e5\u8bc6\u70b9\u9700\u8981\u719f\u7ec3\u638c\u63e1\u5e76\u4e14\u5b66\u4f1a\u8fd0\u7528\u3002\u4ee5\u4e0b\u662f\u6211\u7684\u671f\u672b\u590d\u4e60\u624b\u5199\u7b14\u8bb0\uff0c\u5305\u542b\u4e86ZJU\u7248\u79bb\u6563\u7684\u77e5\u8bc6\u70b9\uff08\u81ea\u8ba4\u4e3a\u662f\u6bd4\u8f83\u5168\u4e86\uff09\u3002\u53ef\u4ee5\u5728\u590d\u4e60\u65f6\u7528\u6765\u8fc7\u77e5\u8bc6\u70b9\uff0c\u4f46\u662f\u5b66\u8fd9\u95e8\u8bfe\u5c3d\u91cf\u8ba4\u771f\u770b\u4e66\u548cslide\u3002</p> <p>\u79bb\u6563\u6570\u5b66\u671f\u672b\u590d\u4e60\u7b14\u8bb0</p>"},{"location":"cs/CLDF/","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840","text":"<p> \u7ea6 52 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u201d \u8bfe\u7a0b\u7b14\u8bb0</p> <p>\u6388\u8bfe\u6559\u5e08\uff1a\u8463\u4e9a\u6ce2</p> <p>\u53c2\u8003\u6559\u6750\uff1aLogic and Computer Design Fundamental, M. Morris R. Mano, Charles R. Kime, Tom Martin</p>"},{"location":"cs/CLDF/lec1/","title":"Digital Systems and Information","text":"<p> \u7ea6 1384 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"cs/CLDF/lec1/#digital-system","title":"Digital System","text":"<ul> <li>Takes a set of discrete information inputs and discrete internal information (system state) and generates a set of discrete information outputs.</li> </ul>"},{"location":"cs/CLDF/lec1/#tyoes-of-digital-systems","title":"Tyoes of Digital Systems","text":"<ul> <li>No state present:<ul> <li>Combinational Logic System</li> <li>Output = Fuction(Input)</li> </ul> </li> <li>State present:<ul> <li>State updated at discrete times: Sychronous Sequential System\uff08\u7cfb\u7edf\u91cc\u6709\u7edf\u4e00\u7684\u65f6\u949f, \u6bcf\u4e00\u79d2\u949f\u51b3\u5b9a\u8981\u4e0d\u8981\u66f4\u65b0, \u8fd9\u4e2a\u66f4\u65b0\u53ea\u4f1a\u5728\u6bcf\u79d2\u949f\u7684\u8fb9\u754c\u4ea7\u751f\uff09</li> <li>State updated at any time: Asynchronous Sequential System</li> <li>State = Function(State,Input)</li> <li>Output = Function(State) or Function(State,Input)</li> </ul> </li> </ul> <p>Example</p> <p>\u6c7d\u8f66\u4e0a\u7684\u91cc\u7a0b\u8868\uff0c\u8f93\u5165count up\u548creset\u4fe1\u53f7\uff0c\u5982\u679ccount up\u5c31\u628a\u91cc\u7a0b\u52a0\u4e00\uff0c\u8f93\u51fa\u662f\u53ef\u89c6\u5316\u7684\u91cc\u7a0b\u3002\u72b6\u6001\u5c31\u662f\u91cc\u7a0b\u8868\u91cc\u7684\u503c \u8be5\u6570\u5b57\u7cfb\u7edf\u662fasynchronous\u7684\uff0c\u56e0\u4e3a\u66f4\u65b0\u4fe1\u53f7\u7684\u65f6\u95f4\u4e0d\u4f9d\u8d56\u7edf\u4e00\u65f6\u949f\uff0c\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u53d1\u751f</p>"},{"location":"cs/CLDF/lec1/#embedded-systems","title":"Embedded Systems","text":"<ul> <li>Computers as integral parts of other products</li> <li>Examples of embedded computers\uff1a<ul> <li>Microcomputers</li> <li>Microcontrollers</li> <li>Digital signal processors</li> </ul> </li> <li>Block Diagram of Embedded Systems </li> </ul> <p>Note</p> <p>\u8fd9\u91cc\u9700\u8981\u5c06\u7269\u7406\u7684\u4fe1\u606f\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u5316\u4e3a\u5904\u7406\u5668\u53ef\u4ee5\u5904\u7406\u7684\u6570\u5b57\u4fe1\u53f7\u3002A-to-D:\u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cD-to-A\uff1a\u5904\u7406\u540e\u628a\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6a21\u62df\u4fe1\u53f7\uff0c\u8fd9\u4e24\u4e2ablock\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0e\u666e\u901a\u8ba1\u7b97\u673a\u7684\u4e3b\u8981\u533a\u522b</p> <p>Example: Temperature Measurement and Display</p> <p>\u5bf9\u4e8e\u7a7a\u8c03\u6765\u8bf4\uff0cinput \u662f\u4e00\u4e2a\u7535\u538b\u503c\uff08\u7531\u6e29\u5ea6\u4f20\u611f\u5668\u5c06\u4fe1\u53f7\u8f6c\u5316\u4e3a\u7535\u538b\uff09\uff0c\u4ee5\u4e0b\u662f\u7a7a\u8c03\u7406\u89e3\u7535\u538b\u53d8\u5316\u7684\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u5176\u4e2d\u5468\u671f\u6027\u91c7\u6837\u8fd0\u7528\u5230\u4e86\u9999\u519c\u91c7\u6837\u5b9a\u7406\uff1a\u4e3a\u4e86\u4e0d\u5931\u771f\u5730\u6062\u590d\u6a21\u62df\u4fe1\u53f7\uff0c\u91c7\u6837\u9891\u7387\u5e94\u5927\u4e8e\u7b49\u4e8e\u6a21\u62df\u4fe1\u53f7\u9891\u8c31\u4e2d\u6700\u9ad8\u9891\u7387\u76842\u500d\u3002</p>"},{"location":"cs/CLDF/lec1/#signal-examples-over-time","title":"Signal Examples Over Time","text":""},{"location":"cs/CLDF/lec1/#information-representation","title":"Information Representation","text":"<ul> <li>Information variables represented by physical quantities.</li> <li>For digital systems, the variables take on discreye values.</li> <li>Binary values are represented abstractly by:<ul> <li>digits 0 and 1</li> <li>words F and T</li> <li>words Low(L) and High(H)</li> <li>words On and Off</li> </ul> </li> <li>Binary values are represented by values or ranges of values of physical quantities.</li> </ul> <p>Why binary is most prevalent in digital systems? </p>"},{"location":"cs/CLDF/lec1/#number-systems-representation","title":"Number Systems - Representation","text":"<ul> <li>A number with radix \\(r\\) is represented by a string of digits: \\(A_{n-1}A_{n-2}\u2026\u2026A_1A_0.A_{-1}\u2026\u2026A_{-m+1}A_{-m}\\) in which \\(0\\leq A_i&lt;r\\) and . is the radix point</li> </ul> \\[ (Number)_r = (\\sum_{i=0}^{i=n-1}A_ir^i)+(\\sum_{j=-m}^{j=-1}A_jr^j) \\] <ul> <li>The string of digits represents the power series:</li> </ul>"},{"location":"cs/CLDF/lec1/#special-powers-of-2","title":"Special Powers of 2","text":"<ul> <li>\\(2^{10}\\) is Kilo, denoted \"K\"</li> <li>\\(2^{20}\\) is Mega, denoted \"M\"</li> <li>\\(2^{30}\\) is Giga, denoted \"G\"</li> <li>\\(2^{40}\\) is Tera, denoted \"T\"</li> </ul>"},{"location":"cs/CLDF/lec1/#binary-arithmetic","title":"Binary Arithmetic","text":"<ul> <li>Single Bit Binary Subtraction with Borrow </li> <li>Binart Multiplication </li> </ul>"},{"location":"cs/CLDF/lec1/#conversion-between-bases","title":"Conversion Between Bases","text":"<ul> <li>Convert the Integer Part</li> <li>Convert the Fraction Part Repeatedly multiply the fraction by the new radix and save the integer digits that result.  The digits for the new radix are the integer digits in order of their computation. If the new radix is &gt; 10, then convert all integers &gt; 10 to digits A, B, \u2026  </li> </ul> <p>\u8fd9\u91cc\u6ce8\u610f\u8865\u96f6\u65f6\u96f6\u7684\u4f4d\u7f6e\uff0c\u6574\u6570\u90e8\u5206\u4ece\u5c0f\u6570\u70b9\u5f00\u59cb\u5f80\u5de6\uff0c\u5c0f\u6570\u90e8\u5206\u4ece\u5c0f\u6570\u70b9\u5f00\u59cb\u5f80\u53f3\uff1a\\((11 \\:111\\:101.010\\:011\\:11)_2\\) = \\((011\\:111\\:101.010\\:011\\:110)_2\\)</p> <ul> <li>Join the two results with a radix point</li> </ul>"},{"location":"cs/CLDF/lec1/#binary-coding","title":"Binary Coding","text":"<ul> <li> <p>Numeric</p> <ul> <li>Must represent range of data needed</li> <li>Very desirable to represent data such that simple,straightforward computation for common arithmetic operations permitted</li> <li>Tight relation to binary numbers</li> </ul> </li> <li> <p>Non-numeric</p> <ul> <li>Greater flexibility since arithmetic operations not applied(\u7075\u6d3b\u6027\u662f\u6307\u4fdd\u8bc1\u7f16\u7801\u6620\u5c04\u5173\u7cfb\u552f\u4e00\u7684\u60c5\u51b5\u4e0b\u7684\u7f16\u7801\u90fd\u53ef\u4ee5\u79f0\u4f5c\u5408\u6cd5\u7f16\u7801)</li> <li>Not tied to binary numbers</li> </ul> </li> <li> <p>Number of bits requierd: Given M elements to be represented by a binary code, the minimum number of bits \\(n\\) needed satisfies the following relationships: \\(2^n\\ge M\\ge 2^{n-1}\\) \\(n=\\lceil log_2M\\rceil\\)</p> </li> </ul> <p>Example</p> <p>You can represent 4 elements in radix r=2 with n=2 digits:(00,01,10,11)</p> <p>Also, you can use n=4 digits: (0001,0010,0100,1000) (\"one hot\" code\uff0c\u8981\u6c42\u6bd4\u7279\u5411\u91cf\u4e2d\u53ea\u6709\u4e00\u4f4d\u662f1\uff0c\u4f7f\u7528\u8be5\u7f16\u7801\u7684\u597d\u5904\u662f\u51b3\u5b9a\u6216\u6539\u53d8\u72b6\u6001\u673a\u76ee\u524d\u7684\u72b6\u6001\u6210\u672c\u76f8\u5bf9\u8f83\u4f4e\uff0c\u5bb9\u6613\u8bbe\u8ba1\u4e5f\u5bb9\u6613\u68c0\u6d4b\u975e\u6cd5\u884c\u4e3a\uff0c\u7f3a\u70b9\u662f\u4fe1\u606f\u8868\u793a\u7387\u8f83\u4f4e)</p> <p>Decimal Codes-binary codes for decimal digits \u4ee5\u4e0b\u662f\u5e38\u89c1\u7684\u5bf9\u5341\u8fdb\u5236\u5341\u4e2a\u6570\u5b57\u8fdb\u884c\u7684\u7f16\u7801\uff1a </p>"},{"location":"cs/CLDF/lec1/#excess-3-code-and-84-2-1-code","title":"Excess 3 Code and 8,4,-2,-1 Code","text":"<p>\u5176\u4e2dExcess 3\u5373\u4e8c\u8fdb\u5236\u8868\u793a\u4e0a\u52a03 Excess 3 \u548c 8,4,-2,-1\u7f16\u7801\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u7f16\u7801\u6210\u5bf9\u51fa\u73b0\uff0c\\(i\\)\u548c\\(9-i\\)\u4e92\u4e3a\u53cd\u7801\uff0c\u8fd9\u4e48\u505a\u7684\u597d\u5904\u5c31\u662f\u5728\u901a\u4fe1\u4e2d\uff0c\u6570\u5b571-9\u51fa\u73b0\u7684\u6982\u7387\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u7b49\u53ef\u80fd\u7684\u51fa\u73b0\uff0c\u8fd9\u6837\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d0\u548c1\u7684\u9891\u7387\u4e5f\u662f\u63a5\u8fd1\u7684</p>"},{"location":"cs/CLDF/lec1/#binary-coded-decimalbcd","title":"Binary Coded Decimal(BCD)","text":"<ul> <li>The BCD code is the 8,4,2,1 code</li> <li>BCD is the weighted code, 8,4,2,1 are weights</li> <li>only encodes 0-9</li> <li>\\(1001(9)=1000(8)+0001(1)\\)</li> </ul> <p>Warning</p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610fconversion \u548c coding\u7684\u533a\u522b\uff1a 13=1101(This is conversion) 13: 0001|0011(This is coding)</p> <p>Why do we need BCD</p> <p>\u7535\u5b50\u8868\u4e2d\u6709\u65f6\u9488\u79d2, \u5982\u679c\u7528\u5341\u516d\u8fdb\u5236\u4fdd\u5b58\u65f6\u9488\u79d2, \u90a3\u4e48 \u52a0\u52309\u4ee5\u4e0a\u5f97\u5230 ABCD..., \u5f53\u6211\u4eec\u60f3\u8981\u663e\u793a\u8fd9\u4e9b\u503c\u65f6, \u6211\u4eec\u8981\u5148\u505a\u8fdb\u5236\u8f6c\u6362, \u518d\u663e\u793a(\u5982 A \u8f6c\u4e3a 10) \u8fd9\u5176\u4e2d\u8981\u505a\u9664\u6cd5\uff0c\u6548\u7387\u4f4e\u3002\u4f46\u662f\u7528\u4e24\u4f4dBCD\u7801\u8868\u793a, \u5c31\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u7ed3\u679c\u3002</p> <ul> <li>BCD Arithmetic \u5982\u679c\u5927\u4e8e9\uff0c\u5219\u52a0\u4e0a6\uff080110\uff09 </li> </ul>"},{"location":"cs/CLDF/lec1/#ascii-character-codes","title":"ASCII Character Codes","text":"<ul> <li>American Standord Code for Information Interchange</li> <li>It uses 7-bits to represent:<ul> <li>94 Graphic printing characters</li> <li>34 Non-printing characers</li> </ul> </li> <li><code>0</code>: \\(30_{16}\\)</li> <li><code>A</code>: \\(41_{16}\\)</li> <li><code>a</code>: \\(61_{16}\\)</li> <li><code>Delete</code>: all bits set</li> </ul>"},{"location":"cs/CLDF/lec1/#parity-bit-error-detection-codes","title":"Parity bit error-detection codes","text":"<ul> <li>Rebundancy (extra information), in the form of extra bits, can be incorporated into binary code words to detect and correct errors.</li> <li>Parity: an extra bit appended onto the code word to make the number of 1's odd or even. It can detect all single-bit errors<ul> <li>A code word has even parity if the number of 1's in the code word is even</li> <li>A code word has odd parity if the number of 1's in the code word is odd</li> </ul> </li> </ul> <p>Question</p> <p>\u4e0d\u592a\u7406\u89e3\u5177\u4f53\u673a\u5236</p>"},{"location":"cs/CLDF/lec1/#gray-code-decimal","title":"Gray Code-Decimal","text":"<p>\u53ef\u4ee5\u770b\u5230gray code\u7684\u6027\u8d28\u5c31\u662f\u76f8\u90bb\u7684\u4e24\u4f4d\u53ea\u76f8\u5dee\u4e00\u4e2abit\uff0c\u5176\u4f5c\u7528\u53ef\u4ee5\u5728optical shaft encoder\u4e2d\u5c55\u73b0\u51fa\u6765 </p> <p>\u5149\u5b66\u7f16\u7801\u5668\u5305\u542b\u900f\u660e\u533a\u57df\u548c\u4e0d\u900f\u660e\u533a\u57df\uff0c\u4e24\u4e2a\u76f8\u90bb\u533a\u57df\u989c\u8272\u8f6c\u53d8\u4ee3\u8868\u5176\u5bf9\u5e94\u7684binary code\u53d8\u5316\uff0c\u5f53\u4e09\u4e2a\u533a\u57df\u7684\u4f20\u611f\u5668\u4e0d\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\u65f6\uff08\u5373\u5b58\u5728\u5b89\u88c5\u8bef\u5dee\uff09\uff0c\u666e\u901a\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u4f1a\u51fa\u73b0\u4e2d\u95f4\u60c5\u51b5\uff0c\u800cgray\u7801\u7531\u4e8e\u76f8\u90bb\u53ea\u5dee\u4e00\u4e2abit\uff0c\u5219\u4e0d\u4f1a\u4ea7\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u4f8b\u5982\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801 011 \u548c 100 \u6765\u8bf4\uff0c\u8fd8\u6709\u53ef\u80fd\u51fa\u73b0 000, 001, 010, 110, 101, 111; \u4f46\u5bf9\u4e8e\u683c\u96f7\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u4ed6\u90fd\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7f16\u53f7\u3002</p>"},{"location":"cs/CLDF/lec1/#unicode","title":"Unicode","text":"<ul> <li>Unicode extends ASCII to 65536 universal characters codes</li> <li>is able to encode characters in world languages(Ascii only can deal with English)</li> <li>2 byte(16-bit) code words</li> </ul>"},{"location":"cs/CLDF/lec2/","title":"Combinational Logic Circuits","text":"<p> \u7ea6 2790 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p>"},{"location":"cs/CLDF/lec2/#gate-circuits-and-boolean-equations","title":"Gate Circuits and Boolean Equations","text":""},{"location":"cs/CLDF/lec2/#binary-logic-and-gates","title":"Binary Logic and Gates","text":"<ul> <li>Binary variables take on one of two values</li> <li>Logical operators operate on binary values and binary variables</li> <li>Basic logical operators are the logic functions AND(\\(\\cdot\\)), OR(+) and NOT(\\(\\overline{}\\)).</li> <li>Logic gates implement logic functions</li> </ul> <p>Truth Tables: a tabular listing of the values of a function for all possible combinations of values on its arguments</p> <p>Logic Function Implementation: </p> <p></p> <p>Logic Gates</p> <p></p> <p>NAND\u548cNOR\u662f\u6700\u57fa\u672c\u7684\u95e8\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u6240\u6709\u7684\u95e8\u7535\u8def</p> <p>Logical Gate Symbols and Behavior</p> <p></p> <p>Gate Delay</p> <ul> <li>In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously.</li> <li>The delay between an input change(s) and the resulting output change is the gate delay </li> </ul> <p></p>"},{"location":"cs/CLDF/lec2/#boolean-algebra","title":"Boolean Algebra","text":"<p>Basic identities:</p> <p></p> <p>Note</p> <p>1.\u5de6\u53f3\u516c\u5f0f\u662f\u5bf9\u5076\u7684(The dual of an algebraic expression is obtained by interchanging + and \u00b7 and interchanging 0\u2019s and 1\u2019s. )</p> <p>2.\u516c\u5f0f15\u7684\u7279\u6b8a\u6027</p> <p>Boolean Operator Precedence: Parenthese&gt;NOT&gt;AND&gt;OR</p> <p>Example: Proof\\(\\overline{(X+Y)}Z+X\\overline{Y}=\\overline{Y}(X+Z)\\) $$ \\overline{(X+Y)}Z+X\\overline{Y}=\\overline{Y}(X+\\overline{X}Z)=\\overline{Y}(X+\\overline{X})(X+Z) $$</p> <p>Complementing Functions: </p> <p>Use DeMorgan's Theorem to complement a function:</p> <ul> <li>Interchange AND and OR operators</li> <li>Complement each constant value and literal</li> </ul> <p>Note</p> <p>\u6ce8\u610f\u4fdd\u6301\u8fd0\u7b97\u987a\u5e8f\u4e0d\u53d8\uff08by adding parenthese)</p>"},{"location":"cs/CLDF/lec2/#canonical-forms","title":"Canonical Forms","text":"<p>\u4efb\u4f55\u903b\u8f91\u51fd\u6570\u53ef\u4ee5\u5199\u6210SOM\u6216POM\u7684\u5f62\u5f0f(Sum of Minterms or Product of Maxterms)</p>"},{"location":"cs/CLDF/lec2/#minterms-and-maxterms","title":"Minterms and Maxterms","text":"<ul> <li>Minterms are AND terms with every variable present in either true or complemented form. </li> <li>Maxterms are OR terms with every variable in true or complemented form.</li> <li>There are \\(2^n\\) minterms or maxterms for \\(n\\) variables.</li> </ul> <p>Note</p> <p>The index above(convert to binary form,with 1 corresponding to true) is important for describing which variables in the terms are true and which are complemented.  \u5373index\u662f\u4f7f\u5f97minterm=1(maxterm=0)\u7684\u552f\u4e00\u53d6\u503c\u3002</p> <p>Standard Order: All variables will be present in a minterm or maxterm and will be listed in the same order (usually alphabetically) </p>"},{"location":"cs/CLDF/lec2/#canonical-sum-of-minterms","title":"Canonical Sum of Minterms","text":"<ul> <li>Any boolean function can be expressed as a sum of minterms.</li> <li>Expand all terms first to explicitly list all minterms(\"ANDing\" any term missing a varaible \\(v\\) with a term \\((v+\\overline{v})\\))</li> </ul>"},{"location":"cs/CLDF/lec2/#canonical-product-of-maxterms","title":"Canonical Product of Maxterms","text":"<ul> <li>Any Boolean Function can be expressed as a product of maxterms</li> <li>expand all terms first to explicitly list all maxterms.  Do this by first applying the second distributive law , \u201cORing\u201d terms missing variable \\(v\\) with a term equal to \\(v\\cdot \\overline{v}\\) and then applying the distributive law again</li> </ul>"},{"location":"cs/CLDF/lec2/#standard-forms","title":"Standard Forms","text":"<ul> <li>Standard Sum-of-Products(SOP) form: equations are written as an OR of AND terms </li> <li>Standard Product-of-Sums(POS) form: equations are written as an AND of OR terms</li> </ul> <p>SOP and POS are two-level network of gates.</p>"},{"location":"cs/CLDF/lec2/#observations","title":"Observations","text":"<ul> <li>Canonical Forms (Sum-of-minterms, Product-of-Maxterms), or other standard forms (SOP, POS) differ in complexity</li> <li>Boolean algebra can be used to manipulate equations into simpler forms</li> <li>Simpler equations lead to simpler two-level implementations</li> </ul> <p>\u5373\u6211\u4eec\u5f15\u5165Canonical Forms\u662f\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528minterm\u6216maxterm\u8868\u8fbe\u6240\u6709\u903b\u8f91\u51fd\u6570\uff08\u4f7f\u7528index\u7684\u65b9\u5f0f\u4f7f\u8868\u8fbe\u5f0f\u770b\u8d77\u6765\u66f4\u7b80\u6d01\uff09\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5e03\u5c14\u4ee3\u6570\u7684\u5185\u5bb9\u5bf9canonical forms \u6216standord forms \u8fdb\u884c\u5316\u7b80\uff0c\u4f7f\u5f97\u903b\u8f91\u51fd\u6570\u66f4\u4e3a\u7b80\u6d01\uff0c\u51cf\u5c11\u95e8\u7535\u8def\u7684\u7ea7\u6570\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u5f15\u5165\u95e8\u7535\u8def\u4f18\u5316\u7684\u539f\u56e0\u3002</p>"},{"location":"cs/CLDF/lec2/#circuit-optimization","title":"Circuit Optimization","text":"<p>Goal: obtain the simplest implementation for a given function</p> <p>Optimization requires a cost criterion to measure the simplicity of a circuit:</p> <ul> <li>Literal cost</li> <li>Gate input cost</li> <li>Gate input cost with NOTs</li> </ul>"},{"location":"cs/CLDF/lec2/#two-level-optimization","title":"Two-Level Optimization","text":""},{"location":"cs/CLDF/lec2/#literal-cost","title":"Literal Cost","text":"<ul> <li>Literal : a variable or its complement</li> <li>Literal cost : the number of literal appearances in a Boolean expression          corresponding to the logic circuit diagram.</li> </ul>"},{"location":"cs/CLDF/lec2/#gate-input-cost","title":"Gate Input Cost","text":"<ul> <li>the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations.</li> <li>For SOP and POS equations, it can be found from the equation(s) by finding the sum of:<ul> <li>all literal appearances</li> <li>the number of terms excluding single literal terms(G), and optionally, the number of distinct complemented single literals(GN)</li> </ul> </li> </ul> <p>Example: \\(F=BD+A\\overline{B}C+A\\overline{B}\\overline{D}+AB\\overline{C} \\,,L=11,G=L+4=15,GN=G+3=18(only\\,BCD)\\)</p> <p></p> <p>\u77e5\u9053\u4e86\u5982\u4f55\u901a\u8fc7cost \u5224\u65ad\u95e8\u7535\u8def\u7684\u7b80\u6d01\u7a0b\u5ea6\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4f18\u5316\u7535\u8def\uff08\u5373\u5316\u7b80\u8868\u8fbe\u5f0f\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u5316\u7b80\uff0c\u4ec0\u4e48\u65f6\u5019\u5316\u7b80\u7684\u7ed3\u679c\u662f\u6700\u4f18\u7684\uff1f\u8fd9\u5c31\u9700\u8981\u5f15\u5165\u5361\u8bfa\u56fe\u3002</p>"},{"location":"cs/CLDF/lec2/#karnaugh-mapsk-map","title":"Karnaugh Maps(K-map)","text":"<p>A K-map is a collection of squares:</p> <ul> <li>Each square represents a minterm</li> <li>The collection of squares is a graphical  representation of a Boolean function</li> <li>Adjacent squares differ in the value of one variable</li> <li>Alternative algebraic expressions for the same function are derived by recognizing patterns of squares</li> </ul> <p>The K-map can be viewed as:</p> <ul> <li>A reorganized version of the truth table</li> <li>A topologically-warped Venn diagram as used to visualize sets in algebra of sets.</li> </ul>"},{"location":"cs/CLDF/lec2/#two-variable-maps","title":"Two Variable Maps","text":""},{"location":"cs/CLDF/lec2/#three-variable-maps","title":"Three Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u7531\u4e8eK-Map\u7684\u8981\u6c42\uff0c\u76f8\u90bb\u7684\u683c\u5b50\u53ea\u80fd\u5dee\u4e00\u4f4d\uff0c\u6240\u4ee5\u6ce8\u610fMinterm\u7684\u987a\u5e8f0,1,3,2\uff0c4,5,7,6</p> <p>Alternative Map Labeling:</p> <p></p> <p>\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5de6\u56fe\u7684\u6807\u8bc6\u65b9\u6cd5</p> <p>Example: </p> <p></p> <p>Combining Squares</p> <p>By combining squares, we reduce number of literals in a product term, reducing the literal cost, thereby reducing the other two cost criteria.</p> <p>\u6ce8\u610f\u53ea\u80fd\u753b\\(2^n\\)\u5927\u5c0f\u7684squares</p> <p>On a 3-variable K-Map:</p> <ul> <li>One square represents a minterm with three variables</li> <li>Two adjacent squares represent a product term with two variables</li> <li>Four \u201cadjacent\u201d terms represent a product term with one variable</li> <li>Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1.</li> </ul> <p>Example:</p> <p></p> <ul> <li>Reduced literal product terms for SOP standard forms correspond to rectangles on K-maps containing cell counts that are powers of 2. </li> <li>Topological warps of 3-variable K-maps that show all adjacencies:(\u5373\u53ef\u4ee5\u628a\u56fe\u5377\u8d77\u6765\uff0c\u4e24\u4e2a\u8fb9\u8fb9\u5982\u679c\u90fd\u662f1\u4e5f\u53ef\u5708\u5708)</li> </ul> <p></p> <p>\u5316\u7b80\u601d\u8def\uff1a\u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9)</p> <p></p>"},{"location":"cs/CLDF/lec2/#four-variable-maps","title":"Four Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u987a\u5e8f\u548c\u4f4d\u7f6e\uff01</p> <p>and \u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5708\uff080\uff0c2\uff0c8\uff0c10\uff09</p>"},{"location":"cs/CLDF/lec2/#dont-cares-in-k-maps","title":"Don't Cares in K-Maps","text":"<p>Sometimes  a function table or map contains entries for which it is known:</p> <ul> <li>the input values for the minterm will never occur</li> <li>the output value for the minterm is not used</li> </ul> <p>In these cases the output value is defined as a \u201cdon't care\u201d, By placing \u201cdon't cares\u201d ( an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered.</p> <p>Example :  A logic function having the binary codes for the BCD digits as its inputs. Only the codes for 0 through 9 are used.  The six codes, 1010 through 1111 never occur, so the output values for these codes are \u201cx\u201d to represent \u201cdon\u2019t cares.\u201d</p> <p></p> <p>\u5bf9\u4e8e\u65e0\u5173\u9879\uff0c\u5708\u4e0e\u4e0d\u5708\u53d6\u51b3\u4e8e\u600e\u6837\u624d\u80fd\u628a\u5361\u8bfa\u56fe\u5316\u4e3a\u6700\u7b80\u3002</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u66f4\u719f\u6089minterm, \u6240\u4ee5\u8003\u8651\u5148\u5f97\u5230SOP\u540e\u53d6\u53cd\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u6b64\u65f6\u5708\u5f97\u662f\u7a7a\u683c\u800c\u975e1\uff01</p>"},{"location":"cs/CLDF/lec2/#systematic-simplification","title":"Systematic Simplification","text":"<ul> <li>A Prime Implicant is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.</li> <li>A prime implicant is called an Essential Prime Implicant if it is the only prime implicant that covers (includes) one or more minterms.</li> </ul> <p>\u5373\u5982\u679c\u67d0\u4e2a \"1\" \u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\uff08\u8fd9\u4e2a\u5708\u5708\u4e00\u5b9a\u6709\uff09</p> <p></p> <p>Example:</p> <p></p> <p>Prime Implicants are AB, B C' D', A' C' D', A' B' D', A' B' C, A' C D, B C D. only AB is essential.</p>"},{"location":"cs/CLDF/lec2/#optimization-algorithmsummary","title":"Optimization Algorithm(Summary)","text":"<ul> <li>Find all prime implicants.</li> <li>Include all essential prime implicants in the solution</li> <li>Select a minimum cost set of non-essential prime implicants to cover all minterms not yet covered</li> <li>Selection Rule: Minimize the overlap among prime implicants as much as possible. In particular, in the final solution, make sure that each prime implicant selected includes at least one minterm not included in any other prime implicant selected.</li> </ul>"},{"location":"cs/CLDF/lec2/#multi-level-circuit-optimization","title":"Multi-Level Circuit Optimization","text":"<p>\u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46\u6210\u672c\u9ad8\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u8981\u6c42\u975e\u5e38\u4f4e\u7684\u5ef6\u8fdf\uff0c\u5c31\u8003\u8651\u4f7f\u7528\u903b\u8f91\u51fd\u6570\u5c06\u8868\u8fbe\u5f0f\u5316\u7b80\uff0c\u5c06\u4e24\u7ea7\u95e8\u8f6c\u53d8\u4e3a\u591a\u7ea7\u7535\u8def\u3002</p>"},{"location":"cs/CLDF/lec2/#additional-gates-and-circuits","title":"Additional Gates and Circuits","text":""},{"location":"cs/CLDF/lec2/#integrated-circuits","title":"Integrated Circuits","text":"<p>Integrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.</p> <p>Terminology-Levels of chip integration\uff08\u7528\u95e8\u4e2a\u6570\u8861\u91cf\u89c4\u6a21\uff09</p> <ul> <li>SSI(small-scale integrated)-fewer than 10 gates</li> <li>MSI(medium-scale integrated)-10 to 100 gates</li> <li>LSI (large-scale integrated) - 100 to thousands of gates</li> <li>VLSI(very-large-scale-integrated)-thousands to 100s of millions of gates</li> </ul> <p>Technology Parameters</p>"},{"location":"cs/CLDF/lec2/#fan-in","title":"Fan-in(\u6247\u5165\u7cfb\u6570)","text":"<p>the number of inputs available on a gate,\u5373\u4e00\u4e2a\u95e8\u8f93\u5165\u7aef\u7684\u4e0a\u9650</p>"},{"location":"cs/CLDF/lec2/#fan-out","title":"Fan-out(\u6247\u51fa\u7cfb\u6570)","text":"<p>the number of standard loads driven by a gate output</p>"},{"location":"cs/CLDF/lec2/#cost","title":"Cost","text":"<p>The cost of a gate is proportional to the chip area occupied by the gate, the gate area is roughly proportional to the number and size of transistors and the amount of wiring connecting them, ignoring the wiring area, the gate area is roughly proportional to the gate input count, so gate input count can be a rough measure of gate cost.</p>"},{"location":"cs/CLDF/lec2/#propagation-delay","title":"Propagation Delay","text":"<p>the time for a change on an input of a gate to propagate to the output. - Delay is usually measured at the 50% point with respect to the H and L output voltage levels.\uff08\u8f93\u5165\u7535\u538b\u6539\u53d8\u7684\u4e2d\u70b9\u5230\u8f93\u51fa\u7535\u538b\u6539\u53d8\u7684\u4e2d\u70b9\uff09 - High-to-low(\\(t_{PHL}\\)) and low-to-high(\\(t_{PLH}\\)) output signal changes may have different propagation delays.(\u6ce8\u610f\u662f\u8f93\u51fa\u7aef\uff01\uff01) - \u5b9a\u4e49\u4f20\u8f93\u5ef6\u8fdf\\(t_{pd}=\\frac{t_{PHL}+t_{PLH}}{2}\\)</p> <p></p> <p>Delay Mode - Transport delay: a change in the output in response to a change on the inputs occurs after a fixed specified delay - Inertial delay - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time, the output changes do not occur.(\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\u4f1a\u88ab\u6d88\u9664\u6389)</p> <p></p> <p>\u5728inertial delay\u4e2d\uff0cab,de\u8109\u51b2\u53d8\u5316\u65f6\u95f4\u5c0f\u4e8erejection time\uff0c\u56e0\u6b64\u4e0d\u4f1a\u53d1\u751f</p> <p>Circuit Delay \u5728\u95e8\u4e0a\u6807\u6570\u5b57\u8868\u793a\u8be5\u95e8\u7684\u4f20\u8f93\u5ef6\u8fdf\u65f6\u95f4</p> <p></p> <ul> <li>\u6700\u5f00\u59cbS\u4ece0\u53d8\u4e3a1\uff0c0.9s\u540eY\u4ece0\u53d8\u4e3a1</li> <li>\u5f53S\u4ece1\u53d8\u4e3a0\uff0c\u4e0a\u9762\u7684\u95e80.6s\u540e\u53d8\u4e3a1\uff0c\u4e0b\u9762\u7684\u95e80.4s\u540e\u53d8\u4e3a0\uff0c\u65450.9s\u540eY\u5148\u53d8\u4e3a0\uff0c\u518d\u8fc70.2s\u53d8\u4e3a1(\u7531\u4e8e\u4e24\u6761\u4f20\u8f93\u8def\u5f84\u5bfc\u81f4\u5728\u6ce2\u5f62\u56fe\u4e2d\u51fa\u73b0\u5c16\u5cf0\uff0c\u79f0\u4e4b\u4e3a\u7535\u8def\u7684\u7ade\u4e89\u4e0e\u5192\u9669)</li> </ul> <p>Fan-out and Delay The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay SL(Standard Load): \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5373\u5e26\u52a8\u4e00\u4e2a\u975e\u95e8\u9700\u8981\u591a\u5c11\u7684\u8d1f\u8f7d</p>"},{"location":"cs/CLDF/lec2/#costperformance-tradeoffs","title":"Cost/Performance Tradeoffs","text":""},{"location":"cs/CLDF/lec2/#other-gate-types","title":"Other Gate Types","text":"<p>Gate classifications</p> <ul> <li>Primitive gate: a gate that can be described using a single primitive operation type (AND or OR) plus an optional inversion(s).</li> <li>Complex gate - a gate that requires more than one primitive operation type for its description</li> </ul>"},{"location":"cs/CLDF/lec2/#buffer","title":"Buffer","text":"<ul> <li>A buffer is a gate with the function \\(F=X\\)</li> <li>In terms of Boolean function, a buffer is the same as a connection!</li> <li>The reason we use it: A buffer is an electronic amplifier used to improve circuit voltage levels and increase the speed of circuit operation(\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf).</li> </ul>"},{"location":"cs/CLDF/lec2/#nand-gate","title":"NAND Gate","text":"<p>Applying DeMorgan's Law gives Invert-OR(NAND)</p> <p></p> <ul> <li>AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier.</li> <li>A NAND gate with one input degenerates to an inverter.</li> </ul>"},{"location":"cs/CLDF/lec2/#nor-gate","title":"NOR Gate","text":"<p>Applying DeMorgan's Law gives Invert-AND(NOR)</p> <p></p> <ul> <li>OR-Invert and Invert-AND both represent the NOR gate. Having both makes visualization of circuit function easier.</li> <li>A NOR gate with one input degenerates to an inverter.</li> </ul> <p></p> <ul> <li> <p>The NOR gate and the NAND gate is a natural implementation for some technologies other than CMOS in terms of chip area and speed.</p> </li> <li> <p>They are universal gate-a gate type that can implement any Boolean function.</p> </li> <li>They usually doesn't have a operation symbol defined(\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4e0d\u65b9\u4fbf\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4e0e\u6216\u975e\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\uff0c\u6700\u540e\u7535\u8def\u5b9e\u73b0\u65f6\u8f6c\u5316\u4e3a\u4e0e\u975e\u548c\u6216\u975e\u95e8)</li> </ul>"},{"location":"cs/CLDF/lec2/#exclusive-orexclusive-nor","title":"Exclusive OR/Exclusive NOR","text":"<p>Uses for the XOR and XNORs gate include:</p> <ul> <li>Adders/subtractors/multipliers</li> <li>Counters/incrementers/decrementers</li> <li>Parity generators/checkers</li> </ul> <p>Definitions</p> <p></p> <ul> <li>XOR function: \\(X\\oplus Y=X\\overline{Y}+\\overline{X}Y\\) (X or Y, but not both)</li> <li>XNOR function(known as equivalence): \\(\\overline{X\\oplus Y}=XY+\\overline{X}\\overline{Y}\\)</li> <li>XOR and XNOR gates do no exist for more than two inputs. Instead, they are replaced by odd and even functions. </li> </ul> <p></p> <p>Implementations</p> <p></p>"},{"location":"cs/CLDF/lec2/#odd-and-even-functions","title":"Odd and Even Functions","text":"<p>The XOR function can be extended to 3 or more variables. For more than 2 variables, it is called an odd function or modulo 2 sum (Mod 2 sum), not an XOR\uff0cthe complement of the odd function is the even function.</p> <ul> <li>The odd and even functions on a K-map form \u201ccheckerboard\u201d patterns.\uff08\u9ed1\u767d\u68cb\u76d8\u7684\u6837\u5b50\uff09</li> <li>The 1s of an odd function correspond to minterms having an index with an odd number of 1s.</li> <li>The 1s of an even function correspond to minterms having an index with an even number of 1s</li> </ul> <p>Implementation</p> <p></p> <p>Recall: Parity Generators and Checkers</p> <p></p> <p>\u5bf9\u7b2c\u4e00\u7ae0\u4ecb\u7ecd\u7684\u5947\u5076\u6821\u9a8c\u7801\u7684\u673a\u7406\u6709\u4e86\u5f88\u597d\u7684\u89e3\u91ca\uff1a \u5047\u8bbeX,Y,Z\u5206\u522b\u4e3a0,0,1. \u56e0\u6b64\u6211\u4eec\u901a\u8fc7\\(P=X\\oplus Y\\oplus Z\\)\u6784\u9020\u51fa\u5076\u6821\u9a8c\u7801(X,Y,Z,P\u4e2d\u67091\u7684\u4e2a\u6570\u4e3a\u5076\u6570)\uff0c\u56e0\u6b64\\(E=X\\oplus Y\\oplus Z\\oplus P\\)\u5e94\u8be5\u4e3a\\(0\\), \u82e5E\u8f93\u51fa\u4e3a1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u4f20\u8f93\u4e2d\u67d0\u4e00\u4f4d\u51fa\u73b0\u4e86\u9519\u8bef\u3002</p> <p></p>"},{"location":"cs/CLDF/lec2/#hi-impedance-outputs","title":"Hi -Impedance Outputs","text":"<p>Logic gates introduced thus far\uff1a</p> <ul> <li>have 1 and 0 output values</li> <li>cannot have their outputs connected together</li> <li>transmit signals on connections in only one direction</li> </ul> <p>Three-state logic adds a third logic value, Hi-Impedance (Hi-Z), giving three states: 0, 1, and Hi-Z on the outputs.</p> <p>Hi-Z:</p> <ul> <li>The Hi-Z value behaves as an open circuit, which means the output appeas to be disconnected</li> <li>It is as if a switch between the internal circuitry and the output has been opened.</li> </ul> <p>3-state buffer</p> <p></p> <p><code>IN</code>: the data input, <code>EN</code>: the control input</p> <ul> <li>For <code>EN = 0</code>, regardless of the value on <code>IN</code> (denoted by X), the output value is Hi-Z.</li> <li>For <code>EN = 1</code>, the output value follows the input value.</li> </ul> <p>\u5f53\u6211\u4eec\u60f3\u628a\u591a\u4e2a\u95e8\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u65f6\uff0c\u5e94\u8be5\u4fdd\u8bc1\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u95e8\u5177\u6709\u6709\u6548\u8f93\u51fa\uff08\u4e0d\u7136\u4f1a\u70e7\u574f\u7535\u8def\uff09</p> <p>3-State Logic Circuit</p> <p></p> <p>\u8be5\u4e09\u6001\u903b\u8f91\u95e8\u7684<code>EN0</code>\u548c<code>EN1</code>\u5c31\u4e0d\u4f1a\u540c\u65f6\u4f7f\u80fd</p>"},{"location":"cs/ds/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p> \u7ea6 21 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u7ed3\u6784\u57fa\u7840\u201d \u8bfe\u7a0b\u7b14\u8bb0</p>"},{"location":"cs/ds/lec1/","title":"Algorithm Analysis","text":"<p> \u7ea6 373 \u4e2a\u5b57  49 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/ds/lec1/#definition","title":"Definition","text":"<p>An algorithm is a finite set of instructions that, if followed, accomplishes a particular task. In addition, all algorithms must satisfy the following criteria:</p> <ul> <li>Input</li> <li>Output</li> <li>Definiteness</li> <li>Finiteness</li> <li>Effectiveness</li> </ul> <p>Note</p> <p>A program is written in some programming language, and does not have to be infinte(operation system) An algorithm can be described by human languages, flow charts, some programming languages, or pseudo-code.</p>"},{"location":"cs/ds/lec1/#what-to-analyze","title":"What to Analyze","text":"<ul> <li>Machine &amp; compiler-dependent run times</li> <li>Time and space complexities: machine and compiler-independent</li> </ul> <p>Assumptions:</p> <ul> <li>instructions are executed sequentially</li> <li>each instruction is simple, and takes exactly one time unit</li> <li>integer size is fixed and we have infinite memory</li> </ul> <p>Typically the following two functions are analyzed: \\(T_{avg}(N)\\) and  \\(T_{worst}(N)\\)</p> <p>Example: \\(T_{sum}(n)=2n+3\\)</p> <pre><code>float sum(float list[],int n){\nfloat tempsum = 0; /*count = 1*/\nint i;\nfor(i=0;i&lt;n;i++)/*count++*/\ntempsum += list[i];/*count++*/\nreturn tempsum;/*count++*/\n}\n</code></pre>"},{"location":"cs/ds/lec1/#asymptotic-notation","title":"Asymptotic Notation","text":"<p>\\(T(N)=O(f(N))\\): if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\le c \\cdot f(N)\\) for all \\(N \\geq n_0\\)</p> <p>\\(T(N)=\\Omega (g(N))\\): if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\geq c \\cdot g(N)\\) for all \\(N\\geq n_0\\)</p> <p>\\(T(N)=\\Theta(h(N))\\): iff \\(T(N)=O(h(N))\\) and \\(T(N)=\\Omega (h(N))\\)</p> <p>\\(T(N)=o(p(N))\\): if \\(T(N)=O(p(N))\\) and \\(T(N)\\neq \\Theta (p(N))\\)</p>"},{"location":"cs/ds/lec1/#rules-of-asymptotic-notation","title":"Rules of Asymptotic Notation","text":"<p>If \\(T_1(N)=O(f(N))\\) and \\(T_2(N)=O(g(N))\\), then:</p> <ul> <li>\\(T_1(N)+T_2(N)=max(O(f(N)),O(g(N)))\\)</li> <li>\\(T_1(N)\\times T_2(N)=O(f(N)\\times g(N))\\)</li> </ul> <p>If \\(T(N)\\) is a polynomial of  degree \\(k\\), then \\(T(N)=\\Theta (N^k)\\)</p> <p>\\(log^kN=O(N)\\) for any constant \\(k\\). This tells us that logarithms grow very slowly</p> <p>Note</p> <p>When comparing the complexities of two programs asymptotically, make sure that N is sufficiently large.</p>"},{"location":"cs/ds/lec1/#compare-the-algorithms","title":"Compare the Algorithms","text":"<p>Given(possibly negative) integers \\(A_1,A_2,\u2026\u2026,A_N\\) , find the maximum value of \\(\\sum_{k=i}^jA_k\\) (\u6700\u5927\u5b50\u6570\u7ec4)</p>"},{"location":"cs/ds/lec1/#algorithm-1-on3","title":"Algorithm 1: \\(O(N^3)\\)","text":"<pre><code>int MaxSubsequenceSum( const int A[], int N){\nint ThisSum, MaxSum, i,j,k;\nMaxSum = 0;\nfor(int i=0;i&lt;N;i++){\nfor(j=i;j&lt;N;j++){\nThisSum = 0;\nfor(k=i;k&lt;=j;k++){\nThisSum += A[k];\nif(ThisSum &gt; MaxSum){\nMaxSum = ThisSum;\n}\n}\n}\n}\nreturn MaxSum;\n}\n</code></pre>"},{"location":"cs/ds/lec1/#algorithm2-on2","title":"Algorithm2: \\(O(N^2)\\)","text":"<pre><code>int MaxSubsequenceSum(const int A[], int N) {\nint ThisSum, MaxSum, i ,j;\nMaxSum = 0;\nfor(int i=0;i&lt;N;i++){\nThisSum = 0;\nfor(j=i;j&lt;N;j++){\nThisSum+ = A[j];\nif(ThisSum &gt; MaxSum)\nMaxSum = ThisSum;\n}\n}\nreturn MaxSum;\n} </code></pre>"},{"location":"cs/ds/lec1/#algorithm3-divide-and-conquer","title":"Algorithm3: Divide and Conquer","text":"\\[ \\begin{align} T(N)&amp;= 2T(N/2)+cN \\\\ &amp;=2[2T(N/2^2)+cN/2]+cN\\\\&amp;=2^kO(1)+ckN \\quad where  N/2^k=1 \\\\ &amp;=O(NlogN) \\end{align} \\]"},{"location":"cs/ds/lec1/#algorithm4-on-line-algorithm-tnon","title":"Algorithm4: On-line Algorithm  \\(T(N)=O(N)\\)","text":"<pre><code>int MaxSubsequenceSum( const int A[], int N ){\nint ThisSum, MaxSum,j;\nThisSum = MaxSum = 0;\nfor(j=0;j&lt;N;j++){\nThisSum += A[j];\nif(ThisSum &gt; MaxSum)\nMaxSum = ThisSum;\nelse if(ThisSum&lt;0)\nThisSum = 0;\n}\nreturn MaxSum;\n} </code></pre>"},{"location":"cs/ds/lec2/","title":"Lists","text":"<p> \u7ea6 68 \u4e2a\u5b57  12 \u884c\u4ee3\u7801 </p> <p>Objects : (\\(item_0,item_1,\u2026\u2026,item_{N-1}\\))</p> <p>Operations:</p>"},{"location":"cs/ds/lec2/#simple-array-implementation-of-lists","title":"Simple Array implementation of Lists","text":"<p>\\(array[i]=item_i\\)</p> <p>Pros : <code>Find_Kth</code> takes \\(O(1)\\) time</p> <p>Cons : </p> <ul> <li>MaxSize has to be estimated</li> <li>Insertion and Deletion not only take \\(O(N)\\) time, but also involve a lot of data movements which takes time.</li> </ul>"},{"location":"cs/ds/lec2/#linked-lists","title":"Linked Lists","text":""},{"location":"cs/ds/lec2/#initialization","title":"Initialization","text":"<pre><code>typedef struct list_node *list_ptr;\ntypedef struct list_node{\nchar data[4];\nlist_ptr next;\n};\nlist_ptr ptr;\n</code></pre>"},{"location":"cs/ds/lec2/#insertion","title":"Insertion","text":"<p>takes \\(O(1)\\) time.</p>"},{"location":"cs/ds/lec2/#deletion","title":"Deletion","text":"<p>takes \\(O(1)\\) time</p>"},{"location":"cs/ds/lec2/#doubly-linked-circular-lists","title":"Doubly Linked Circular Lists","text":"<pre><code>typedef struct node *node_ptr;\ntypedef struct node{\nnode_ptr llink;\nelement item;\nnode_ptr rlink;\n};\n</code></pre>"},{"location":"cs/ds/lec3/","title":"Stack and Queue","text":"<p> \u7ea6 301 \u4e2a\u5b57  42 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>A stack is a Last-In-First-Out(LIFO) list, that is, an ordered list in which insertions and deletions are made at the top only.</p> <p>A queue is a First-in-First-out(FIFO) list, that is, an ordered list in which insertions take place at one end and deletions take place at the opposite end.</p> <p>Objects: A finite ordered list with zero or more elements.</p> <p>Operations : </p>"},{"location":"cs/ds/lec3/#implementation","title":"Implementation","text":"<pre><code>struct StackRecord{\nint Capacity;/*size of stack*/\nint TopOfStack;/*the top pointer*/\n/*++for push,--for pop, -1 for empty stack*/\nElementType *Array;/*array for stack elements*/\n}\n</code></pre>"},{"location":"cs/ds/lec3/#stack-creation","title":"Stack creation","text":"<pre><code>Stack CreateStack(int MaxElements){\nStack S;\nif(MaxElements&lt;MinStackSize)\nError(\"Stack size is too small\");\nS = malloc(sizeof(struct StackRecord));\nif(S==NULL)\nFatalError(\"Out of space!!\");\nS-&gt;Array = malloc(sizeof(ElementType)*MaxElements);\n}\n</code></pre>"},{"location":"cs/ds/lec3/#applications","title":"Applications","text":""},{"location":"cs/ds/lec3/#_1","title":"\u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec <code>'('</code>\uff0c<code>')'</code>\uff0c<code>'{'</code>\uff0c<code>'}'</code>\uff0c<code>'['</code>\uff0c<code>']'</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6211\u4eec\u904d\u5386\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 sss\u3002\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u5de6\u62ec\u53f7\u65f6\uff0c\u6211\u4eec\u4f1a\u671f\u671b\u5728\u540e\u7eed\u7684\u904d\u5386\u4e2d\uff0c\u6709\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u5c06\u5176\u95ed\u5408\u3002\u7531\u4e8e\u540e\u9047\u5230\u7684\u5de6\u62ec\u53f7\u8981\u5148\u95ed\u5408\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5de6\u62ec\u53f7\u653e\u5165\u6808\u9876\u3002</p> <p>\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u53f3\u62ec\u53f7\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u95ed\u5408\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6\u51fa\u6808\u9876\u7684\u5de6\u62ec\u53f7\u5e76\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u76f8\u540c\u7c7b\u578b\u7684\u62ec\u53f7\u3002\u5982\u679c\u4e0d\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u6216\u8005\u6808\u4e2d\u5e76\u6ca1\u6709\u5de6\u62ec\u53f7\uff0c\u90a3\u4e48\u5b57\u7b26\u4e32 <code>s</code> \u65e0\u6548\uff0c\u8fd4\u56de False</p> <p>\u5728\u904d\u5386\u7ed3\u675f\u540e\uff0c\u5982\u679c\u6808\u4e2d\u6ca1\u6709\u5de6\u62ec\u53f7\uff0c\u8bf4\u660e\u6211\u4eec\u5c06\u5b57\u7b26\u4e32<code>s</code>\u4e2d\u7684\u6240\u6709\u5de6\u62ec\u53f7\u95ed\u5408\uff0c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> <pre><code>char pairs(char a){\nif(a=='}') return '{';\nif(a==']') return '[';\nif(a==')') return '(';\nreturn 0;\n}\nbool isValid(char *s){\nint n = strlen(s);\nif(n%2){\nreturn false;\n}\nint skt[n+1],top=0;\nfor(int i=0;i&lt;n;i++){\nchar ch=pairs(s[i]);\nif(ch){\nif(top==0||skt[top-1]!=ch){\nreturn false;\n}\ntop--;\n}\nelse{\nstk[top++]=s[i];\n}\n}\nreturn top==0;\n}\n</code></pre>"},{"location":"cs/ds/tree/","title":"\u6811","text":"<p> \u7ea6 233 \u4e2a\u5b57  105 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"cs/ds/tree/#_2","title":"\u4e8c\u53c9\u6811","text":"<pre><code>//Definition for a binary tree node.\nstruct TreeNode {\nint val;\nstruct TreeNode *left;\nstruct TreeNode *right;\n};\n</code></pre>"},{"location":"cs/ds/tree/#_3","title":"\u6811\u7684\u904d\u5386","text":""},{"location":"cs/ds/tree/#_4","title":"\u524d\u5e8f\u904d\u5386","text":"<p>\u6839\u8282\u70b9\u2014\u2014\u5de6\u5b50\u6811\u2014\u2014\u53f3\u5b50\u6811</p> <p>\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>void preorder(struct TreeNode *root,int *res,int *resSize){\nif(root==NULL){\nreturn;\n}\nres[(*resSize)++]=root-&gt;val;\npreorder(root-&gt;left,res,resSize);\npreorder(root-&gt;right, res, resSize);\n}\n</code></pre> <p>\u8fed\u4ee3\u7248\u672c\uff1a</p> <p>\u533a\u522b\u5728\u4e8e\u9012\u5f52\u7684\u65f6\u5019\u9690\u5f0f\u5730\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808\uff0c\u800c\u6211\u4eec\u5728\u8fed\u4ee3\u7684\u65f6\u5019\u9700\u8981\u663e\u5f0f\u5730\u5c06\u8fd9\u4e2a\u6808\u6a21\u62df\u51fa\u6765\u3002</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a</p> <ul> <li> <p>\u6bcf\u62ff\u5230\u4e00\u4e2a\u8282\u70b9 \u5c31\u628a\u5b83\u4fdd\u5b58\u5728\u6808\u4e2d</p> </li> <li> <p>\u7ee7\u7eed\u5bf9\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u91cd\u590d\u8fc7\u7a0b1\uff0c\u76f4\u5230\u5de6\u5b50\u6811\u4e3a\u7a7a</p> </li> <li> <p>\u56e0\u4e3a\u4fdd\u5b58\u5728\u6808\u4e2d\u7684\u8282\u70b9\u90fd\u904d\u5386\u4e86\u5de6\u5b50\u6811 \u4f46\u662f\u6ca1\u6709\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u5bf9\u6808\u4e2d\u8282\u70b9\u51fa\u6808\u5e76\u5bf9\u5b83\u7684\u53f3\u5b50\u6811\u91cd\u590d\u8fc7\u7a0b1\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u8282\u70b9\u3002</p> </li> </ul> <pre><code>int* preorderTraversal(struct TreeNode* root, int* returnSize){\nint *res = malloc(sizeof(int)*2000);\n*returnSize=0;\nif(root==NULL) return res;\nstruct TreeNode* stk[2000];\nstruct TreeNode* node=root;\nint stk_top=0;\nwhile(stk_top&gt;0||node!=NULL){\nwhile(node){//\u6bcf\u9047\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u52a0\u5165\u7ed3\u679c\uff0c\u5e76\u5c06\u8282\u70b9\u4fdd\u5b58\u5230\u4e2d\u95f4\u7ed3\u679c\nres[(*returnSize)++]=node-&gt;val;\nstk[stk_top++]=node;\nnode=node-&gt;left;\n}//\u904d\u5386\u5de6\u5b50\u6811\u76f4\u5230\u7a7a\nnode=stk[--stk_top];\nnode=node-&gt;right;\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_5","title":"\u4e2d\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u7248\u672c\u5f88trival\uff0c\u5728\u8fd9\u91cc\u5b9e\u73b0\u4e00\u4e0b\u8fed\u4ee3\u7248\u672c\uff0c\u7ec3\u4e60\u5bf9\u6808\u7684\u4f7f\u7528\u3002</p> <pre><code>int* inorderTraversal(struct TreeNode* root, int* returnSize){\n*returnSize=0;\nint *res=malloc(sizeof(int)*2000);\nstruct TreeNode *stk[2000];\nstruct TreeNode* node=root;\nint stk_top=0;\nwhile(stk_top&gt;0||node){\nwhile(node){\nstk[stk_top++]=node;\nnode=node-&gt;left;\n}\nnode=stk[--stk_top];\nres[(*returnSize)++]=node-&gt;val;\nnode=node-&gt;right;\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_6","title":"\u540e\u5e8f\u904d\u5386","text":"<pre><code>int* postorderTraversal(struct TreeNode* root, int* returnSize){\nint *res = malloc(sizeof(int)*2000);\n*returnSize = 0;\nstruct TreeNode *stk[2000];\nint top=0;\nstruct TreeNode *node =root;\nstruct TreeNode *prev = NULL;//\u4e0e\u524d\u5e8f\u548c\u4e2d\u5e8f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u7ef4\u62a4\u4e00\u4e2aprev\u6307\u9488\uff0c\u5224\u65ad\u662f\u5426\u52a0\u5165\u7b54\u6848\u3002\nwhile(top&gt;0||node!=NULL){\nwhile(node){\nstk[top++]=node;\nnode=node-&gt;left;\n}\nnode=stk[--top];\nif(node-&gt;right==NULL||node-&gt;right==prev){\nres[(*returnSize)++]=node-&gt;val;\nprev=node;\nnode=NULL;\n}else{\ntop++;\nnode=node-&gt;right;\n}\n}\nreturn res;\n}\n</code></pre>"},{"location":"cs/ds/tree/#_7","title":"\u5c42\u5e8f\u904d\u5386","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff1a </p> <ul> <li>\u4f7f\u7528\u961f\u5217\u5b58\u50a8\u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7ed3\u70b9</li> <li>\u4f7f\u7528<code>head</code>\u548c<code>rear</code>\u7ef4\u62a4\u961f\u5217\uff0cFIFO</li> <li></li> </ul> <pre><code>int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\nint** ans=(int**)malloc(sizeof(int*)*2000);\n*returnSize=0;\nif(root==NULL) return NULL;\nint columnSizes[2000];\nstruct TreeNode *queue[2000];//\u6a21\u62df\u961f\u5217\nint rear=0;\nint head=0;//\u961f\u5217\u5934\u5c3e\nqueue[rear++]=root;//\u6839\u8282\u70b9\u5165\u961f\nwhile(rear!=head){//\u961f\u5217\u4e0d\u4e3a\u7a7a\nans[(*returnSize)]=(int*)malloc(sizeof(int)*2000);\ncolumnSizes[(*returnSize)]=rear-head;\nint start=head;//\u8bb0\u5f55\u5f00\u59cb\u904d\u5386\u7684\u4f4d\u7f6e\uff0c\u672c\u5c42\u7684\u5934\nhead=rear;//\u672c\u5c42\u7684\u5c3e\u90e8\u4e3a\u4e0b\u5c42\u7684\u5934\uff0c\u56e0\u4e3a\u672c\u5c42\u6240\u6709\u5143\u7d20\u5747\u51fa\u961f\n//\u5728\u8fd9\u91cc\u4e0b\u5c42\u7684\u5934head\u540c\u65f6\u4f5c\u4e3a\u904d\u5386\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5728\u904d\u5386\u4e2drear\u4f1a\u4e0d\u65ad\u6539\u53d8\uff0c\u6210\u4e3a\u4e0b\u5c42\u7684\u5c3e\nfor(int i=start;i&lt;head;i++){\nans[(*returnSize)][i-start]=queue[i]-&gt;val;\nif(queue[i]-&gt;left){\nqueue[rear++]=queue[i]-&gt;left;\n}\nif(queue[i]-&gt;right){\nqueue[rear++]=queue[i]-&gt;right;\n}\n}\n(*returnSize)++;\n}\n*returnColumnSizes=(int*)malloc(sizeof(int)*(*returnSize));\nfor(int i=0;i&lt;*returnSize;i++)\n(*returnColumnSizes)[i]=columnSizes[i];\nreturn ans;\n}\n</code></pre>"},{"location":"cs/language/","title":"Programming Languages","text":"<p> \u7ea6 2 \u4e2a\u5b57 </p>"},{"location":"cs/language/python/","title":"Python tutorial","text":"<p> \u7ea6 571 \u4e2a\u5b57  296 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p> <p>Abstract</p> <p>\u6458\u81eacs231n\u7684Python Numpy Tutorial\uff1ahttps://cs231n.github.io/python-numpy-tutorial/</p>"},{"location":"cs/language/python/#basic-python","title":"Basic Python","text":""},{"location":"cs/language/python/#basic-data-types","title":"Basic data types","text":""},{"location":"cs/language/python/#numbers","title":"Numbers","text":"<p>Integers and floats work as you would expect from other languages:</p> <pre><code>x = 3\nprint(type(x)) # Prints \"&lt;class 'int'&gt;\"\nprint(x)       # Prints \"3\"\nprint(x + 1)   # Addition; prints \"4\"\nprint(x - 1)   # Subtraction; prints \"2\"\nprint(x * 2)   # Multiplication; prints \"6\"\nprint(x ** 2)  # Exponentiation; prints \"9\"\nx += 1\nprint(x)  # Prints \"4\"\nx *= 2\nprint(x)  # Prints \"8\"\ny = 2.5\nprint(type(y)) # Prints \"&lt;class 'float'&gt;\"\nprint(y, y + 1, y * 2, y ** 2) # Prints \"2.5 3.5 5.0 6.25\"\n</code></pre> <p>Note</p> <p>Unlike many languages, Python does not have unary increment(x++) of decrement(x--) operators.</p>"},{"location":"cs/language/python/#booleans","title":"Booleans","text":"<p>Python implements all of the usual operators for Boolean logic, but uses English words rather than symbols</p> <pre><code>t = True\nf = False\nprint(type(t)) # Prints \"&lt;class 'bool'&gt;\"\nprint(t and f) # Logical AND; prints \"False\"\nprint(t or f)  # Logical OR; prints \"True\"\nprint(not t)   # Logical NOT; prints \"False\"\nprint(t != f)  # Logical XOR; prints \"True\"\n</code></pre>"},{"location":"cs/language/python/#strings","title":"Strings","text":"<pre><code>hello = 'hello'    # String literals can use single quotes\nworld = \"world\"    # or double quotes; it does not matter.\nprint(hello)       # Prints \"hello\"\nprint(len(hello))  # String length; prints \"5\"\nhw = hello + ' ' + world  # String concatenation\nprint(hw)  # prints \"hello world\"\nhw12 = '%s %s %d' % (hello, world, 12)  # sprintf style string formatting\nprint(hw12)  # prints \"hello world 12\"\n</code></pre> <p>String objects have a bunch of useful methods, for example:</p> <pre><code>s = \"hello\"\nprint(s.capitalize())  # Capitalize a string; prints \"Hello\"\nprint(s.upper())       # Convert a string to uppercase; prints \"HELLO\"\nprint(s.rjust(7))      # Right-justify a string, padding with spaces; prints \"  hello\"\nprint(s.center(7))     # Center a string, padding with spaces; prints \" hello \"\nprint(s.replace('l', '(ell)'))  # Replace all instances of one substring with another; prints \"he(ell)(ell)o\"\nprint('  world '.strip())  # Strip leading and trailing whitespace; prints \"world\"\n</code></pre>"},{"location":"cs/language/python/#containers","title":"Containers","text":""},{"location":"cs/language/python/#lists","title":"Lists","text":"<p>A list is the Python equivalent of an array, but is resizeable and can contain elements of different types</p> <pre><code>xs = [3, 1, 2]    # Create a list\nprint(xs, xs[2])  # Prints \"[3, 1, 2] 2\"\nprint(xs[-1])     # Negative indices count from the end of the list; prints \"2\"\nxs[2] = 'foo'     # Lists can contain elements of different types\nprint(xs)         # Prints \"[3, 1, 'foo']\"\nxs.append('bar')  # Add a new element to the end of the list\nprint(xs)         # Prints \"[3, 1, 'foo', 'bar']\"\nx = xs.pop()      # Remove and return the last element of the list\nprint(x, xs)      # Prints \"bar [3, 1, 'foo']\"\n</code></pre> <p>Slicing: In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:</p> <pre><code>nums = list(range(5))     # range is a built-in function that creates a list of integers\nprint(nums)               # Prints \"[0, 1, 2, 3, 4]\"\nprint(nums[2:4])          # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\nprint(nums[2:])           # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\nprint(nums[:2])           # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\nprint(nums[:])            # Get a slice of the whole list; prints \"[0, 1, 2, 3, 4]\"\nprint(nums[:-1])          # Slice indices can be negative; prints \"[0, 1, 2, 3]\"\nnums[2:4] = [8, 9]        # Assign a new sublist to a slice\nprint(nums)               # Prints \"[0, 1, 8, 9, 4]\"\n</code></pre> <p>Loops</p> <pre><code>animals = ['cat', 'dog', 'monkey']\nfor animal in animals:\nprint(animal)\n</code></pre> <p>If you want access to the index of each element within the body of a loop, use the built-in <code>enumerate</code> function:</p> <pre><code>animals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\nprint('#%d: %s' % (idx + 1, animal))\n</code></pre> <p>List comprehensions</p> <pre><code>nums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\nsquares.append(x**2)\n# list comprehensions can make this code above simpler\nsquares = [x ** 2 for x in nums]\nprint(squares)   # Prints [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"cs/language/python/#dictionaries","title":"Dictionaries","text":"<p>A dictionary stores (key, value) pairs</p> <pre><code>d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\nprint(d['cat'])       # Get an entry from a dictionary; prints \"cute\"\nprint('cat' in d)     # Check if a dictionary has a given key; prints \"True\"\nd['fish'] = 'wet'     # Set an entry in a dictionary\nprint(d['fish'])      # Prints \"wet\"\n# print(d['monkey'])  # KeyError: 'monkey' not a key of d\nprint(d.get('monkey', 'N/A'))  # Get an element with a default; prints \"N/A\"\nprint(d.get('fish', 'N/A'))    # Get an element with a default; prints \"wet\"\ndel d['fish']         # Remove an element from a dictionary\nprint(d.get('fish', 'N/A')) # \"fish\" is no longer a key; prints \"N/A\"\n</code></pre> <p>Loops: It is easy to iterate over the keys in a dictionary</p> <pre><code>d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal in d:\nlegs = d[animal]\nprint('A %s has %d legs' % (animal, legs))\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n</code></pre> <p>If you want access to keys and their corresponding values, use the <code>items</code> method:</p> <pre><code>d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal, legs in d.items():\nprint('A %s has %d legs' % (animal, legs))\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n</code></pre> <p>Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries</p> <pre><code>nums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint(even_num_to_square)  # Prints \"{0: 0, 2: 4, 4: 16}\"\n</code></pre>"},{"location":"cs/language/python/#tuples","title":"Tuples","text":"<p>A tuple is an (immutable) ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. </p> <pre><code>d = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\nt = (5, 6)        # Create a tuple\nprint(type(t))    # Prints \"&lt;class 'tuple'&gt;\"\nprint(d[t])       # Prints \"5\"\nprint(d[(1, 2)])  # Prints \"1\"\n</code></pre>"},{"location":"cs/language/python/#functions","title":"Functions","text":"<p>We will often define functions to take optional keyword arguments</p> <pre><code>def hello(name, loud=False):\nif loud:\nprint('HELLO, %s!' % name.upper())\nelse:\nprint('Hello, %s' % name)\nhello('Bob') # Prints \"Hello, Bob\"\nhello('Fred', loud=True)  # Prints \"HELLO, FRED!\"\n</code></pre>"},{"location":"cs/language/python/#classes","title":"Classes","text":"<pre><code>class Greeter(object):\n# Constructor\ndef __init__(self, name):\nself.name = name  # Create an instance variable\n# Instance method\ndef greet(self, loud=False):\nif loud:\nprint('HELLO, %s!' % self.name.upper())\nelse:\nprint('Hello, %s' % self.name)\ng = Greeter('Fred')  # Construct an instance of the Greeter class\ng.greet()            # Call an instance method; prints \"Hello, Fred\"\ng.greet(loud=True)   # Call an instance method; prints \"HELLO, FRED!\"\n</code></pre>"},{"location":"cs/language/python/#numpy","title":"Numpy","text":"<p>To use Numpy, we first need to import the <code>numpy</code> package:</p> <pre><code>import numpy as np\n</code></pre>"},{"location":"cs/language/python/#arrays","title":"Arrays","text":"<p>A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.</p> <p>We can initialize numpy arrays from nested Python lists, and access elements using square brackets:</p> <pre><code>a = np.array([1, 2, 3])# Create a rank 1 array\nprint(type(a))            # Prints \"&lt;class 'numpy.ndarray'&gt;\"\nprint(a.shape)            # Prints \"(3,)\"\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\nb = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array\nprint(b.shape)                     # Prints \"(2, 3)\"\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre> <p>Numpy also provides many functions to create arrays:</p> <pre><code>a = np.zeros((2,2))   # Create an array of all zeros\nprint(a)              # Prints \"[[ 0.  0.]\n#          [ 0.  0.]]\"\nb = np.ones((1,2))    # Create an array of all ones\nprint(b)              # Prints \"[[ 1.  1.]]\"\nc = np.full((2,2), 7)  # Create a constant array\nprint(c)               # Prints \"[[ 7.  7.]\n#          [ 7.  7.]]\"\nd = np.eye(2)         # Create a 2x2 identity matrix\nprint(d)              # Prints \"[[ 1.  0.]\n#          [ 0.  1.]]\"\ne = np.random.random((2,2))  # Create an array filled with random values\nprint(e)                     # Might print \"[[ 0.91940167  0.08143941]\n#               [ 0.68744134  0.87236687]]\"\n</code></pre>"},{"location":"cs/language/python/#array-indexing","title":"Array indexing","text":""},{"location":"cs/language/python/#silicing","title":"Silicing","text":"<p>Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array</p> <pre><code># Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\nb = a[:2, 1:3]\n# A slice of an array is a view into the same data, so modifying it\n# will modify the original array.\nprint(a[0, 1])   # Prints \"2\"\nb[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1])   # Prints \"77\"\n</code></pre> <p>You can also mix integer indexing with slice indexing. However, doing so will yield an array of lower rank than the original array. Note that this is quite different from the way that MATLAB handles array slicing:</p> <pre><code># Two ways of accessing the data in the middle row of the array.\n# Mixing integer indexing with slices yields an array of lower rank,\n# while using only slices yields an array of the same rank as the\n# original array:\nrow_r1 = a[1, :]    # Rank 1 view of the second row of a\nrow_r2 = a[1:2, :]  # Rank 2 view of the second row of a\nprint(row_r1, row_r1.shape)  # Prints \"[5 6 7 8] (4,)\"\nprint(row_r2, row_r2.shape)  # Prints \"[[5 6 7 8]] (1, 4)\"\n# We can make the same distinction when accessing columns of an array:\ncol_r1 = a[:, 1]\ncol_r2 = a[:, 1:2]\nprint(col_r1, col_r1.shape)  # Prints \"[ 2  6 10] (3,)\"\nprint(col_r2, col_r2.shape)  # Prints \"[[ 2]\n#          [ 6]\n#          [10]] (3, 1)\"\n</code></pre>"},{"location":"cs/language/python/#datatypes","title":"Datatypes","text":"<p>Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:</p> <pre><code>x = np.array([1, 2])   # Let numpy choose the datatype\nprint(x.dtype)         # Prints \"int64\"\nx = np.array([1.0, 2.0])   # Let numpy choose the datatype\nprint(x.dtype)             # Prints \"float64\"\nx = np.array([1, 2], dtype=np.int64)   # Force a particular datatype\nprint(x.dtype)                         # Prints \"int64\"\n</code></pre>"},{"location":"cs/language/python/#array-math","title":"Array math","text":"<pre><code>x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n# Elementwise sum; both produce the array\n# [[ 6.0  8.0]\n#  [10.0 12.0]]\nprint(x + y)\nprint(np.add(x, y))\n# Elementwise difference; both produce the array\n# [[-4.0 -4.0]\n#  [-4.0 -4.0]]\nprint(x - y)\nprint(np.subtract(x, y))\n# Elementwise product; both produce the array\n# [[ 5.0 12.0]\n#  [21.0 32.0]]\nprint(x * y)\nprint(np.multiply(x, y))\n# Elementwise division; both produce the array\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\nprint(x / y)\nprint(np.divide(x, y))\n# Elementwise square root; produces the array\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\nprint(np.sqrt(x))\n</code></pre> <p>Note that <code>*</code> is elementwise multiplication, not matrix multiplication. We instead use the <code>dot</code> function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices.  <code>dot</code> is avaiable both as a function in the numpy module and as an instance method of array objects:</p> <pre><code>x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\nv = np.array([9,10])\nw = np.array([11, 12])\n# Inner product of vectors; both produce 219\nprint(v.dot(w))\nprint(np.dot(v, w))\n# Matrix / vector product; both produce the rank 1 array [29 67]\nprint(x.dot(v))\nprint(np.dot(x, v))\n# Matrix / matrix product; both produce the rank 2 array\n# [[19 22]\n#  [43 50]]\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre> <p><code>sum</code> and <code>T</code> function:</p> <pre><code>x = np.array([[1,2],[3,4]])\nprint(np.sum(x))  # Compute sum of all elements; prints \"10\"\nprint(np.sum(x, axis=0))  # Compute sum of each column; prints \"[4 6]\"\nprint(np.sum(x, axis=1))  # Compute sum of each row; prints \"[3 7]\"\nprint(x.T)  # Prints \"[[1 3]\n#          [2 4]]\"\n# Note that taking the transpose of a rank 1 array does nothing:\nv = np.array([1,2,3])\nprint(v)    # Prints \"[1 2 3]\"\nprint(v.T)  # Prints \"[1 2 3]\"\n</code></pre>"},{"location":"cs/language/python/#matplotlib","title":"Matplotlib","text":""},{"location":"cs/language/python/#plotting","title":"Plotting","text":"<p>The most important function in matplotlib is <code>plot</code>, which allows you to plot 2D data. Here is a simple example:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n# Compute the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n# Plot the points using matplotlib\nplt.plot(x, y)\nplt.show()  # You must call plt.show() to make graphics appear.\n</code></pre> <p></p> <p>With just a little bit of extra work we can easily plot multiple lines at once, and add a title, legend, and axis labels:</p> <pre><code># Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n# Plot the points using matplotlib\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\nplt.show()\n</code></pre> <p></p>"},{"location":"cs/language/python/#subplots","title":"Subplots","text":"<p>You can plot different things in the same figure using the <code>subplot</code> function</p> <pre><code># Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n# Set up a subplot grid that has height 2 and width 1,\n# and set the first such subplot as active.\nplt.subplot(2, 1, 1)\n# Make the first plot\nplt.plot(x, y_sin)\nplt.title('Sine')\n# Set the second subplot as active, and make the second plot.\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n# Show the figure.\nplt.show()\n</code></pre> <p></p>"},{"location":"cs/language/c/c/","title":"C","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300aC Primer Plus\u300b</p> <p>\u6d59\u5927\u56fe\u7075\u73ed\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8\u8bfe\u7a0b\uff0c\u5c06\u4f20\u7edf\u7684c\u5c0fc\u5927\u53bb\u9664\u4e0d\u5408\u7406\u7684\u5185\u5bb9\u540e\u5408\u5e76\u8d77\u6765\u7684\u4e00\u95e8\u8bfe\u3002\u4f7f\u7528C\u8bed\u8a00\uff0c\u4e3b\u8981\u4ecb\u7ecd\u57fa\u672c\u7684\u8bed\u6cd5\uff0c\u6761\u4ef6\u8bed\u53e5\uff0c\u5faa\u73af\u8bed\u53e5\uff0c\u51fd\u6570\uff0c\u6570\u7ec4\uff0c\u6307\u9488\uff0c\u5b57\u7b26\u4e32\uff0c\u94fe\u8868\uff0c\u7ed3\u6784\u4f53\u7b49\u5185\u5bb9\u3002</p> <p>\u671f\u672b\u8003\u524d\u6574\u7406\u7684\u4e00\u4efd\u6613\u9519\u77e5\u8bc6\u70b9\u4ee5\u53ca\u5178\u578b\u9898\u7684\u601d\u60f3\u548c\u4ee3\u7801\uff0c\u5927\u4e00\u4e0a\u5199\u7684\u4e0d\u600e\u4e48\u6ce8\u610f\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u80fd\u7a0d\u5fae\u4e71\u4e00\u4e9b/(\u3112o\u3112)/~~</p>"},{"location":"cs/language/c/c/#_1","title":"\u7a0b\u7b97\u671f\u672b\u7406\u8bba\u9898\u590d\u4e60","text":"<p> \u7ea6 4013 \u4e2a\u5b57  488 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p> <ul> <li> <p>switch \u8bed\u53e5\u5728\u7f3a\u5c11break \u65f6\u5c06 Fall through</p> </li> <li> <p>++\u4f18\u5148\u7ea7\u9ad8\u4e8e*</p> </li> <li> <p><code>true</code>\u3001<code>false</code>\u3001<code>TRUE</code>\u3001<code>FALSE</code> \u662f\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff0c\u56e0\u4e3a\u5728 C \u4e2d\u5b83\u4eec\u4e0d\u662f\u5173\u952e\u5b57</p> </li> <li> <p><code>char a = 255</code>\uff0c\u6253\u5370\u540e\u503c\u4e3a <code>-1</code>\uff0c\u56e0\u4e3a <code>char</code> \u4e3a\u6709\u7b26\u53f7\u7c7b\u578b\u5e76\u91c7\u7528\u8865\u7801\u8868\u793a\uff0c\u5176\u8303\u56f4\u4e3a <code>-128 ~ 127</code>\u3002</p> </li> <li> <p>\u6307\u9488\u53ef\u4ee5\u52a0\u5e38\u6570\uff0c\u51cf\u5e38\u6570\uff0c\u4f46\u6307\u9488\u4e4b\u95f4\u53ef\u4ee5\u76f8\u51cf\uff0c\u4f46\u4e0d\u80fd\u76f8\u52a0</p> </li> <li>\u4e24\u4e2a\u540c\u4e00\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u76f8\u51cf\uff0c\u610f\u4e49\u662f\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u76f8\u9694\u591a\u5c11\u4e2a\u5143\u7d20 \u6ce8\u610f\u662f\u5143\u7d20\u4e0d\u662f\u5b57\u8282\u6570\u3002</li> <li> <p>\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u5141\u8bb8\u76f8\u51cf</p> </li> <li> <p>\u6307\u9488\u53ea\u6709\u52a0\u51cf\u64cd\u4f5c\uff0c\u6ca1\u6709\u4e58\u9664\u64cd\u4f5c</p> </li> <li> <p>[ ]\u4f18\u5148\u7ea7\u9ad8\u4e8e *</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u9700\u8d4b\u503c\u4e00\u4e2a\u53ef\u7528\u7684\u5730\u5740\u4e4b\u540e\u624d\u53ef\u4ee5\u89e3\u5f15\u7528</p> </li> <li> <p>\u5047\u8bbe\u6709\u5b9a\u4e49\u5982\u4e0b\uff1a <code>int array[10];</code> \u5219\u8be5\u8bed\u53e5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4array\u3002\u5176\u4e2darray\u7684\u7c7b\u578b\u662f\u6574\u578b\u6307\u9488\u274c</p> </li> <li> <p>array \u662f\u6307\u5411int array[0]\u5730\u5740\u7684\u6307\u9488</p> </li> </ul> <p>&amp;a\u4ee3\u8868\u6570\u7ec4\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint(*)[ ] </p> <p>a\u4ee3\u8868\u6570\u7ec40\u53f7\u5143\u7d20\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint*</p> <p>\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff1aint (*pName)[ ] = &amp;a;</p> <p>\u6307\u5411\u6570\u7ec40\u53f7\u5143\u7d20\u7684\u6307\u9488\uff1aint* pName = a; </p> <p>\u5f53\u6307\u9488\u6307\u5411\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u6307\u9488\u79fb\u52a8\u3002</p> <p>\u5373 \u6307\u9488\u548c\u6570\u7ec4\u540d\u5728\u6548\u679c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u533a\u522b\u5728\u4e8e\uff1a\u6307\u9488\u662f\u53d8\u91cf \u6307\u9488\u53ef\u4ee5\u53c2\u4e0e\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u800c\u6570\u7ec4\u540d\u4e0d\u884c</p> <p>\u5b9e\u9645\u4e0a \u6570\u7ec4\u7d22\u5f15\u4e0b\u6807\u8fd0\u7b97\u5c31\u662f\u5148\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u6307\u9488\uff0c\u518d\u901a\u8fc7\u6307\u9488\u53bb\u53d6\u5f97\u5bf9\u5e94\u5143\u7d20\u7684</p> <ul> <li> <p>\u6570\u7ec4\u7684\u57fa\u5730\u5740\u662f\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6570\u7ec4\u540d\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5730\u5740\u5373\u6307\u9488\u503c\u3002</p> </li> <li> <p>\u6709\u6548\u7684\u6307\u9488\u8fd0\u7b97</p> </li> <li> <p>\u76f8\u540c\u7c7b\u578b\u6307\u9488\u7684\u76f8\u4e92\u8d4b\u503c\u8fd0\u7b97</p> </li> <li>\u6307\u9488\u4e0e\u6574\u6570\u4e4b\u95f4\u7684\u52a0\u51cf\u6cd5\u8fd0\u7b97</li> <li> <p>\u6307\u5411\u76f8\u540c\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u526a\u53d1\u8fd0\u7b97\u6216\u6bd4\u8f83\u8fd0\u7b97</p> </li> <li> <p>*p++\u8868\u793a\u53d6\u5f97p\u5f53\u524d\u6307\u5411\u7684\u5143\u7d20\uff0c\u4f46\u662fp\u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e86</p> </li> <li> <p>\u95ee\u4e00\u4e2achar\u578b\u53d8\u91cf\u7684\u503c\u662f\u591a\u5c11\uff0c\u8981\u4e48\u8bb0\u5f97\u5f15\u53f7\uff0c\u8981\u4e48\u8bb0\u5f97\u7528ASCII</p> </li> <li> <p>\u53ef\u4ee5\u76f4\u63a5\u7528[]\u8bbf\u95ee\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u67d0\u4e2a\u5b57\u7b26</p> </li> <li> <p><code>c   \"ABC\" [1]='B'</code></p> </li> <li> <p><code>sizeof()</code>\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u800c\u4e14\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5b8c\u6210\u66ff\u6362\u3002</p> <ul> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> </ul> </li> <li> <ul> <li><code>sizeof(1) = 4</code></li> </ul> </li> <li><code>sizeof(1ll) = 8</code></li> <li><code>sizeof(1.0) = 8</code></li> <li><code>sizeof(1.0f) = 4</code></li> </ul> <p></p> <ul> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u662fC\u8bed\u8a00\u7f16\u8bd1\u7a0b\u5e8f\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u7528\u4e8e\u89e3\u91ca\u5904\u7406C\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u9884\u5904\u7406\u6307\u4ee4\uff08\u7279\u5f81\u662f\u4ee5<code>#</code>\u5f00\u5934\uff0c\u5b83\u4eec\u4e0d\u662f\u771f\u6b63\u7684C\u8bed\u53e5\uff09</p> </li> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u5728\u6b63\u5f0f\u7f16\u8bd1\u4e4b\u524d</p> </li> <li> <p><code>#include</code></p> </li> <li>\u5982\u679c\u540e\u9762\u662f&lt;&gt;\uff0c\u5219\u5c06\u4f7f\u7528C\u7684\u6807\u51c6\u5934\u6587\u4ef6</li> <li> <p>\u5982\u679c\u540e\u9762\u662f\u201c\u201d\uff0c\u5c06\u5148\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u5bfb\u627e\u88ab\u5305\u542b\u7684\u6587\u4ef6\uff0c\u627e\u4e0d\u5230\u5219\u53bb\u7cfb\u7edfinclude\u76ee\u5f55\u5bfb\u627e</p> </li> <li> <p>\u5b8f</p> </li> <li> <p>\u5b8f\u53ea\u662f\u7eaf\u7cb9\u7684\u5bf9\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u66ff\u6362</p> </li> <li> <p>case \u540e\u8ddf\u7684\u5fc5\u987b\u662f\u4e0d\u91cd\u590d\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e0d\u53ef\u4ee5\u662f\u53d8\u91cf\u53c2\u4e0e\u7684\u8868\u8fbe\u5f0f</p> </li> <li> <p>\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u5b9a\u4e49\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f</p> </li> <li> <p>\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5b58\u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u6301\u7eed\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e0d\u4f1a\u518d\u9000\u51fa\u51fd\u6570\u7684\u65f6\u5019\u88ab\u56de\u6536\uff0c\u4e0b\u4e00\u6b21\u4f7f\u7528\u540e\u4f1a\u88ab\u91cd\u65b0\u6fc0\u6d3b</p> </li> <li> <p>\u4e0e\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u76f8\u6bd4\uff0c\u9759\u6001\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u518d\u5f53\u524d\u6587\u4ef6\u5185\uff0c\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u5728\u591a\u6587\u4ef6\u9879\u76ee\u4e2d\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u7528</p> </li> <li> <p>\u9759\u6001\u53d8\u91cf\u521d\u503c\u9ed8\u8ba4\u4e3a0</p> </li> <li> <p>\u4e8c\u7ef4\u6570\u7ec4\u7533\u8bf7\u65f6\u5982\u679c\u521d\u59cb\u5316\u53ef\u4ee5\u7701\u7565\u884c\u957f\u5ea6 <code>a[][3]={}</code></p> </li> <li> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4<code>a[x][y]</code></p> </li> <li><code>&amp;a</code>\u8868\u793a\u6570\u7ec4\u5730\u5740\uff0c<code>&amp;a+1</code>\u8868\u793a\u6570\u7ec4\u672b\u5c3e\u540e\u7684\u5730\u5740</li> <li><code>a</code>\u6216\u8005<code>&amp;a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u884c\u5730\u5740\uff0c<code>a+1</code>\u8868\u793a\u6570\u7ec4\u4e0b\u4e00\u884c\u5730\u5740<ul> <li><code>a</code>\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2ax\u7ef4\u6570\u7ec4\u7684\u6307\u9488\u3002</li> </ul> </li> <li><code>&amp;a[0][0]</code>\u6216\u8005<code>a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u5143\u7d20\u5730\u5740\uff0c\u4e5f\u53eb\u5217\u5730\u5740</li> <li> <p><code>a[i][j]</code>\u7b49\u6548\u4e8e<code>*(*(a+i)+j)</code></p> </li> <li> <p>\u53d6\u503c\u7b26\u53f7*\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6210\u5458\u8bbf\u95ee\u7b26.\u7684\u4f18\u5148\u7ea7</p> </li> <li> <p>\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6307\u9488\u7684\u65b9\u5f0f\u6765\u7ed9\u8be5\u5b57\u7b26\u4e32\u5206\u914d\u5730\u5740</p> </li> <li> <p><code>char *p;  p=\"awa\"</code></p> </li> <li> <p><code>*strcpy(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u590d\u5236\u5230<code>to[]</code>\u4e2d\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p><code>*strcat(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u6dfb\u52a0\u5230<code>to[]</code>\u672b\u5c3e\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p>\u6240\u8c13\u7684\u6dfb\u52a0\uff0c\u5c31\u662f\u7528<code>from[]</code>\u53bb\u66ff\u6362<code>to[]</code>\u7b2c\u4e00\u4e2a<code>\\0</code>\u4e4b\u540e\u7684\u5143\u7d20</p> </li> <li> <ul> <li><code>strcmp(char *a,char *b)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u6bd4\u8f83\u5b57\u7b26\u6570\u7ec4<code>a[]</code>\u548c<code>b[]</code>\u5728<code>\\0</code>\u524d\u7684\u5185\u5bb9\u662f\u5426\u7b49\u4ef7</li> </ul> </li> <li> <ul> <li> <ul> <li>\u5982\u679c\u7b49\u4ef7 \u8fd4\u56de0</li> </ul> </li> <li>\u5982\u679ca&lt;b \u8fd4\u56de-1</li> <li>\u5982\u679ca&gt;b \u8fd4\u56de1</li> </ul> </li> <li> <p>\u7ed3\u6784\u4f53\u7c7b\u578b\u672c\u8eab\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u7ed3\u6784\u4f53\u53d8\u91cf\u5360\u7528\u5185\u5b58\u7a7a\u95f4</p> </li> <li> <p>\u679a\u4e3e\u7c7b\u578b\u4e2d\u7684\u5143\u7d20\u90fd\u5177\u6709\u4e00\u4e2a\u6574\u578b\u503c</p> </li> <li> <p>\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740</p> </li> <li> <p>\u4efb\u4f55\u8868\u8fbe\u5f0f\u8bed\u53e5\u90fd\u662f\u8868\u8fbe\u5f0f\u52a0\u5206\u53f7\u7ec4\u6210\u7684</p> </li> <li> <p>\u6587\u4ef6\u7684\u8bfb\u51fd\u6570\u662f\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5b58\u653e\u5728\u5185\u5b58\u4e2d</p> </li> <li> <p>\u6587\u4ef6\u662f\u5426\u6253\u5f00\u662f\u53ef\u4ee5\u5224\u65ad\u7684</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u548c\u4f4d\u7f6e\u6307\u9488\u90fd\u662f\u968f\u7740\u6587\u4ef6\u7684\u8bfb\u5199\u64cd\u4f5c\u5728\u4e0d\u65ad\u6539\u53d8\u274c</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u7528\u4e8e\u6307\u5411\u6587\u4ef6\uff0c\u6587\u4ef6\u53ea\u6709\u88ab\u6253\u5f00\u540e\u624d\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u6307\u9488</p> </li> <li> <p>\u4e00\u4e2a\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\uff0c\u5b83\u5c06\u4fdd\u6301\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\u7684\u6570\u636e\u7c7b\u578b\u274c</p> </li> <li> <p>switch\u8bed\u53e5\u4e2d\uff0c\u591a\u4e2acase\u53ef\u4ee5\u5171\u7528\u4e00\u7ec4\u6267\u884c\u8bed\u53e5</p> </li> <li> <p>\u6bcf\u4e2acase\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u53ef\u4ee5\u76f8\u540c</p> </li> <li> <p>\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf\uff0c\u5728\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u4e0d\u80fd\u5b58\u653e\u6570\u503c\u548c\u5b57\u7b26</p> </li> <li> <p>\u5b57\u7b26\u4e32\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u6307\u9488</p> </li> <li> <p></p> </li> <li> <p>\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u3002</p> </li> <li> <p>\\\u5f00\u5934\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u516b\u8fdb\u5236\u8f6c\u4e49\u5e8f\u5217\uff0cs\u8868\u793a\u4e00\u4e2a\u5b57\u7b26</p> </li> <li> <p>\u6807\u8bc6\u7b26\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4e0d\u80fd\u662fC\u8bed\u8a00\u7684\u5173\u952e\u5b57\u548c\u4fdd\u7559\u6807\u8bc6\u7b26</p> </li> <li> <p>\u6ce8\u610fif\u8bed\u53e5\u4e2d\u662f=\u53f7\u8fd8\u662f==</p> </li> <li>`int k=2;while(k=0){printf(\"%d\",k);k--;}</li> <li> <p>\u5faa\u73af\u4f53\u8bed\u53e5\u4e00\u6b21\u4e5f\u4e0d\u6267\u884c</p> </li> <li> <p>\u6ce8\u91ca\u4f53\u4f8b\uff1a<code>/**/</code></p> </li> <li> <p><code>x*=y+z</code>\u5373\u4e3a`x=x*(y+z)</p> </li> <li> <p>else \u603b\u662f\u548c\u4e4b\u524d\u4e0e\u5176\u6700\u8fd1\u7684\u4e14\u4e0d\u5e26else \u7684if\u914d\u5bf9</p> </li> <li> <p>\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5</p> </li> <li> <p>\u5728\u5d4c\u5957\u5faa\u73af\u4e2d\uff0c\u6bcf\u4e00\u5c42\u5faa\u73af\u4e2d\u90fd\u4e0d\u5e94\u8be5\u6539\u53d8\u5176\u4ed6\u5c42\u4f7f\u7528\u7684\u5faa\u73af\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u514d\u4e92\u76f8\u5e72\u6270</p> </li> <li> <p>break \u8bed\u53e5\u53ea\u80fd\u7528\u5728\u5faa\u73af\u4f53\u548cswitch\u8bed\u53e5\u4f53\u5185</p> </li> <li> <p>continue\u8bed\u53e5\u7684\u4f5c\u7528\u662f\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u4f53\u4e2d\u4f59\u4e0b\u5c1a\u672a\u6267\u884c\u7684\u8bed\u53e5\uff0c\u7acb\u5373\u8fdb\u884c\u4e0b\u4e00\u6b21\u7684\u5faa\u73af\u6761\u4ef6\u5224\u5b9a\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec5\u7ed3\u675f\u672c\u6b21\u5faa\u73af\u3002</p> </li> <li> <p>\u51fd\u6570\u4e0d\u53ef\u4ee5\u5d4c\u5957\u5b9a\u4e49\u4f46\u53ef\u4ee5\u5d4c\u5957\u8c03\u7528</p> </li> <li> <p>sizeof\u662f\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570</p> </li> <li> <p>C\u8bed\u8a00\u4e2d\uff0c\u82e5\u6ca1\u6709\u5bf9\u51fd\u6570\u7c7b\u578b\u663e\u5f0f\u8bf4\u660e\uff0c\u5219\u51fd\u6570\u7684\u9690\u542b\u7c7b\u578b\u4e3aint</p> </li> <li> <p>\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u5206\u522b\u5360\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u5355\u5143</p> </li> <li> <p>\u4e0d\u4e00\u5b9a\u5305\u542bmain\u51fd\u6570\uff0c\u4e0d\u80fd\u5305\u542b\u4e24\u4e2a\u4ee5\u4e0amain\u51fd\u6570</p> </li> <li> <p>EOF\u5b9e\u9645\u4e0a\u5c31\u662f-1</p> </li> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> <li>\u5206\u652f\u8bed\u53e5\u6d4b\u8bd5\u6570\u636e\u81f3\u5c11\u9700\u8981\u51e0\u7ec4\u95ee\u9898\uff1a\u8981\u6ce8\u610f\u6570\u636e\u8fb9\u754c\u4e5f\u8981\u7b97\u4e00\u7ec4:</li> <li>C\u8bed\u8a00\u7684\u903b\u8f91\u8fd0\u7b97\u5177\u6709\u7701\u7565\u7279\u6027\uff1a\u5f53\u524d\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u65f6\u5019\uff0c\u4e0d\u8ba1\u7b97\u540e\u9762\u90a3\u4e2a\u8868\u8fbe\u5f0f</li> <li>\u53d6\u4f59\u8fd0\u7b97\u4ec5\u5bf9\u6574\u578b\u6570\u636e\u4f7f\u7528</li> <li><code>+ -</code>\u53ef\u4f5c\u5355\u76ee\u8fd0\u7b97\u7b26\u8868\u793a\u6b63\u8d1f</li> <li>\u53cc\u76ee\u8fd0\u7b97\u7b26\u4f1a\u4fdd\u8bc1\u4e24\u4fa7\u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\uff08\u5bf9\u4e8e\u4e0d\u540c\u7684\u8f93\u5165\u6570\u636e\u4f1a\u8fdb\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff09</li> <li>1.\u7b26\u53f7\u4f18\u5148\u7ea7\uff1a\u8d4b\u503c\u8fd0\u7b97\u4f18\u5148\u4e8e\u9017\u53f7\u8fd0\u7b97\uff0c2.\u9017\u53f7\u8fd0\u7b97\uff1a\u7b26\u9017\u53f7\u8868\u8fbe\u5f0f\u4e2d\u7528\u9017\u53f7\u5206\u5f00\u7684\u8868\u8fbe\u5f0f\u5206\u522b\u6c42\u503c\uff0c\u4ee5\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4f5c\u4e3a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li> <li>x\u4e3a\u6d6e\u70b9\u578b\uff0c\u5219\u8868\u8fbe\u5f0f<code>x=10/4</code>\u7684\u503c\u4e3a2.0</li> <li>%\u8fd0\u7b97\u6570\u5fc5\u987b\u662f\u6574\u578b</li> <li><code>a[2]+3</code>\u8868\u793aa\u6570\u7ec4\u884c\u4e0b\u6807\u4e3a2\uff0c\u5217\u4e0b\u6807\u4e3a3\u7684\u5143\u7d20\u7684\u5730\u5740</li> <li>\u8fde\u63a5\u7b26\u4e0d\u80fd\u7ec4\u6210\u6807\u8bc6\u7b26</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e</li> <li>C\u8bed\u8a00\u4e2d\u6240\u6709\u5173\u952e\u5b57\u5fc5\u987b\u5c0f\u5199</li> <li>int long float \u6df7\u5408\u8fd0\u7b97\uff0c\u7ed3\u679c\u7684\u6570\u636e\u7c7b\u578b\u662fdouble</li> <li>\u518dswitch\u8bed\u53e5\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u4f7f\u7528break\u8bed\u53e5</li> <li>\u5b9e\u53c2\u4e0e\u5176\u5bf9\u5e94\u7684\u5f62\u53c2\u5206\u522b\u5360\u7528\u72ec\u7acb\u7684\u5b58\u50a8\u5355\u5143</li> <li>continue\u53ea\u80fd\u8fd0\u7528\u4e8e\u5faa\u73af\u4f53\u4e2d</li> <li>C\u8bed\u8a00\u6e90\u7a0b\u5e8f\u7684\u6269\u5c55\u540d\u662fC</li> <li>C\u8bed\u8a00\u5168\u5c40\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u81ea\u52a8\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u5c40\u90e8\u53d8\u91cf\u4e0d\u4e00\u5b9a\uff0c\u5c40\u90e8\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u4e0d\u786e\u5b9a</li> <li>double\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u6bd4int\u578b\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u591a</li> <li>for\u5faa\u73af\u7684\u4e09\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u7701\u7565</li> <li>\u53d8\u91cf\u88ab\u5b9a\u4e49\u540e\uff0c\u5b83\u4f5c\u7528\u57df\u548c\u5bff\u547d\u5c31\u88ab\u786e\u5b9a\u4e86\uff0c\u5e76\u4e14\u4e0d\u53ef\u6539\u53d8</li> <li>\u6761\u4ef6\u8fd0\u7b97\u7b26?\u548c:\u662f\u4e00\u5bf9\u8fd0\u7b97\u7b26\uff0c\u4e0d\u80fd\u5206\u5f00\u5355\u72ec\u4f7f\u7528</li> <li>\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012\u5230\u5f62\u53c2\u6709\u4e24\u79cd\u65b9\u5f0f\u503c\u4f20\u9012\u548c\u5730\u5740\u4f20\u9012</li> <li>\u82e5\u53d8\u91cf\u5b9a\u4e49\u4e3aint x, y; \uff0c\u5219x + y = 22==\u4e0d\u662f==\u7b26\u5408C\u8bed\u8a00\u8bed\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002</li> <li>C\u7a0b\u5e8f\u4e2d\uff0c\u7528\u4e00\u5bf9\u5927\u62ec\u53f7{}\u62ec\u8d77\u6765\u7684\u591a\u6761\u8bed\u53e5\u79f0\u4e3a\u590d\u5408\u8bed\u53e5\uff0c\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5\u3002</li> <li>!!6\u7684\u503c\u662f1</li> <li>\u82e5\u8868\u8fbe\u5f0fsizeof(int)\u7684\u503c\u4e3a4\uff0c\u5219int\u7c7b\u578b\u6570\u636e\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u6574\u6570\u4e3a 2^31-1(4\u4e2a\u5b57\u8282\uff0c\u6bcf\u5b57\u82828\u4f4d\uff0c\u4e00\u517132\u4f4d\uff0c\u51cf\u53bb\u4e00\u4e2a\u7b26\u53f7\u4f4d)</li> <li>\u4e0efloat\u578b\u6570\u636e\u76f8\u6bd4\uff0cdouble\u578b\u6570\u636e\u7684\u7cbe\u5ea6\u9ad8\uff0c\u53d6\u503c\u8303\u56f4\u5927</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b</li> <li>int a=4, b=3, c=2, d=1, m=1, n=3;\uff0c\u6267\u884c ( m=a&gt;b&gt;c) &amp;&amp; (n=c&gt;d) \u540e n \u7684\u503c\u4e3a\uff08 \uff093</li> <li>\u5728switch\u8bed\u53e5\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7684case\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c==\u4e0d==\u53ef\u4ee5\u76f8\u540c</li> <li>case\u4e2d\u7684\u53d8\u91cf\u503c\u53ea\u80fd\u662f\u6574\u6570\u5e38\u91cf\u503c\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u7b26\u53f7</li> <li>while(i&lt;=10);i++ \u6b7b\u5faa\u73af</li> <li>\u5728\u5b9a\u4e49\u6570\u7ec4\u4e4b\u540e\uff0c\u6839\u636e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u7c7b\u578b\u53ca\u4e2a\u6570\uff0c\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u6bb5\u8fde\u7eed\u5b58\u50a8\u5355\u5143\u7528\u4e8e\u5b58\u653e\u6570\u7ec4\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\u3002</li> <li>\u6570\u7ec4\u5b9a\u4e49\u540e\uff0c\u6570\u7ec4\u540d\u8868\u793a\u8be5\u6570\u7ec4\u6240\u5206\u914d\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e2d\u7b2c\u4e00\u4e2a\u5355\u5143\u7684\u5730\u5740\uff0c\u5373\u9996\u5730\u5740</li> <li>\u5730\u5740\u4e00\u822c\u4e0d\u53ef\u88ab\u66f4\u6539</li> <li>\u51fd\u6570\u4e0d\u80fd\u6ca1\u6709\u5927\u62ec\u53f7</li> </ul>"},{"location":"cs/language/c/c/#_2","title":"\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_3","title":"\u53cd\u8f6c\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_4","title":"\u8fed\u4ee3","text":"<p>\u5728\u904d\u5386\u94fe\u8868\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6539\u4e3a\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u7531\u4e8e\u8282\u70b9\u6ca1\u6709\u5f15\u7528\u5176\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u5fc5\u987b\u4e8b\u5148\u5b58\u50a8\u5176\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u66f4\u6539\u5f15\u7528\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u5b58\u50a8\u540e\u4e00\u4e2a\u8282\u70b9\u3002\u6700\u540e\u8fd4\u56de\u65b0\u7684\u5934\u5f15\u7528\u3002</p> <pre><code>struct ListNode* reverseList(struct ListNode* head){\nstruct ListNode* prev = NULL;\nstruct ListNode* curr = head;\nwhile(curr){\nstruct ListNode* next = curr-&gt;next;\ncurr-&gt;next=prev;\nprev=curr;\ncurr=next;\n}\nreturn prev;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_5","title":"\u9012\u5f52","text":"<pre><code>struct ListNode* reverseList(struct ListNode* head){\nif(head==NULL||head-&gt;next==NULL)\n{\nreturn head;\n}\nstruct ListNode* newHead = reverseList(head-&gt;next);\nhead-&gt;next-&gt;next=head;\nhead-&gt;next=NULL;\nreturn newHead;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_6","title":"\u56de\u6587\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_7","title":"\u5b58\u8fdb\u6570\u7ec4\u8fdb\u884c\u6bd4\u8f83","text":""},{"location":"cs/language/c/c/#_8","title":"\u9012\u5f52","text":"<p>\u7b97\u6cd5 <code>currentNode</code> \u6307\u9488\u662f\u5148\u5230\u5c3e\u8282\u70b9\uff0c\u7531\u4e8e\u9012\u5f52\u7684\u7279\u6027\u518d\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u6bd4\u8f83\u3002<code>frontPointer</code> \u662f\u9012\u5f52\u51fd\u6570\u5916\u7684\u6307\u9488\u3002\u82e5 <code>currentNode.val != frontPointer.val</code>\u5219\u8fd4\u56de false\u3002\u53cd\u4e4b\uff0c<code>frontPointer</code> \u5411\u524d\u79fb\u52a8\u5e76\u8fd4\u56de true\u3002</p> <p>\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5728\u4e8e\u9012\u5f52\u5904\u7406\u8282\u70b9\u7684\u987a\u5e8f\u662f\u76f8\u53cd\u7684\uff0c\u800c\u6211\u4eec\u5728\u51fd\u6570\u5916\u53c8\u8bb0\u5f55\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u56e0\u6b64\u4ece\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u540c\u65f6\u5728\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5339\u914d\u3002</p> <pre><code>struct ListNode* frontPointer;\nbool recursivelyCheck(struct ListNode* currentNode){\nif(currentNode != NULL)\n{\nif(!recursivelyCheck(currentNode-&gt;next))\n{\nreturn false;\n}\nif(currentNode-&gt;val != frontPointer-&gt;val)\n{\nreturn false;\n}\nfrontPointer = frontPointer-&gt;next;\n}\nreturn true;\n}\nbool isPalindrome(struct ListNode *head)\n{\nfrontPointer = head;\nreturn recursivelyCheck(head);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_9","title":"\u73af\u5f62\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_10","title":"\u5feb\u6162\u6307\u9488","text":"<p>\u5047\u60f3\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u5728\u94fe\u8868\u4e0a\u79fb\u52a8\uff0c\u300c\u5154\u5b50\u300d\u8dd1\u5f97\u5feb\uff0c\u300c\u4e4c\u9f9f\u300d\u8dd1\u5f97\u6162\u3002\u5f53\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u4ece\u94fe\u8868\u4e0a\u7684\u540c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u79fb\u52a8\u65f6\uff0c\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u5c06\u4e00\u76f4\u5904\u4e8e\u300c\u4e4c\u9f9f\u300d\u7684\u524d\u65b9\uff1b\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u4f1a\u5148\u4e8e\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\uff0c\u5e76\u4e14\u4e00\u76f4\u5728\u73af\u5185\u79fb\u52a8\u3002\u7b49\u5230\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\u65f6\uff0c\u7531\u4e8e\u300c\u5154\u5b50\u300d\u7684\u901f\u5ea6\u5feb\uff0c\u5b83\u4e00\u5b9a\u4f1a\u5728\u67d0\u4e2a\u65f6\u523b\u4e0e\u4e4c\u9f9f\u76f8\u9047\uff0c\u5373\u5957\u4e86\u300c\u4e4c\u9f9f\u300d\u82e5\u5e72\u5708\u3002</p> <pre><code>bool hasCycle(struct ListNode *head) {\nstruct ListNode *p,*q;\np=head;\nq=head;\nwhile(q&amp;&amp;q-&gt;next)\n{\np=p-&gt;next;\nq=q-&gt;next-&gt;next;\nif(p==q)\n{\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_11","title":"\u76f8\u4ea4\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_12","title":"\u53cc\u6307\u9488\u6cd5","text":"<pre><code>struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\nif (headA == NULL || headB == NULL) {\nreturn NULL;\n}\nstruct ListNode *pA = headA, *pB = headB;\nwhile (pA != pB) {\npA = pA == NULL ? headB : pA-&gt;next;\npB = pB == NULL ? headA : pB-&gt;next;\n}\nreturn pA;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_13","title":"\u94fe\u8868\u6392\u5e8f","text":"<pre><code>struct ListNode *merge(struct ListNode *head1,struct ListNode *head2)//\u57fa\u672c\u7684\u94fe\u8868\u5408\u5e76\u64cd\u4f5c\n{\nstruct ListNode *dummyhead = (struct ListNode*)malloc(sizeof(struct ListNode));\nstruct ListNode *temp=dummyhead,*temp1=head1,*temp2=head2;\nwhile(temp1&amp;&amp;temp2)\n{\nif(temp1-&gt;val&lt;temp2-&gt;val)\n{\ntemp-&gt;next=temp1;\ntemp1=temp1-&gt;next;\n}else\n{\ntemp-&gt;next=temp2;\ntemp2=temp2-&gt;next;\n}\ntemp=temp-&gt;next;\n}\nif(temp1) temp-&gt;next=temp1;\nif(temp2) temp-&gt;next=temp2;\nreturn dummyhead-&gt;next;\n}\nstruct ListNode *sort(struct ListNode *head,struct ListNode *tail)\n{\nif(head==NULL)//\u7a7a\u94fe\u8868\nreturn head;\nif(head-&gt;next==tail)//\u5355\u8282\u70b9\u94fe\u8868\n{\nhead-&gt;next=NULL;\nreturn head;\n}\nstruct ListNode *fast=head,*slow=head;//\u5feb\u6162\u6307\u9488\u6cd5\u5bfb\u627e\u4e2d\u70b9\nwhile(fast!=tail)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next;\nif(fast!=tail)//\u91c7\u7528\u5206\u90e8\u79fb\u52a8\u5feb\u6307\u9488\u7684\u65b9\u6cd5\uff0c\u9632\u6b62fast\u79fb\u51fa\u94fe\u8868\n{\nfast=fast-&gt;next;\n}\n}\nstruct ListNode *mid=slow;\nreturn merge(sort(head,mid),sort(mid,fast));\n}\nstruct ListNode* sortList(struct ListNode* head){\nreturn sort(head,NULL);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_14","title":"\u91cd\u6392\u94fe\u8868","text":""},{"location":"cs/language/c/c/#_15","title":"\u4e2d\u70b9\u53cd\u8f6c\u540e\u534a\u6bb5\u94fe\u8868+\u5408\u5e76","text":"<pre><code>void reorderList(struct ListNode* head){\nif(head==NULL)\nreturn;\nstruct ListNode *slow,*fast;\nslow=head,fast=head;\nwhile(fast&amp;&amp;fast-&gt;next)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next-&gt;next;\n}\nstruct ListNode *l2=reverse(slow-&gt;next);\nslow-&gt;next=NULL;\nstruct ListNode *l1=head;\nstruct ListNode* l1_tmp;\nstruct ListNode* l2_tmp;//\u5408\u5e76\u94fe\u8868\u7684\u65b9\u6cd5\uff0c\u53cc\u6307\u9488\nwhile (l1 &amp;&amp; l2) {\nl1_tmp = l1-&gt;next;\nl2_tmp = l2-&gt;next;\nl1-&gt;next = l2;\nl1 = l1_tmp;\nl2-&gt;next = l1;\nl2 = l2_tmp;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_16","title":"\u5b57\u7b26\u4e32","text":""},{"location":"cs/language/c/c/#_17","title":"\u5b57\u7b26\u4e32\u8f6e\u8f6c","text":"<p>\u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32<code>s1</code>\u548c<code>s2</code>\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5<code>s2</code>\u662f\u5426\u4e3a<code>s1</code>\u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c<code>waterbottle</code>\u662f<code>erbottlewat</code>\u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002</p>"},{"location":"cs/language/c/c/#sprintf","title":"<code>sprintf</code>\u51fd\u6570","text":"<ul> <li> <p>\u8be5\u51fd\u6570\u5305\u542b\u5728<code>stdio.h</code>\u5934\u6587\u4ef6</p> </li> <li> <p><code>sprintf</code>\u51fd\u6570\u6253\u5370\u5230\u5b57\u7b26\u4e32\u4e2d\uff08\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8981\u8db3\u591f\u5bb9\u7eb3\u6253\u5370\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5185\u5b58\u6ea2\u51fa\uff09\uff0c\u800c<code>printf</code>\u51fd\u6570\u6253\u5370\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\u3002</p> </li> <li> <p><code>c   char str[20];   double f=14.309948;   sprintf(str,\"%6.2f\",f);//\u53ef\u4ee5\u63a7\u5236\u7cbe\u5ea6\uff0c\u6570\u5b57\u6574\u4f53\u957f\u5ea6\u5305\u62ec\u5c0f\u6570\u70b9\u4e3a6\u4f4d\uff0c\u4fdd\u75592\u4f4d\u5c0f\u6570   int a=20984,b=48090;   sprintf(str,\"%3d%6d\",a,b)//\u5c06\u591a\u4e2a\u6570\u503c\u6570\u636e\u8fde\u63a5\u8d77\u6765</code></p> </li> <li> <p>\u8fd4\u56de\u503c\uff1a\u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5199\u5165\u7684\u5b57\u7b26\u603b\u6570\uff0c\u4e0d\u5305\u62ec\u5b57\u7b26\u4e32\u8ffd\u52a0\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u5931\u8d25\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6570</p> </li> </ul>"},{"location":"cs/language/c/c/#strstr","title":"<code>strstr</code>\u51fd\u6570","text":"<ul> <li><code>strstr(str1,str2)</code>\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32<code>str2</code>\u662f\u5426\u662f<code>str1</code>\u7684\u5b50\u4e32</li> <li>\u5982\u679c\u662f\u5219\u8be5\u51fd\u6570\u8fd4\u56destr2\u5728str1\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740\uff0c\u5426\u5219\u8fd4\u56deNULL</li> </ul>"},{"location":"cs/language/c/c/#_18","title":"\u65b9\u6cd5\u4e00\uff1a\u641c\u7d22\u5b50\u5b57\u7b26\u4e32","text":"<p><code>s+s</code>\u5305\u542b\u4e86\u6240\u6709<code>s1</code>\u53ef\u4ee5\u901a\u8fc7\u8f6e\u8f6c\u64cd\u4f5c\u5f97\u5230\u7684\u5b57\u7b26\u4e32</p> <pre><code>bool isFlipedString(char* s1, char* s2) {\nint m = strlen(s1), n = strlen(s2);\nif (m != n) {\nreturn false;\n}\nchar * str = (char *)malloc(sizeof(char) * (m + n + 1));//\u6ce8\u610fmalloc\uff0c\u786e\u4fddsprintf\u51fd\u6570\u7684\u5b9e\u73b0\nsprintf(str, \"%s%s\", s2, s2);\nreturn strstr(str, s1) != NULL;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_19","title":"\u65b9\u6cd5\u4e8c\uff1a\u6a21\u62df","text":"<pre><code>bool isFlipedString(char* s1, char* s2){\nint m=strlen(s1);\nint n=strlen(s2);\nif(m!=n)\nreturn false;\nif(n==0)\nreturn true;\nfor(int i=0;i&lt;n;i++)\n{\nint flag=1;\nfor(int j=0;j&lt;n;j++)\n{\nif(s2[j]!=s1[(j+i)%n])\n{\nflag=0;\n}\n}\nif(flag) return true;\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_20","title":"\u5b57\u7b26\u4e32\u538b\u7f29","text":"<p>\u5b57\u7b26\u4e32\u538b\u7f29\u3002\u5229\u7528\u5b57\u7b26\u91cd\u590d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7f16\u5199\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b9e\u73b0\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u538b\u7f29\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u5b57\u7b26\u4e32<code>aabcccccaaa</code>\u4f1a\u53d8\u4e3a<code>a2b1c5a3</code>\u3002\u82e5\u201c\u538b\u7f29\u201d\u540e\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u53d8\u77ed\uff0c\u5219\u8fd4\u56de\u539f\u5148\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>char* compressString(char* S){//\u5178\u578b\u53cc\u6307\u9488\u6cd5\nint len=strlen(S);\nif(len&lt;=2)\nreturn S;\nchar *str=(char*)malloc(sizeof(char)*(len*3));\nint cnt=1;\nint p=0;\nfor(int i=1;i&lt;=len;i++)\n{\nif(S[i-1]==S[i])\n{\ncnt++;\n}\nelse{\nstr[p++]=S[i-1];\nint wlen = sprintf(&amp;str[p],\"%d\",cnt);//sprintf\u51fd\u6570\u8fd0\u7528\np+=wlen;//\u6b64\u5904\u6709\u6613\u9519\u70b9\uff0ccnt\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u5728\u5b57\u7b26\u6570\u7ec4\u4e2d\u5360\u7684\u4f4d\u4e0d\u540c\uff0c\u7528\u5230sprintf\u51fd\u6570\u4e0e\u6307\u9488\ncnt=1;\n}\n}\nstr[p]='\\0';\nif(strlen(str)&gt;=len)\nreturn S;\nreturn str;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_21","title":"\u5b57\u7b26\u4e32\u76f8\u52a0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 <code>num1</code> \u548c<code>num2</code> \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u5e76\u540c\u6837\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u3002</p>"},{"location":"cs/language/c/c/#_22","title":"\u6a21\u62df\u7684\u601d\u60f3 \u6a21\u62df\u52a0\u6cd5\u7ad6\u5f0f","text":"<pre><code>char *addStrings(char *num1,char*num2)\n{\nint i=strlen(num1)-1,j=strlen(num2)-1;\nchar *ans = (char*)malloc(sizeof(char)*(10000));\nint len=0,add=0;\nwhile(i&gt;=0||j&gt;=0||add!=0)\n{\nint x=i&gt;=0?num1[i]-'0':0;\nint y=j&gt;=0?num2[j]-'0':0;\nint result=x+y+add;\nans[len++]='0'+result%10;\nint add=result/10;\ni--,j--;\n}\nfor(int i=0;i*2&lt;len;i++)\n{\nint t=ans[i];\nans[i]=ans[len-1-i];\nans[len-1-i]=t;\n}\nans[len]='\\0';\nreturn ans;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_23","title":"\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6df7\u5408\u4e86\u6570\u5b57\u548c\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u5176\u4e2d\u7684\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u5c06\u8be5\u5b57\u7b26\u4e32\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u7684\u7c7b\u578b\u90fd\u4e0d\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b57\u6bcd\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u6570\u5b57\uff0c\u800c\u6570\u5b57\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de \u91cd\u65b0\u683c\u5f0f\u5316\u540e \u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u65e0\u6cd5\u6309\u8981\u6c42\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5b57\u7b26\u4e32 \u3002</p>"},{"location":"cs/language/c/c/#isdigit","title":"<code>isdigit</code>\u51fd\u6570","text":"<ul> <li>\u5934\u6587\u4ef6 <code>#include&lt;ctype.h&gt;</code></li> <li>\u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u963f\u62c9\u4f2f\u6570\u5b570~9\uff0c\u5982\u679c\u662f\uff0c\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6</li> </ul>"},{"location":"cs/language/c/c/#_24","title":"\u53cc\u6307\u9488\u6cd5\uff08\u53d8\u5f0f\uff09","text":"<p>\u6211\u4eec\u628a\u6570\u5b57\u548c\u5b57\u6bcd\u4e2d\u4e2a\u6570\u591a\u7684\u653e\u5728\u5076\u6570\u4f4d\u4e0a\uff08\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 000 \u5f00\u59cb\uff09\uff0c\u4e2a\u6570\u5c11\u7684\u653e\u5728\u5947\u6570\u4f4d\u4e0a\uff0c\u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u51fa\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u3002\u90a3\u4e48\u6211\u4eec\u7528 i \u548c j \u6765\u5206\u522b\u8868\u793a\u4e2a\u6570\u591a\u7684\u548c\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u653e\u7f6e\u7684\u4e0b\u6807\uff0c\u521d\u59cb\u4e3a i=0,j=1\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\u79fb\u52a8 iii\uff0c\u5f53 s[i] \u4e3a\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u7c7b\u578b\u65f6\uff0c\u90a3\u4e48\u5411\u53f3\u79fb\u52a8 j \u627e\u5230\u5f80\u540e\u7684\u7b2c\u4e00\u4e2a s[j]\u4e3a\u4e2a\u6570\u591a\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u7136\u540e\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u5373\u53ef\uff0c\u4e0d\u65ad\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u81f3 i\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5373\u53ef\u3002</p> <pre><code>char * reformat(char * s){\nint sum_digit = 0;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; i++) {\nchar c = s[i];\nif (isdigit(c)) {\nsum_digit++;\n}\n}\nint sum_alpha = len - sum_digit;\nif (abs(sum_digit - sum_alpha) &gt; 1) {\nreturn \"\";\n}\nbool flag = sum_digit &gt; sum_alpha;\nfor (int i = 0, j = 1; i &lt; len; i += 2) {\nif ((isdigit(s[i]) != 0) != flag) {\nwhile ((isdigit(s[j]) != 0) != flag) {\nj += 2;\n}\nchar c = s[i];\ns[i] = s[j];\ns[j] = c;\n}\n}\nreturn s;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_25","title":"\u540c\u6784\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p> <p>\u5982\u679c <code>s</code> \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u6309\u67d0\u79cd\u6620\u5c04\u5173\u7cfb\u66ff\u6362\u5f97\u5230 <code>t</code> \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p> <p>\u6bcf\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5e94\u5f53\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\uff0c\u540c\u65f6\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e0d\u540c\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u76f8\u540c\u5b57\u7b26\u53ea\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u5230\u81ea\u5df1\u672c\u8eab\u3002</p>"},{"location":"cs/language/c/c/#uthash","title":"<code>uthash</code>","text":"<ul> <li>\u5934\u6587\u4ef6<code>#include&lt;uthash.h&gt;</code></li> </ul>"},{"location":"cs/language/c/c/#_26","title":"\u521b\u5efa\u952e\u2014\u503c\u5bf9\u7ed3\u6784","text":"<ul> <li> <p>\u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u7ed3\u6784\u4f53</p> </li> <li> <p><code>C   struct  HashTable{       int id;                    // key\uff0c\u53ef\u4ee5\u662f\u6574\u578b\uff0c\u5b57\u7b26\uff0c\u6307\u9488        char name[10];             // value \u4e0d\u4e00\u5b9a\u5b58\u5728       UT_hash_handle hh;         /* makes this structure hashable */   };   struct HashTable *users =NULL;//\u521d\u59cb\u5316\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4e00\u5b9a\u8981\u521d\u59cb\u5316\u4e3aNULL</code></p> </li> </ul>"},{"location":"cs/language/c/c/#hash_find_int","title":"HASH_FIND_INT","text":"<pre><code>HASH_FIND_INT( users, &amp;user_id, s ); /* s: output pointer */\n//users:\u5f85\u67e5\u8be2\u7684hash\u8868\n//&amp;nuser_id\uff1a\u6307\u5411\u60f3\u67e5\u8be2\u7684key\u7684\u5730\u5740\n//s\uff1a\u8868\u793a\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u54c8\u5e0c\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u6307\u9488\uff0c\u9700\u8981\u4e8b\u5148\u5b9a\u4e49\n</code></pre> <pre><code>struct my_struct *find_user(int user_id) {   /* \u83b7\u5f97key=user_id\u7684\u952e\u503c\u5bf9 */\nstruct my_struct *s;   /* \u5b9a\u4e49s */\ns=(struct my_struct*)malloc(sizeof(struct my_struct));\nHASH_FIND_INT( users, &amp;user_id, s );  /* s: output pointer */\nreturn s;\n}\n</code></pre>"},{"location":"cs/language/c/c/#hash_add_int","title":"HASH_ADD_INT","text":"<p>\u7531\u4e8e\u8981\u4fdd\u6301\u54c8\u5e0c\u8868\u4e2d\u7684\u552f\u4e00\u6027\uff0c\u5728\u63d2\u5165\u952e\u503c\u5bf9\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5224\u65ad\u8868\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8981\u63d2\u5165\u7684\u952e\uff0c\u5982\u679c\u5df2\u5b58\u5728\uff0c\u5c31\u76f4\u63a5\u4fee\u6539\u952e\u5bf9\u5e94\u7684value\uff1b\u5982\u679c\u6ca1\u6709\u5b58\u5728\uff0c\u63d2\u5165\u952e\u503c\u5bf9\u3002</p> <pre><code>HASH_ADD_INT( users, id, s );  /* id: \u81ea\u5b9a\u4e49\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\u4e2dkey\u57df\u7684\u53d8\u91cf\u540d ,s\u662f\u5f85\u63d2\u5165\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\uff0c\u6307\u9488\u5f62\u5f0f\uff0ckey\u548cvalue\u90fd\u8981\u7ed9\u5b9a\n</code></pre> <pre><code>void add_user(int user_id, char *name) {\nstruct my_struct *s;\nHASH_FIND_INT(users, &amp;user_id, s);  /* id already in the hash? */\nif (s==NULL) {     /* \u5982\u679cs\u7684key\u4e0d\u5b58\u5728 */\ns = (struct my_struct *)malloc(sizeof *s);\ns-&gt;id = user_id;\nHASH_ADD_INT( users, id, s );  /* id: name of key field */\n}\nstrcpy(s-&gt;name, name);   /* s\u7684key\u5b58\u5728\uff0c\u76f4\u63a5\u66f4\u65b0value\u503c */\n}\n</code></pre>"},{"location":"cs/language/c/c/#_27","title":"\u7edf\u8ba1\u5143\u7d20\u4e2a\u6570","text":"<pre><code>num_numbers = HASH_COUNT(users);\n</code></pre>"},{"location":"cs/language/c/c/#_28","title":"\u5faa\u73af\u54c8\u5e0c\u8868","text":""},{"location":"cs/language/c/c/#for","title":"\u65b9\u6cd5\u4e00 \u81ea\u5df1\u5199for\u5faa\u73af","text":"<p>\u5728<code>uthash</code>\u4e2d\uff0c\u54c8\u5e0c\u8868\u4e2d\u6bcf\u4e2a\u952e\u503c\u5bf9\u4e4b\u95f4\u6709\u6307\u9488\u76f8\u8fde\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u53e5\u67c4<code>hh</code>\u6765\u5b9e\u73b0\u6307\u9488\u8c03\u7528\u3002 \u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u4f1a\u6709\u4e00\u4e2a\u524d\u5411\u6307\u9488<code>hh.prev</code>\u4e0e\u540e\u5411\u6307\u9488<code>hh.next</code>\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u53cc\u5411\u94fe\u8868\u4f7f\u7528\u3002</p> <pre><code>void print_users() {\nstruct my_struct *s;\nfor(s=users; s != NULL; s=s-&gt;hh.next) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#hash_iter","title":"\u65b9\u6cd5\u4e8c\uff1aHASH_ITER","text":"<pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp)\n//hh\u662f\u53e5\u67c4\uff0cs\u8868\u793a\u6bcf\u6b21\u5faa\u73af\u65f6\u83b7\u5f97\u7684\u90a3\u4e2a\u952e\u503c\u5bf9\uff0c\u5728\u51fd\u6570\u524d\u76f4\u63a5\u5b9a\u4e49\uff0c\u4e0d\u7528\u8d4b\u521d\u503c\uff0ctmp,\u4e34\u65f6\u53d8\u91cf\uff0c\u7ed3\u6784\u4f53\u6307\u9488\uff08\u4e0d\u7528\u8d4b\u503c\uff09\n</code></pre> <pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_29","title":"\u540c\u6784\u5b57\u7b26\u4e32\u89e3\u6cd5","text":"<ul> <li>\u53cc\u5c04\u5173\u7cfb</li> <li>\u7ef4\u62a4\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u7b2c\u4e00\u5f20\u54c8\u5e0c\u8868s2t\u4ee5s\u4e2d\u5b57\u7b26\u4e3a\u952e\uff0c\u6620\u5c04\u5230t\u7684\u5b57\u7b26\u4e3a\u503c\uff0c\u7b2c\u4e8c\u5f20\u5219\u76f8\u53cd\u3002\u4ece\u5de6\u81f3\u53f3\u904d\u5386\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\uff0c\u4e0d\u65ad\u66f4\u65b0\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u8fd4\u56defalse</li> </ul> <pre><code>struct HashTable {\nchar key;\nchar val;\nUT_hash_handle hh;\n};\nbool isIsomorphic(char* s, char* t) {\nstruct HashTable* s2t = NULL;\nstruct HashTable* t2s = NULL;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; ++i) {\nchar x = s[i], y = t[i];\nstruct HashTable *tmp1, *tmp2;\nHASH_FIND(hh, s2t, &amp;x, sizeof(char), tmp1);\nHASH_FIND(hh, t2s, &amp;y, sizeof(char), tmp2);\nif (tmp1 != NULL) {\nif (tmp1-&gt;val != y) {\nreturn false;\n}\n} else {\ntmp1 = malloc(sizeof(struct HashTable));\ntmp1-&gt;key = x;\ntmp1-&gt;val = y;\nHASH_ADD(hh, s2t, key, sizeof(char), tmp1);\n}\nif (tmp2 != NULL) {\nif (tmp2-&gt;val != x) {\nreturn false;\n}\n} else {\ntmp2 = malloc(sizeof(struct HashTable));\ntmp2-&gt;key = y;\ntmp2-&gt;val = x;\nHASH_ADD(hh, t2s, key, sizeof(char), tmp2);\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_30","title":"\u6392\u5e8f","text":""},{"location":"cs/language/c/c/#_31","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void qsort(int l,int r){\nint mid=a[(l+r)/2];\nint i=l,j=r;\nwhile(i&lt;=j){\nwhile(a[i]&lt;mid) i++;\nwhile(a[j]&gt;mid) j--;\nif(i&lt;=j){\nswap(&amp;a[i],&amp;a[j]);\ni++;\nj--;\n}\n}\nif(l&lt;j) qsort(l,j);\nif(i&lt;r) qsort(i,r);\n}\n</code></pre> <pre><code>void qsort(int a[],int x,int y)\n{\nif(x&gt;=y)\nreturn;\nint left=x;\nint right=y;\nint mid=a[left];\nwhile(left&lt;=right)\n{\nwhile(a[right]&gt;=mid&amp;&amp;left&lt;right)\n{\nright--;\n}\na[left]=a[right];\nwhile(a[left]&lt;=mid&amp;&amp;left&lt;right)\n{\nleft++;\n}\na[right]=a[left];\n}\na[left]=mid;\nqsort(a,x,left-1);\nqsort(a,left+1,y);\n}\n</code></pre>"},{"location":"cs/language/c/c/#_32","title":"\u63d2\u5165\u6392\u5e8f","text":"<pre><code>void insertion_sort(int a[],int len){\nint key;int i,j;\nfor(i=1;i&lt;len;i++){\nkey=a[i];\nj=i-1;\nwhile(j&gt;=0&amp;&amp;a[j]&gt;key){\na[j+1]=a[j];\nj--;\n}\na[j+1]=key;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_33","title":"\u5192\u6ce1\u6392\u5e8f","text":"<pre><code>void bubble_sort(int a[],int len)\n{\nfor(int i=len-1;i&gt;0;i--)\n{\nint loc=0;\nfor(int j=0;j&lt;i;j++)\n{\nif(a[j]&gt;a[j+1])\n{\nswap(&amp;a[j],&amp;a[j+1]);\nloc=j;\n}\n}\ni=loc+1;\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_34","title":"\u5f52\u5e76\u6392\u5e8f","text":"<pre><code>void merge_sort(int a[],int start,int end)\n{\nif(start&gt;=end)\nreturn;\nint b[100001];\nint mid=(end+start)/2;\nint start1 = start,end1 = mid;\nint start2 = mid+1,end2 = end;\nmerge_sort(a , start1 , end1);\nmerge_sort(a ,  start2 , end2);\nint k=start;\nwhile(start1 &lt;= end1&amp;&amp;start2 &lt;= end2)\n{\nb[k++]=a[start1]&lt;a[start2]?a[start1++]:a[start2++];\n}\nwhile(start1&lt;=end1)\n{\nb[k++]=a[start1++];\n}\nwhile(start2&lt;=end2)\n{\nb[k++]=a[start2++];\n}\nfor(k=start;k&lt;=end;k++)\n{\na[k]=b[k];\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_35","title":"\u9009\u62e9\u6392\u5e8f","text":"<pre><code>void selection_sort(int a[],int len)\n{\nfor(int i=0;i&lt;n-1;i++)\n{\nint min=i;\nfor(int j=i+1;j&lt;n;j++)\n{\nif(a[j]&lt;a[min])\n{\nmin=j;\n}\n}\nswap(&amp;a[min],&amp;a[i]);\n}\n}\n</code></pre>"},{"location":"cs/language/c/c/#_36","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"cs/language/c/c/#_37","title":"\u4e0e\u8fd0\u7b97<code>&amp;</code>","text":"<ul> <li>\u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1</li> </ul> <p>3&amp;5 \u5373 0000 0011&amp; 0000 0101 = 0000 0001\uff0c\u56e0\u6b64 3&amp;5 \u7684\u503c\u5f971\u3002</p>"},{"location":"cs/language/c/c/#_38","title":"\u7528\u9014","text":"<p>1.\u6e05\u96f6\uff1a\u5982\u679c\u60f3\u5c06\u4e00\u4e2a\u5355\u5143\u6e05\u96f6\uff0c\u53ea\u8981\u4e0e\u4e00\u4e2a\u5404\u4f4d\u90fd\u4e3a\u96f6\u7684\u6570\u503c\u76f8\u4e0e\uff0c\u7ed3\u679c\u4e3a\u96f6</p> <p>2.\u53d6\u4e00\u4e2a\u6570\u7684\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u53d6\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff08X&amp;Y=0000 1110\uff09\u5373\u53ef\u5f97\u5230X\u7684\u6307\u5b9a\u4f4d\u3002</p> <p>3.\u5224\u65ad\u5947\u5076\uff1a\u53ea\u8981\u6839\u636e\u6700\u672b\u4f4d\u662f0\u8fd8\u662f1\u6765\u51b3\u5b9a\uff0c\u4e3a0\u5c31\u662f\u5076\u6570\uff0c\u4e3a1\u5c31\u662f\u5947\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u7528if ((a &amp; 1) == 0)\u4ee3\u66ffif (a % 2 == 0)\u6765\u5224\u65ada\u662f\u4e0d\u662f\u5076\u6570\u3002</p>"},{"location":"cs/language/c/c/#_39","title":"\u6216\u8fd0\u7b97|","text":"<p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\u53ea\u8981\u6709\u4e00\u4e2a\u4e3a1\uff0c\u5176\u503c\u4e3a1</p>"},{"location":"cs/language/c/c/#_40","title":"\u7528\u9014","text":"<ul> <li>\u5e38\u7528\u6765\u5bf9\u4e00\u4e2a\u6570\u636e\u7684\u67d0\u4e9b\u4f4d\u8bbe\u7f6e\u4e3a1</li> </ul>"},{"location":"cs/language/c/c/#_41","title":"\u5f02\u6216\u8fd0\u7b97^","text":"<pre><code>0^0=0 0^1=1 1^0=1 1^1=0\n</code></pre> <p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u76f8\u540c\u4e3a0\uff0c\u5426\u5219\u4e3a1</p> <p>\u5f02\u6216\u7684\u51e0\u6761\u6027\u8d28:</p> <ul> <li>1\u3001\u4ea4\u6362\u5f8b</li> <li>2\u3001\u7ed3\u5408\u5f8b (a^b)^c == a^(b^c)</li> <li>3\u3001\u5bf9\u4e8e\u4efb\u4f55\u6570x\uff0c\u90fd\u6709 x^x=0\uff0cx^0=x</li> <li>4\u3001\u81ea\u53cd\u6027: a^b^b=a^0=a;</li> </ul>"},{"location":"cs/language/c/c/#_42","title":"\u7528\u9014","text":"<ul> <li>\u7ffb\u8f6c\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u5c06\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff08X^Y=1010 0001\uff09\u5373\u53ef\u5f97\u5230\u3002</li> <li>\u4e0e0\u76f8\u5f02\u6216\u503c\u4e0d\u53d8</li> <li>\u4ea4\u6362\u4e24\u4e2a\u6570</li> </ul>"},{"location":"cs/language/c/c/#_43","title":"\u5de6\u79fb\u8fd0\u7b97\u7b26&lt;&lt;","text":"<p>\u5c06\u4e00\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff08\u5de6\u8fb9\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e22\u5f03\uff0c\u53f3\u8fb9\u88650\uff09\u3002</p> <p>\u8bbe a=1010 1110\uff0ca = a&lt;&lt; 2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u5de6\u79fb2\u4f4d\u3001\u53f3\u88650\uff0c\u5373\u5f97a=1011 1000\u3002</p> <p>\u82e5\u5de6\u79fb\u65f6\u820d\u5f03\u7684\u9ad8\u4f4d\u4e0d\u5305\u542b1\uff0c\u5219\u6bcf\u5de6\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u4e58\u4ee52\u3002</p>"},{"location":"cs/language/c/c/#_44","title":"\u53f3\u79fb\u8fd0\u7b97\u7b26&gt;&gt;","text":"<p>\u5b9a\u4e49\uff1a\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u6b63\u6570\u5de6\u88650\uff0c\u8d1f\u6570\u5de6\u88651\uff0c\u53f3\u8fb9\u4e22\u5f03\u3002</p> <p>\u4f8b\u5982\uff1aa=a&gt;&gt;2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u53f3\u79fb2\u4f4d\uff0c\u5de6\u88650 \u6216\u8005 \u5de6\u88651\u5f97\u770b\u88ab\u79fb\u6570\u662f\u6b63\u8fd8\u662f\u8d1f\u3002</p> <p>\u64cd\u4f5c\u6570\u6bcf\u53f3\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u9664\u4ee52\u3002</p>"},{"location":"cs/language/c/c/#_45","title":"\u5e94\u7528","text":""},{"location":"cs/language/c/c/#_46","title":"\u5feb\u901f\u5e42","text":"<pre><code>int quickpower(int a,int b)\n{\nint ans=1;\nint base=a;\nwhile(b&gt;0)\n{\nif(b&amp;1)//b\u5728\u4e8c\u8fdb\u5236\u4e0b\u6700\u540e\u4e00\u4f4d\u662f\u4e0d\u662f1\n{\nans*=base;\n}\nbase*=base;\nb&gt;&gt;=1;//b\u53f3\u79fb\u4e00\u4f4d\n}\nreturn ans;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_47","title":"\u53d6\u4f59\u8fd0\u7b97","text":"\\[ (A+B)mod\\,b=(A\\,mod\\,b+B\\,mod\\,b)mod\\,b\\\\ (A\\times B)\\,mod\\,b=((A\\,mod\\,b)\\times (B\\,mod\\,b))\\,mod\\,b \\] <pre><code>while(b &gt; 0)\n{\nif(b &amp; 1)\n{\nans *= base;\nans %= m;\n}\nbase *= base;\nbase %= m;\nb &gt;&gt;= 1;\n}\n</code></pre>"},{"location":"cs/language/c/c/#1","title":"\u4f4d1\u7684\u4e2a\u6570","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff08\u4ee5\u4e8c\u8fdb\u5236\u4e32\u7684\u5f62\u5f0f\uff09\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a '1' \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a\u6c49\u660e\u91cd\u91cf\uff09</p>"},{"location":"cs/language/c/c/#_48","title":"\u6cd5\u4e00 \u76f4\u63a5\u8ba1\u7b97","text":"<pre><code>int hammingweight(int x)\n{\nint cnt=0;\nfor(int i=0;i&lt;32;i++)\n{\ncnt+=(n&gt;&gt;i)&amp;1;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/language/c/c/#_49","title":"\u6cd5\u4e8c\uff1a\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28","text":"\\[ n\\,\\&amp;\\,(n-1) \\] <p>\u7ed3\u679c\u4e3a\u5c06n\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d1\u53d8\u62100</p> <p>\u91cd\u590d\u8be5\u64cd\u4f5c\uff0c\u76f4\u5230 n \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u5168\u90e8\u6570\u4f4d\u90fd\u53d8\u6210 00\uff0c\u5219\u64cd\u4f5c\u6b21\u6570\u5373\u4e3a n\u7684\u4f4d 11 \u7684\u4e2a\u6570\u3002</p> <pre><code>int hammingweight(int x)\n{\nint cnt=0;\nwhile(x!=0)\n{\nx=x&amp;(x-1);\ncnt++;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/language/c/c/#2","title":"\u5224\u65ad\u662f\u4e0d\u662f2\u7684\u6574\u6570\u6b21\u65b9","text":"<pre><code>if(n&amp;(n-1)==0)//2\u7684\u6574\u6570\u6b21\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ea\u67091\u4e2a1\n</code></pre>"},{"location":"cs/opt/","title":"\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66\u201c\u4f18\u5316\u57fa\u672c\u7406\u8bba\u4e0e\u65b9\u6cd5\u201d\u8bfe\u7a0b\u7b14\u8bb0\u4e0e\u603b\u7ed3</p>"},{"location":"cs/opt/lec1/","title":"Introduction to Optimization","text":"<p> \u7ea6 407 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"cs/opt/lec1/#general-formulation-of-the-optimization-problem","title":"General Formulation of  The Optimization Problem","text":"<p>Let \\(x\\) be an \\(n\\)-dimensional real vector: \\(x=(x^{(1)},\u2026\u2026,x^{(n)})^T \\in \\mathbb R^n\\)</p> <p>and \\(f_0(x),\u2026\u2026, f_m(x)\\) be some real-valued functions defined on a set \\(S\\in \\mathbb{R}^n\\). We consider different variants of the following general minimization problem:</p> \\[ minf_0(x)\\\\s.t. \\ f_j(x)\\leq0,\\ j=1\u2026\u2026m,\\\\x\\in S \\] <ul> <li> <p>We call \\(f_0(x)\\) the objective function of our problem</p> </li> <li> <p>The vector function \\(f( x)=(f_1(x),\u2026\u2026,f_m(x))^T\\) is called the vector of functional constraints(\u6cdb\u51fd\u7ea6\u675f).</p> </li> <li> <p>The set \\(S\\) is the basic feasible set(\u57fa\u672c\u53ef\u884c\u89e3)</p> </li> <li>The set \\(Q =\\left\\{x\\in S| f_j(x)\\le 0, j=1\u2026\u2026m\\right\\}\\) is the entire feasible set of the problem.</li> </ul> <p>There exists a natural classification of the types of minimization problems:</p> <ul> <li>constrained problems: \\(Q\\subset \\mathbb{R}^n\\)</li> <li>unconstrained problems: \\(Q \\equiv \\mathbb R^n\\)</li> <li>smooth problems: all \\(f_j(x)\\) are differentiable</li> <li>nonsmooth problems: there are several non-differentiable components \\(f_k(x)\\)  \uff08\u4f8b\u5982\u7edd\u5bf9\u503c\u51fd\u6570\uff09</li> <li>linearly constrained problems: the functional constraints are affine like:</li> </ul> \\[ f_j(x)=\\sum_{i=1}^na_j^{i}x^{(i)}+b_j\\equiv&lt;a_j,x&gt;+b_j,j=1\u2026\u2026m \\] <ul> <li>linear optimization problems: \\(f_0(\\cdot)\\) is also affine</li> <li>quadratic optimization problem: \\(f_0(\\cdot)\\) is quadratic(\u4e8c\u6b21)</li> </ul> <p>There is also a classification based on properties of the feasible set</p> <ul> <li>called feasible if \\(Q\\neq\\varnothing\\)</li> <li>called strictly feasible, if there exists an \\(x\\in int\\ Q\\)\uff08\u5185\u70b9\uff09 such that \\(f_j(x)&lt;0(or&gt;0)\\) for all inequality constraints and \\(f_j(x)=0\\) for all equality constraints(Slater condition) </li> </ul> <p>Finally, we distinguish different types of solutions to the problem:</p> <ul> <li>\\(x^*\\) is called the global optimal solution if \\(f_0(x^*)\\le f_0(x)\\) for all \\(x\\in Q\\)</li> <li>called a local optimal solution if \\(\\exists \\delta\\), for all \\(x \\in NBR(x^*,\\delta)\\cap Q\\), we have \\(f_0(x^*)\\le f_0(x)\\)</li> </ul> <p>Example:</p> <p>Let our initial problem be as follows: $$ Find\\,  x\\in \\mathbb R^n \\, such \\, that\\, f_j(x)=a_j\\,j=1\u2026\u2026m $$ Then we can consider the problem $$ \\mathop{min}\\limits_{x}\\sum_{j=1}^m(f_j(x)-a_j)^2 $$</p> <p>Sometimes our decision variables must be integers. This can be described by the following constraint: $$ sin(\\pi x^{(i)})=0 $$</p>"},{"location":"cs/opt/lec1/#interplay-of-optimization-and-machine-learning","title":"Interplay of Optimization and Machine Learning","text":""},{"location":"math/","title":"\u6570\u5b66\u57fa\u7840","text":"<p> \u7ea6 36 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u8bb0\u5f55\u5206\u6790\uff0c\u4ee3\u6570\uff0c\u6982\u7387\uff0c\u4f18\u5316\u7684\u5173\u952e\u77e5\u8bc6</p>"},{"location":"math/#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u6570\u5b66\u5206\u6790</li> <li>\u7ebf\u6027\u4ee3\u6570</li> <li>\u6982\u7387\u8bba</li> <li>\u4f18\u5316</li> </ul>"},{"location":"math/algebra/","title":"\u7ebf\u6027\u4ee3\u6570","text":"<p> \u7ea6 92 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\u4f53\u7cfb\u68b3\u7406</p> <p>\u53c2\u8003\u4e66\u76ee\uff1a\u300a\u5927\u5b66\u6570\u5b66\u2014\u2014\u4ee3\u6570\u4e0e\u51e0\u4f55\u300b         \u300aLinear Algebra Done Right\u300b</p> <p>\u672c\u9875\u7684\u6700\u540e\u662f\u6211\u7684\u7ebf\u4ee3II(H)\u671f\u672b\u68b3\u7406\u7b14\u8bb0\uff0c\u662f\u6211\u9488\u5bf9\u81ea\u5df1\u638c\u63e1\u7a0b\u5ea6\u7684\u987a\u5e8f\u6574\u7406\u7684\uff0c\u5e76\u6ca1\u6709\u6309\u7167\u77e5\u8bc6\u4f53\u7cfb\u7684\u987a\u5e8f\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> <p>\u7ebf\u6027\u4ee3\u6570\u671f\u672b\u590d\u4e60\u7b14\u8bb0</p>"},{"location":"math/analysis/","title":"\u6570\u5b66\u5206\u6790","text":"<p> \u7ea6 38 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u6570\u5b66\u5206\u6790(\u9648\u7eaa\u4fee)</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300a\u6570\u5b66\u5206\u6790\uff08\u9648\u7eaa\u4fee\uff09\u7b2c\u4e09\u7248\u300b \u300a\u6570\u5b66\u5206\u6790\u4e2d\u7684\u5178\u578b\u95ee\u9898\u4e0e\u65b9\u6cd5\u300b \u88f4\u793c\u6587</p>"},{"location":"math/mdl/","title":"Mathematics for Deep Learning","text":"<p> \u7ea6 553 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Abstract</p> <p>The goal of this note is to repeat the necessary minimal math background to follow computervision lectures.</p> <p>By Prof. Dr.-Ing. Andreas Geiger,University of Tubingen</p>"},{"location":"math/mdl/#linear-algebra","title":"Linear Algebra","text":""},{"location":"math/mdl/#tensors","title":"Tensors","text":"<ul> <li>A tensor is an array with more than 2 axes(e.g.:RGB image)</li> <li>Example for tensor of shape \\(M \\times N \\times K\\): \\(A \\in \\mathbb{R}^{M\\times N\\times K}\\)</li> </ul>"},{"location":"math/mdl/#linear-dependence-and-span","title":"Linear Dependence and Span","text":"<ul> <li>We call \\(A x= \\sum_ix_i A\\) a linear combination</li> <li>\\(A x =  b\\) has solution \\(\\iff\\) \\(b\\) is in the span of columns of \\(A\\)</li> <li>This particualr span is known as column space or range</li> <li>A square matrix with any two linearly dependent columns is called singular</li> </ul>"},{"location":"math/mdl/#vectors-and-matrix-norms","title":"Vectors and Matrix Norms","text":"<ul> <li>\\(\\mathscr{l}_p\\)-norm is defined as : \\(\\Vert x\\Vert_p=(\\sum_i\\vert x_i\\vert^p)^{\\frac{1}{p}}\\)</li> <li>\\(\\Vert x \\Vert_\\infty=max_i\\vert x_i\\vert\\)</li> <li>The size of a matrix can be measured with the Frobenius norm: \\(\\Vert  A \\Vert_F=\\sqrt{\\sum_{i,j}a_{i,j}^2}\\)</li> </ul>"},{"location":"math/mdl/#eigenvalue-decomposition","title":"Eigenvalue Decomposition","text":"<ul> <li>\\(Av=\\lambda  v\\)</li> <li>We concatenate all eigenvectors to form a matrix \\(V=( v_1,\u2026, v_N)\\)</li> <li>We form all eignvalues into a diagnal matrix \\(\\Lambda = diag(\\lambda_1,\u2026\uff0c\\lambda_N)^{T}\\)</li> <li>The eigendecomposition of  \\(A\\) is given by: \\(A =  V \\Lambda  V^{-1}\\)</li> <li>Every real symmetric matrix \\(A\\) can be decomposed into \\(A =  Q \\Lambda  Q^{T}\\)</li> <li>\\(Q\\) is an orthonormal matrix composed of the eigenvectors \\({ v_i}_{i=1}^{N}\\)  of  \\(A\\)</li> </ul> <p> \\(A\\) distorts the unit circle by scaling space in direction \\(v_i\\) by \\(\\lambda_i\\)</p> <p>The EVD can be computed easily in NumPy: np.linalg.eig</p>"},{"location":"math/mdl/#singular-value-decomposition","title":"Singular Value Decomposition","text":"<ul> <li>Eigenvalue decomposition can only be app;ied to square matrices</li> <li>For non-square matrices we can use singular value decomposition</li> <li>Factorizes a matrx \\(A \\in \\mathbb{R}^{M\\times N}\\) as \\(A = U  D  V^{T}\\), where \\(U \\in \\mathbb R^{M\\times M},  D\\in \\mathbb R^{M\\times N},  V \\in \\mathbb R^{N\\times N}\\)</li> <li>The elements along the diagonal of \\(D\\) are known as singular values</li> <li>The columns of \\(U\\) and \\(V\\) are left/right-singular vectors,respectively.</li> </ul>"},{"location":"math/mdl/#relationship-between-evd-and-svd","title":"Relationship between EVD and SVD","text":"<ul> <li>The right-singular vectors are the eigenvectors of \\(A^{T} A\\)</li> <li>\\(A^{T} A =  V  D U^{T} U  DV^{T}= V  D^2 V^{T}\\)</li> <li> <p>The left-singular vectors are the egienvectors of  \\(AA^{T}\\)</p> </li> <li> <p>The eigenvalues of \\(A^{T} A\\) and \\(A A^{T}\\) are equal to the squared singular values of \\(A\\)</p> </li> </ul>"},{"location":"math/mdl/#probability","title":"Probability","text":""},{"location":"math/mdl/#terminology","title":"Terminology","text":"<ul> <li>A random variable is a variable that can take on different values randomly</li> <li>Random variables may be either discrete or continuous</li> <li>A discrete random variable has a finite or countably infinite number of states</li> <li>A continuous random vairiable is associated with a real value</li> <li>A probability distribution is a descrption of how likely a random variable or set of random variable is to take on each of its possible states</li> </ul>"},{"location":"math/mdl/#discrete-probability-distributions","title":"Discrete Probability Distributions","text":"<p>\\(p(x)\\) for \\(p(X=x)\\in [0,1]\\), \\(p(x)\\) is called the probability mass function</p> <p>\\(p(X)\\) denote the probability distribution over \\(X\\)</p> <p>If \\(X\\) follows distribution \\(p(X)\\), we also write \\(X\\sim p(X)\\)</p> <ul> <li>Joint probability: \\(p(x,y)\\) for \\(p(X=x,Y=y)\\)</li> <li>Conditional probability: \\(p(x|y)=\\frac{p(x,y)}{p(y)}\\)</li> <li>Marginal probability: \\(p(y)=\\sum_{x\\in \\mathcal{X}}p(x,y)\\)</li> </ul>"},{"location":"math/probability/note14/","title":"Conditional Probability, Independence, and Combinations of Events","text":"<p> \u7ea6 824 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"math/probability/note14/#conditional-probability","title":"Conditional Probability","text":"<p>For events \\(A,B \\in \\Omega\\) in the same probability space such that \\(P[B]&gt;0\\) the conditional probability of \\(A\\) given \\(B\\) is: $$ P[A|B]=\\frac{P[A\\cap B]}{P[B]} $$</p>"},{"location":"math/probability/note14/#bayesian-inference","title":"Bayesian Inference","text":"<ul> <li>Conditional probability is at the heart of a subject called Bayesian inference.</li> <li>Bayesian inference is a way to update knowledge after making an observation.</li> </ul> <p>Example: we may have an estimate of the probability of a given event \\(A\\). After event \\(B\\) occurs, we can update this estimate to \\(P[A|B]\\). In this interpretation, \\(P[A]\\) can be thought of as a \\(prior\\) probability: our assignment of the likelihood of an event of interest, \\(A\\), before making an observation. \\(P[A|B]\\) can be interpreted as the posterior probability of \\(A\\) after observation.</p> <p>We are given \\(P[A]\\), which is the probability that the event of interest happens. We are given \\(P[B|A], P[B|\\overline{A}]\\), which quantify how noisy the observation is. Now we want to calculate \\(P[A|B]\\),  the probability that the event of interest happens given we made the observation. We can proceed as follows:</p> \\[ P[A|B]=\\frac{P[A\\cap B]}{P[B]}=\\frac{P[B|A]P[A]}{P[B]} \\] \\[ P[B]=P[A\\cap B]+P[\\overline{A}\\cap B]=P[B|A]P[A]+P[B|\\overline{A}]P[\\overline{A}]  \\] \\[ So\\, P[A|B]=\\frac{P[B|A]P[A]}{P[B|A]P[A]+P[B|\\overline{A}]P[\\overline{A}]} \\]"},{"location":"math/probability/note14/#bayess-rules-and-total-probability-rule","title":"Bayes's Rules and Total Probability Rule","text":"<ul> <li>Bayes's Rule is useful when one wants to calculate \\(P[A|B]\\) but is given \\(P[B|A]\\) instead.</li> <li>Total Probability Rule is an application of the strategy of dividing into cases. If \\(A\\) happens, the probability that \\(B\\) happens is \\(P[B|A]\\), if \\(A\\) does not happen, the probability that \\(B\\) happens is \\(P[B|\\overline{A}]\\)</li> </ul>"},{"location":"math/probability/note14/#generalization","title":"Generalization","text":"<p>We say that an event \\(A\\) is partitioned into \\(n\\) events \\(A_1,\\cdots, A_n\\) if </p> <ul> <li>\\(A=A_1\\cup \\cdots \\cup A_n\\) and</li> <li>\\(A_i\\cap A_j=\\varnothing\\) for all \\(i \\neq j\\)</li> </ul> <p>In other words, each outcome in \\(A\\) belongs to exactly one of the events \\(A_1,\\cdots, A_n\\)</p> <p>Now let \\(A_1,\\cdots,A_n\\) be a partition of the sample space \\(\\Omega\\). Then, the Total Probability Rule for any event \\(B\\) is </p> \\[ P[B]=\\sum_i^nP[B\\cap A_i]=\\sum_i^nP[B|A_i]P[A_i] \\] <p>while Bayes' Rule , assuming \\(P[B]\\neq 0\\) is given by:</p> \\[ P[A_i|B]=\\frac{P[B|A_i]P[A_i]}{P[B]}=\\frac{P[B|A_i]P[A_i]}{\\sum_{j=1}^nP[B|A_j]P[A_j]} \\]"},{"location":"math/probability/note14/#combinational-of-events","title":"Combinational of Events","text":""},{"location":"math/probability/note14/#independent-events","title":"Independent Events","text":""},{"location":"math/probability/note14/#independence","title":"Independence","text":"<p>Two events \\(A,B\\) in the same probability space are said to be independent if \\(P[A\\cap B]=P[A]\\times P[B]\\)</p> <p>The intuition behind this definition is the following:</p> <p>$$ P[A|B]=\\frac{P[A\\cap B]}{P[B]}=\\frac{P[A]\\times P[B]}{P[B]}=P[A] $$ Thus independence has the natural meaning that \"the probability of \\(A\\) is not affected by whether or not \\(B\\) occurs\".</p>"},{"location":"math/probability/note14/#mutual-independence","title":"Mutual independence","text":"<p>Events \\(A_1,\\cdots,A_n\\) are said to be mutually independent if for every subset \\(I\\subset \\left\\{ 1,\\cdots,n \\right\\} \\ with\\ size\\ \\vert I\\vert\\ge 2\\),</p> <p>$$ P[\\cap_{i\\in I}A_i]=\\mathop{\\Pi}_{i\\in I}P[A_i] $$ For mutually independent events \\(A_1,\\cdots,A_n\\), it is not hard to check from the definition of conditional probability that, for any \\(1\\le i\\le n\\) and any subset \\(I\\subset \\left\\{1,\\cdots,n\\right\\}\\setminus \\left\\{i\\right\\}\\), we have:</p> \\[ P[A_i|\\cap_{j\\in I}A_j]=P[A_j] \\] <p>Note</p> <p>The independence of every pair of events(so-called pairwise independence) does not necessarily imply mutual independence</p>"},{"location":"math/probability/note14/#intersections-of-events","title":"Intersections of Events","text":"<p>Product Rule</p> <p>For any events \\(A,B\\), we have $$ P[A\\cap B]=P[A]P[B|A] $$</p> <p>More generally, for any events \\(A_1,\\cdots,A_n\\),</p> \\[ P[\\cap_{i=1}^nA_i]=P[A_1]\\times P[A_2|A_1]\\times P[A_3|A_1\\cap A_2]\\times \\cdots \\times P[A_n|\\cap_{i=1}^{n-1}A_i] \\]"},{"location":"math/probability/note14/#unions-of-events","title":"Unions of Events","text":"<p>Inclusion-Exclusion</p> <p>Let \\(A_1,\\cdots,A_n\\) be events in some probability space, where \\(n\\ge 2\\). Then, we have $$ P[A_1\\cup \\cdots \\cup A_n]=\\sum_{i=1}^nP[A_i]-\\sum_{i&lt;j}P[A_i\\cap A_j]+\\sum_{i&lt;j&lt;k}P[A_i\\cap A_j\\cap A_k]-\\cdots +(-1)^{n-1}P[A_1\\cap A_2\\cap \\cdots \\cap A_n] $$</p> <ul> <li> <p>Mutually exclusive events: (\\(A_i\\cap A_j=\\varnothing\\)): \\(P[\\cup_{i=1}^nA_i]=\\sum_{i=1}^nP[A_i]\\)</p> </li> <li> <p>Union bound: \\(P[\\cup_{i=1}^n]\\le \\sum_{i=1}^nP[A_i]\\)</p> </li> </ul> <p>This merely says that adding up the \\(P[A_i]\\) can only overestimate the probability of the union</p>"},{"location":"math/probability/note15/","title":"Random Variables: Distribution and Expectation","text":"<p> \u7ea6 545 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"math/probability/note15/#random-variables","title":"Random Variables","text":"<p>A random variable \\(X\\) on a sample space \\(\\Omega\\) is a function \\(X: \\Omega\\rightarrow R\\) that assigns to each point \\(\\omega\\in \\Omega\\) a real number \\(X(\\omega)\\)</p> <p>Note</p> <p>the term \u201crandom variable\u201d is really something of a misnomer: it is a function so there is nothing random about it and it is definitely not a variable!</p> <p></p>"},{"location":"math/probability/note15/#probability-distribution","title":"Probability Distribution","text":"<p>When we introduced the basic probability space we defined two things:</p> <ul> <li>The sample space \\(\\Omega\\) consisting of all the possible outcomes(sample points) of the experiment.</li> <li>The probability of each of the sample points</li> </ul> <p>Analogously, there are two important things about any random variable\"</p> <ul> <li>The set of values that it can take</li> <li>The probability with which it takes on the values.</li> </ul> <p>Since a random variable is defined on a probability space, we can calculate these probabilities given the probabilities of the sample points.</p> <p>Let \\(a\\) be any number in the range of a random variable \\(X\\). Then the set </p> <p>\\(\\left\\{ \\omega\\in\\Omega:X(\\omega)=a\\right\\}\\) is an event in the sample space, abbreviated by \\(X=a\\).</p> <p></p> <p>Distribution:</p> <p>The distribution of a discrete random variable \\(X\\) is the collection of values \\(\\left\\{ (a,P[X=a]):a\\in \\mathscr{A}\\right\\}\\), where \\(\\mathscr{A}\\) is the set of all possible values taken by \\(X\\).</p> <p>Note that the collection of events \\(X=a\\) satisfy two important properties:</p> <ul> <li>Any two events \\(X=a_1,X=a_2\\) with \\(a_1 \\ne a_2\\) are disjoint.</li> <li>The union of all these events is equal to the entire sample space \\(\\Omega\\)</li> </ul> <p>Thus the collection of events form a partition of the sample space.</p> <p></p> <p></p>"},{"location":"math/probability/note15/#bernouli-distribution","title":"Bernouli Distribution","text":"<p>a random variable which takes value in {0,1}: $$ P[X=i]=\\begin{cases}p&amp;i=1\\ 1-p&amp;i=0\\end{cases} $$</p>"},{"location":"math/probability/note15/#binomial-distribution","title":"Binomial Distribution","text":"\\[ P[X=i]=\\begin{pmatrix}n\\\\i\\end{pmatrix}p^i(1-p)^{n-i} \\]"},{"location":"math/probability/note15/#hypergeometric-distribution","title":"Hypergeometric Distribution","text":"\\[ P[Y=k]=\\frac{\\begin{pmatrix}B\\\\k \\end{pmatrix}\\begin{pmatrix}N-B\\\\n-k\\end{pmatrix}}{\\begin{pmatrix}N\\\\n\\end{pmatrix}} \\] <p>Note</p> <p>\u4e8c\u9879\u5206\u5e03\u6709\u653e\u56de\uff0c\u8d85\u51e0\u4f55\u5206\u5e03\u65e0\u653e\u56de</p>"},{"location":"math/probability/note15/#multiple-random-variables-and-independence","title":"Multiple Random Variables and Independence","text":"<p>The joint distribution for two discrete random variable \\(X,Y\\) is the collection of values \\(\\left\\{((a,b),P[X=a,Y=b]):a\\in \\mathscr{A},b\\in \\mathscr{B}\\right\\}\\), where \\(\\mathscr{A}\\) is the set of all possible values taken by \\(X\\) and \\(\\mathscr{B}\\) is the set of all possible values taken by \\(Y\\).</p> <p>When given a joint distribution for \\(X\\) and \\(Y\\), the distribution \\(P[X=a]\\) for \\(X\\) is called the marginal distribution for \\(X\\), and can be found by summing over the values of \\(Y\\), That is:</p> \\[ P[X=a]=\\sum_{b\\in \\mathscr{B}}P[X=a,Y=b] \\] <p>Independence</p> \\[ P[X=a,Y=b]=P[X=a]P[Y=b] \\]"},{"location":"math/probability/note15/#expectation","title":"Expectation","text":"<p>The expectation of a discrete random varaible \\(X\\) is defined as $$ E[X]=\\sum_{a\\in \\mathscr{A}}a\\times P[X=a] $$ where the sum is over all possible values taken by the r.v.</p>"},{"location":"math/probability/note15/#linearity-of-expectation","title":"Linearity of Expectation","text":"<p>For any two random variables \\(X\\) and \\(Y\\) on the same probability space, we have $$ E[X+Y]=E[X]+E[Y] $$ Also, for any constant \\(c\\), we have $$ E[cX]=cE[X] $$</p> <p>Note</p> <p>It is only sums and differences and constant multiples of random variables that behave so nicely.</p>"},{"location":"math/probability/note16/","title":"Variance and Total Expectation","text":"<p> \u7ea6 407 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"math/probability/note16/#random-variables-variance-and-covariance","title":"Random Variables: Variance and Covariance","text":""},{"location":"math/probability/note16/#variance","title":"Variance","text":"<p>For a r.v. \\(X\\) with expectation \\(E[X]=\\mu\\), the variance of \\(X\\) is defined to be: $$ Var(X)=E[(X-\\mu)^2] $$ The square root \\(\\sigma(X)=\\sqrt{Var(X)}\\) is called the standard deviation of \\(X\\).</p> <ul> <li>The point of taking the square root of variance is to put the standard deviation \u201con the same scale\u201d as the r.v. itself.</li> </ul> <p>Theorem: For a r.v. \\(X\\) with expectation \\(E[X]=\\mu\\), we have \\(Var(X)=E[X^2]-{\\mu}^2\\)</p> <p>Property: For any random variable \\(X\\) and constant \\(c\\), we have \\(Var(cX)=c^2Var(X)\\)</p>"},{"location":"math/probability/note16/#sum-of-independent-random-variable","title":"Sum of  Independent Random Variable","text":"<p>Theorm: For independent variables \\(X,Y\\), we have \\(E[XY]=E[X]E[Y]\\).</p> <p>Theorem: For independent random variables \\(X,Y\\), we have $$ Var(X+Y)=Var(X)+Var(Y) $$</p> <p>It is very important to remember that neither of the above two results is true in general when X,Y are not independent</p>"},{"location":"math/probability/note16/#covariance-and-correlation","title":"Covariance and Correlation","text":"<p>Covariance: The covariance of random variables \\(X\\) and \\(Y\\), denoted \\(Cov(X,Y)\\) is defned as $$ Cov(X,Y)=E[(X-\\mu_x)(Y-\\mu_Y)]=E[XY]-E[X]E[Y] $$</p> <ul> <li> <p>If \\(X,Y\\) are independent, then \\(Cov(X,Y)=0\\). However, the converse is not true</p> </li> <li> <p>\\(Cov(X,X)=Var(X)\\)</p> </li> <li> <p>Covariance is bilinear: for any collection of random variables\\(\\left\\{X_1,\\cdots,X_n\\right\\},\\left\\{Y_1,\\cdots,Y_n\\right\\}\\) and fixed constants\\(\\left\\{a_1,\\cdots,a_n\\right\\},\\left\\{b_1,\\cdots,b_n\\right\\}\\),   $$   Cov(\\sum_{i=1}^na_iX_i,\\sum_{j=1}^mb_jY_j)=\\sum_{i=1}^n\\sum_{j=1}^ma_ib_jCov(X_i,Y_j)   $$</p> </li> <li> <p>For general random variables \\(X\\) and \\(Y\\): </p> </li> </ul> \\[ Var(X+Y)=Var(X)+Var(Y)+2Cov(X,Y) \\] <p></p> <p>While the sign of \\(Cov(X,Y)\\) is informative of how \\(X\\) and \\(Y\\) are associated, its magnitude is difficult to interpret. A statistic that is easier to interpret is correlation:</p> <p>Correlation: Suppose \\(X\\) and \\(Y\\) are random variables with \\(\\sigma(X)&gt;0\\) and \\(\\sigma(Y)&gt;0\\). Then, the correlation of \\(X\\) and \\(Y\\) is defined as $$ Corr(X,Y)=\\frac{Cov(X,Y)}{\\sigma(X)\\sigma(Y)} $$ Correlation is more useful than covariance because the former always ranges between \u22121 and +1, as the following theorem shows:</p> <p>For any pair of random variable \\(X\\) and \\(Y\\) with \\(\\sigma(X)&gt;0\\) and \\(sigma(Y)&gt;0\\), $$ -1\\le Corr(X,Y)\\le1 $$</p>"}]}