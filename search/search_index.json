{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to  Iridescent's notebook!","text":""},{"location":"AI/cv/ml4360/","title":"ML4360","text":"<p>Abstract</p> <p>\u8fd9\u662f\u6211\u5728\u5927\u4e00\u6691\u5047\u81ea\u5b66University of Tubingen\u7684 Computer Vision\u8bfe\u7a0b\u7684\u7b14\u8bb0\uff0c\u8be5\u8bfe\u7a0b\u4e3b\u8981\u4ecb\u7ecd\u57fa\u7840\u76843D computer vision\u77e5\u8bc6</p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/","title":"Stereo Reconstruction","text":""},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#preliminaries","title":"Preliminaries","text":"<p>How to bring images in a suitable configuration such that matching is fast? How to obtain depth from the actual measurements(so called disparities)?</p> <p>How to recover 3D from an image? occlusion, parallax, perspective, accomodation, stereopsis\u2026\u2026</p> <p>Why Binocular Stereopsis?</p> <ul> <li>a minimal configuration to percieve depth relatively robustly</li> </ul>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#two-view-stereo-matching","title":"Two-View Stereo Matching","text":"<p>Goal: Recovering the disparity for every pixel from the input images</p> <p>The disparity defined as the relative displacement between pixels in the two images</p> <p>Task: Construct a dense 3D model from two images of a static scene</p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#pipeline","title":"Pipeline","text":"<p>1.Calibrate cameras intrinsically and extrinsically 2.Rectify images given the calibration 3.Compute disparity map for reference image 4.Remove outliers using consistency/occulation test 5.Obtain depth from disparity using camera calibration 6.Construct 3D model</p>"},{"location":"AI/cv/ml4360/Stereo_Reconstruction/#image-rectification","title":"Image Rectification","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/","title":"Structure from Motion","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/#preliminaries","title":"Preliminaries","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/#camera-calibration","title":"Camera Calibration","text":"<ul> <li>Camera calibration is the process of finding the intrinsic/extrinsic parameters<ul> <li>First, the known calibration target is captured in different poses</li> <li>Second, features on the target are detected in the images</li> <li>Finally,the camera intrinsics and extrinsics are jointly optimized.</li> </ul> </li> </ul>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#feature-detection-and-description","title":"Feature Detection and Description","text":"<ul> <li>Point features describe the appearance of local,salient regions in an image</li> <li>They can be used to describe and match images taken from different viewpoints.</li> <li>They form the basis of sparse 3D reconstruction methods covered in the lecture</li> </ul> <p>Features should be invariant to perspective effects and illumination,and the same point should have similar vectors independent of pose/viewpoint</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#siftscale-invariant-feature-transform","title":"SIFT(Scale Invariant Feature Transform)","text":"<p>Question</p> <p>For now I could not fully undestand the essence of this algorithem, so the contente here are lost.</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#two-frame-sfm","title":"Two-frame SFM","text":""},{"location":"AI/cv/ml4360/Structure_from_Motion/#epipolar-geometry","title":"Epipolar Geometry","text":"<p>Goal:Recovery of camera pose from image correspondences</p> <p></p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#derivation-of-essential-matrix","title":"Derivation of essential matrix","text":"<p>Let \\(K_i \\in \\mathbb{R}^{3 \\times 3}\\) denote the camera matrix of camera \\(i\\)</p> <p>Let \\(\\tilde{x_i} = {K_i}^{-1} \\overline{x_i}\\) denote the local ray direction of pixel \\(\\overline{x_i}\\) in camera \\(i\\)</p> <p>We have: \\(\\tilde{x}_2 \\propto x_2 = Rx_1 + t \\propto R \\tilde{x}_1 + st\\)</p> <p>Taking the cross product of both sides with \\(t\\) we obtain: \\([t]_{\\times}\\tilde{x}_2 \\propto [t]_{\\times}R\\tilde{x}_1\\)</p> <p>Taking the dot product of both sides with \\(\\tilde{x}_2^{T}\\) yields: \\(\\tilde{x}_2^{T}[t]_{\\times}R\\tilde{x}_1 =0\\), which is the epipolar constraint, with essential matrix \\(\\tilde{E} = [t]_{\\times}R\\)</p> <p>\\(\\tilde{E}\\) maps a point \\(\\tilde{x}_1\\) in image 1 to the corresponding epipolar line in image 2:</p> <p>\\(\\tilde{l}_2=\\tilde{E}\\tilde{x}_1\\) as \\(\\tilde{x}_2^{T}\\tilde{l}_2=0\\), the epipolar line in image 1 is similar, \\(\\tilde{l}_1=\\tilde{E}^{T}\\tilde{x}_2\\)</p> <p>For any point \\(\\tilde{x}_1\\) in the first image ,the corresponding epipolar line in the second image passes through the epipole \\(\\tilde{e}_2\\) which therefore satisfied:  $$ \\tilde{e}_2^{T}\\tilde{l}_2 = \\tilde{e}_2^{T}\\tilde{E}\\tilde{x}_1=0 $$ for all \\(\\tilde{x}_1\\), It follows that : \\(\\tilde{e}_2^{T}\\tilde{E} = 0\\)</p> <p>Thus,\\(\\tilde{e}_2^{T}\\) is the left null-space of \\(\\tilde{E}\\)\\(. Similarly,\\)\\(\\tilde{e}_1^{T}\\) is the right null-space of \\(E\\)</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#estimating-the-epipolar-geometry","title":"Estimating the Epipolar Geometry","text":"<p>using 8-point algorithm</p> <pre><code>def compute_fundamental_matrix(keypoints1, keypoints2):\n''' \n    Computes the fundamental matrix from image coordinates using the 8-point \n    algorithm by constructing and solving the corresponding linear system.\n    Args:\n        keypoints1 (np.ndarray): Nx3 array of correspondence points in first \n            view in homogenous image coordinates.\n        keypoints2 (np.ndarray): Nx3 array of correspondence points in second \n            view in homogenous image coordinates.\n    Returns:\n        F (np.ndarray): 3x3 fundamental matrix.\n    '''\nnum_points = keypoints1.shape[0]\nassert(num_points &gt;= 8)\n# Assemble homogenous linear system\n# each correspondence yields one equation in the nine elements of F\nA = np.zeros([num_points, 9])\nfor i in range(num_points):\nA[i] = [keypoints1[i, 0]*keypoints2[i, 0],\nkeypoints1[i, 1]*keypoints2[i, 0],\nkeypoints2[i, 0],\nkeypoints1[i, 0]*keypoints2[i, 1],\nkeypoints1[i, 1]*keypoints2[i, 1],\nkeypoints2[i, 1],\nkeypoints1[i, 0],\nkeypoints1[i, 1],\n1,]\n# Solve the homogeneous linear system via SVD\nu, s, vh = np.linalg.svd(A)\nF = vh[-1].reshape(3, 3)\n# Force rank 2 by zeroing smallest singular value\n# see \"In defense of the 8-point algorithm\", Hartley, TPAMI 1997\nu, s, vh = np.linalg.svd(F)\ns[2] = 0\nF =  u @ (np.diag(s) @ vh)\n# return standardized fundamental matrix\nreturn F/F[2, 2]\n</code></pre>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#case-with-unknwon-intrinsics","title":"case with unknwon intrinsics","text":"<p>If the camera calibration \\(K_i\\) is unknown, we cannot use the local ray diretion.</p> <p>The essential matrix becomes \\(\\overline{x}_2^{T}K_2^{-T}\\tilde{E}K_1^{-1}\\overline{x}_1 = 0\\),where we get the fundamental matrix: $$ \\tilde{F}=K_2^{-T}\\tilde{E}K_1^{-1} $$</p>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#triangulation","title":"Triangulation","text":"<p>Given noisy 2D image observations, the two rays might not intersect in one point. We like to recover the 3D point \\(x\\) that is closest to the two rays.</p> <p>Let \\(\\tilde{x}_i^s=\\tilde P_i\\tilde{x}_w\\) denote the projection of  a 3D world point \\(\\tilde{x}_w\\) onto the image of the i'th camera \\(\\tilde{x}_i^s\\). We consider the cross product \\(\\tilde{x}_i^s \\times \\tilde {P}_i\\tilde{x}_w=0\\) and using \\(\\tilde{p}_{ik}^{T}\\) to denote the k/th row of the matrix \\(\\tilde{P}_i\\),we obtain:</p> <p>\\(\\begin{bmatrix}x_i^s \\tilde{p}_{i3}^{T}-\\tilde{p}_{i1}^{T}\\\\y_i^s \\tilde{p}_{i3}^{T}-\\tilde{p}_{i2}^{T}\\end{bmatrix}\\tilde{x}_w=0\\)</p> <p>Then using DLT.</p> <pre><code>def triangulate_point(keypoint1, keypoint2, K1, K2, R, t):\n''' \n    Triangulates world coordinates given correspondences from two views with\n    relative extrinsics R and t.\n    Args:\n        keypoints1 (np.ndarray): Nx3 array of correspondence points in first \n            view in homogenous image coordinates.\n        keypoints2 (np.ndarray): Nx3 array of correspondence points in second \n            view in homogenous image coordinates.\n        K1 (np.ndarray): The 3x3 calibration matrix K for the first \n            view/camera.\n        K2 (np.ndarray): The 3x3 calibration matrix K for the second\n            view/camera.\n        R (np.ndarray): 3x3 rotation matrix from first to second view.\n        t (np.ndarray): 3-d translation vector from first to second view.\n    Returns:\n        x_w (np.ndarray): Nx4 array of 3-d points in homogenous world \n            coordinates.\n    '''\n# Initialize extrinsics for reference view as identity transform\nR0 = np.eye(3)\nt0 = np.zeros([3, 1])\n# assemble projection matrix P0 for reference view\nP0 = assemble_projection_matrix(K1, R0, t0)\n# assemble camera matrix P0 for other view\nP1 = assemble_projection_matrix(K2, R, t)\nA = np.array(\n# A0\n[keypoint1[0] * P0[2].transpose() - P0[0].transpose(),\nkeypoint1[1] * P0[2].transpose() - P0[1].transpose(),\n# A1\nkeypoint2[0] * P1[2].transpose() - P1[0].transpose(),\nkeypoint2[1] * P1[2].transpose() - P1[1].transpose()]\n)\n# solve linear system\nu, s, vh = np.linalg.svd(A)\nx_w = vh[-1]\n# standardize and return\nreturn x_w/x_w[3]\n</code></pre>"},{"location":"AI/cv/ml4360/Structure_from_Motion/#factorization","title":"Factorization","text":""},{"location":"AI/cv/ml4360/image_formation/","title":"Image Formation","text":"<p>key terms:how a 3D scene is projected onto a 2D image plane</p> <p></p>"},{"location":"AI/cv/ml4360/image_formation/#primitives-and-transformations","title":"Primitives and Transformations","text":""},{"location":"AI/cv/ml4360/image_formation/#2d-points","title":"2D Points","text":"<ul> <li>can be wirtten in inhomogeneous coordinates</li> <li>or in homogeneous coordinates</li> <li>projective space</li> </ul> <p>Homogeneous vectors that differ only by scale are considered equivalent and define an equivalence class</p> <ul> <li>An inhomogeneous vector x could be converted to a homogeneous vector -&gt;augmented vector</li> <li>Homogeneous points whose last element is \\(0\\) are called ideal points or points at infinity</li> </ul> <p></p>"},{"location":"AI/cv/ml4360/image_formation/#2d-lines","title":"2D Lines","text":"<ul> <li>using homogeneous coordinates \\(\\widetilde{l}=(a,b,c)^{T}\\)</li> <li>normalize \\(\\tilde{l}\\) </li> <li>line at infinity \\(\\tilde{l}_{\\infty} = (0,0,1)^{T}\\),which passes through all ideal points</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#cross-product","title":"Cross Product","text":""},{"location":"AI/cv/ml4360/image_formation/#2d-line-arithmetic","title":"2D Line Arithmetic","text":"<ul> <li>intersection of tow lines:\\(\\tilde{x} = \\tilde{l}_1 \\times \\tilde{l}_2\\)</li> <li>line joining two points:\\(\\tilde{l}=\\tilde{x}_1 \\times \\tilde{x}_2\\)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#3d-points-and-planes","title":"3D Points and Planes","text":"<ul> <li>the same as case in 2D</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#3d-lines","title":"3D Lines","text":"<ul> <li>less elegent</li> <li>linear combination of two points</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#2d-transformations","title":"2D Transformations","text":"<ul> <li>the action of a projective transformation on a co-vector can be represented by the transposed inverse of the matrix</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#direct-linear-transformation","title":"Direct Linear Transformation","text":"<p>We want a homography estimation using a set of 2D correspondences</p> <ul> <li>Homography estimation:find the relationship between two images of the same scene, but captured from different viewpoints</li> <li></li> </ul> <p>Stacking all equations into a \\(2N \\times 9\\) dimensional matrix \\(A\\) leads to the constrained least squares problem,whose solution is the singular vector corresponding to the smallest singulat value of \\(A\\)(i.e.,the last column of \\(V\\) when decomposing \\(A=UDV^T\\)) derivation</p>"},{"location":"AI/cv/ml4360/image_formation/#geometric-image-formation","title":"Geometric Image Formation","text":""},{"location":"AI/cv/ml4360/image_formation/#orthographic-projection","title":"Orthographic Projection","text":"<ul> <li>The x and y axes of the camera and image coordinate systems are shared</li> <li>Light rats are parallel to the z-coordinate of the camera coordinate system</li> <li>During projection, the z-coordinate is dropped,x and y remain the same  scaled orthorgraphy </li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#perspective-projection","title":"Perspective Projection","text":"<p> - The light ray passes through the camera center,the pixel \\(x_s\\) and the point \\(x_c\\) - Convention:the principal axis aligns with the z-axis - 3D points in camera coordinates are mapped to the image plane by dividing them by their z component and multiplying with thr focal length. - </p> <p>this projection is linear when using homogeneous coordinates</p> <ul> <li>To ensure positive pixel coordinates,a principal point offset is usually added,which moves the image coordinate system to the corner of the image plane. Now we can give the complete perspective projection model as follows: </li> <li>The left \\(3 \\times 3\\) submatrix is called calibration matrix \\(K\\)</li> <li>The parameters of \\(K\\) are called camera intrinsics</li> <li>The skew \\(s\\) arises due to the sensor not mouted perpendicular to the optical axis</li> <li>In practice,we often set \\(f_x =f_y\\) and \\(s=0\\)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#chaining-transformations","title":"Chaining Transformations","text":"<p>Full Rank Representation  The homogeneous vector \\(\\tilde{x}_s\\) is a 4D vector and must be normalized wrt. its 3rd entry to obtain inhomogeneous image pixels: \\(\\overline{x}_s = \\tilde{x}_s / z_s = (x_s/z_s,y_s/z_s,1,1/z_s)^{T}\\)</p>"},{"location":"AI/cv/ml4360/image_formation/#photometric-image-formation","title":"Photometric Image Formation","text":"<p>Discuss how an image is formed in terms of pixel intensities and colors - Light is emitted by one or more light sources and reflected of refracted at surfaces of objects in the scene Rendering Equation </p> <p>\\(n^Ts\\)  represents the inner product factor</p> <ul> <li> <p>Typical BRDFs have a diffuse and a specular component</p> <ul> <li>diffuse component scatters light uniformly in all directions</li> <li>specular component depends strongly on the outgoing light direction</li> </ul> <p></p> </li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#why-camera-lenses","title":"Why camera lenses?","text":"<ul> <li>Large and very small pinholes result in image blur</li> <li>small pinholes require long shutter times,which leads to motion blur</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#thin-lens-model","title":"Thin Lens Model","text":"<p> \\(\\frac{1}{z_s}+\\frac{1}{z_c}=\\frac{1}{f}\\)</p>"},{"location":"AI/cv/ml4360/image_formation/#depth-of-field","title":"Depth of Field","text":"<ul> <li>For \\(z_c \\rightarrow \\infty\\) ,we obtain \\(z_s=f\\)</li> <li>If the image plane is out of foucs,a 3D point projects to the circle of confusion c</li> <li>To control the size of \\(c\\),we change the lens aperture</li> <li>The allowable depth variation that limits the circle of confusion is called DOF and is a function of both the focus distance and the lens aperture <p>distance between the nearest and farthest objects that are acceptably sharp</p> </li> <li>f-number is defined as \\(N = \\frac{f}{d}\\)(\\(d\\): the aperture diameter)</li> </ul>"},{"location":"AI/cv/ml4360/image_formation/#questionsnot-found-in-searching-engine","title":"Questions(Not Found in Searching Engine)","text":"<p>1.normalize \\(\\tilde{l} = (n_x,n_y,-d)^{T}\\) why minus \\(d\\)?</p> <p>2.DLT\uff1f 3.Under orthography,structure and motion can be estimated simultaneously using factorization methods(e.g.,via svm) 4.The skew \\(s\\) arises due to the sensor not mouted perpendicular to the optical axis,only affects x axis?</p>"},{"location":"cs/dm/","title":"\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201d\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u201c \u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a \u300aDiscrete Mathematics and its Application\u300b</p> <p>\u8bfe\u7a0b\u5185\u5bb9\uff1a\u79bb\u6563\u6570\u5b66\u7684\u7279\u70b9\u5c31\u662f\u77e5\u8bc6\u70b9\u96f6\u6563\uff08\u79bb\u6563\u6570\u5b66\u79bb\u6563\u5b66(^_^)\uff09\u4e3b\u8981\u5206\u4e3a\u547d\u9898\u903b\u8f91\u4e0e\u8bc1\u660e\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u6570\u8bba\uff0c\u8ba1\u6570\uff0c\u5173\u7cfb\uff0c\u56fe\u8bba\u51e0\u4e2a\u90e8\u5206\u3002\u56fd\u5185\u7684\u79bb\u6563\u4f3c\u4e4e\u5728\u903b\u8f91\u8bba\u8fd9\u4e00\u7ae0\u4e0a\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u800c\u6bd4\u8f83\u91cd\u8981\u7684\u751f\u6210\u51fd\u6570\uff0c\u56fe\uff0c\u6811\u76f8\u5173\u6982\u5ff5\u4e0e\u7b97\u6cd5\u4e0d\u80fd\u5f88\u8be6\u7ec6\u5168\u9762\u7684\u9610\u8ff0\u3002\u56e0\u6b64ZJU\u7684\u8fd9\u95e8\u8bfe\u7531\u4e8e\u8bfe\u7a0b\u8bbe\u7f6e\u4ee5\u53ca\u4efb\u8bfe\u6559\u5e08\u539f\u56e0\uff0c\u4f53\u9a8c\u5e76\u4e0d\u597d\u3002\u8fd9\u91cc\u63a8\u8350UCB\u7684CS70\uff0c\u867d\u7136\u8bfe\u7a0b\u5185\u5bb9\u4e0a\u4e0e\u8fd9\u95e8\u8bfe\u6709\u8f83\u5927\u533a\u522b\uff0c\u4f46\u662f\u8bfe\u7a0b\u7684note\u975e\u5e38\u8be6\u5c3d\uff0c\u8fd8\u6709discussion\u548chomework\u5e2e\u52a9\u638c\u63e1\u77e5\u8bc6\uff0c\u4f53\u9a8c\u6781\u4f73\u3002</p> <p>\u7531\u4e8e\u8fd9\u95e8\u8bfe\u4e0a\u8bfe\u6240\u5b66\u7684\u4e1c\u897f\u6709\u9650\uff0c\u4f46\u662f\u5c0f\u6d4b\u4e0e\u8003\u8bd5\u975e\u5e38\u7075\u6d3b\uff0c\u6240\u6709\u77e5\u8bc6\u70b9\u9700\u8981\u719f\u7ec3\u638c\u63e1\u5e76\u4e14\u5b66\u4f1a\u8fd0\u7528\u3002\u4ee5\u4e0b\u662f\u6211\u7684\u671f\u672b\u590d\u4e60\u624b\u5199\u7b14\u8bb0\uff0c\u5305\u542b\u4e86ZJU\u7248\u79bb\u6563\u7684\u77e5\u8bc6\u70b9\uff08\u81ea\u8ba4\u4e3a\u662f\u6bd4\u8f83\u5168\u4e86\uff09\u3002\u53ef\u4ee5\u5728\u590d\u4e60\u65f6\u7528\u6765\u8fc7\u77e5\u8bc6\u70b9\uff0c\u4f46\u662f\u5b66\u8fd9\u95e8\u8bfe\u5c3d\u91cf\u8ba4\u771f\u770b\u4e66\u548cslide\u3002</p> <p> \u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u7b14\u8bb0</p>"},{"location":"cs/c/c/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66\u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300aC Primer Plus\u300b</p> <p>\u6d59\u5927\u56fe\u7075\u73ed\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8\u8bfe\u7a0b\uff0c\u5c06\u4f20\u7edf\u7684c\u5c0fc\u5927\u53bb\u9664\u4e0d\u5408\u7406\u7684\u5185\u5bb9\u540e\u5408\u5e76\u8d77\u6765\u7684\u4e00\u95e8\u8bfe\u3002\u4f7f\u7528C\u8bed\u8a00\uff0c\u4e3b\u8981\u4ecb\u7ecd\u57fa\u672c\u7684\u8bed\u6cd5\uff0c\u6761\u4ef6\u8bed\u53e5\uff0c\u5faa\u73af\u8bed\u53e5\uff0c\u51fd\u6570\uff0c\u6570\u7ec4\uff0c\u6307\u9488\uff0c\u5b57\u7b26\u4e32\uff0c\u94fe\u8868\uff0c\u7ed3\u6784\u4f53\u7b49\u5185\u5bb9\u3002</p> <p>\u671f\u672b\u8003\u524d\u6574\u7406\u7684\u4e00\u4efd\u6613\u9519\u77e5\u8bc6\u70b9\u4ee5\u53ca\u5178\u578b\u9898\u7684\u601d\u60f3\u548c\u4ee3\u7801\uff0c\u5927\u4e00\u4e0a\u5199\u7684\u4e0d\u600e\u4e48\u6ce8\u610f\u683c\u5f0f\uff0c\u6240\u4ee5\u53ef\u80fd\u7a0d\u5fae\u4e71\u4e00\u4e9b/(\u3112o\u3112)/~~</p>"},{"location":"cs/c/c/#_1","title":"\u7a0b\u7b97\u671f\u672b\u7406\u8bba\u9898\u590d\u4e60","text":"<ul> <li> <p>switch \u8bed\u53e5\u5728\u7f3a\u5c11break \u65f6\u5c06 Fall through</p> </li> <li> <p>++\u4f18\u5148\u7ea7\u9ad8\u4e8e*</p> </li> <li> <p><code>true</code>\u3001<code>false</code>\u3001<code>TRUE</code>\u3001<code>FALSE</code> \u662f\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff0c\u56e0\u4e3a\u5728 C \u4e2d\u5b83\u4eec\u4e0d\u662f\u5173\u952e\u5b57</p> </li> <li> <p><code>char a = 255</code>\uff0c\u6253\u5370\u540e\u503c\u4e3a <code>-1</code>\uff0c\u56e0\u4e3a <code>char</code> \u4e3a\u6709\u7b26\u53f7\u7c7b\u578b\u5e76\u91c7\u7528\u8865\u7801\u8868\u793a\uff0c\u5176\u8303\u56f4\u4e3a <code>-128 ~ 127</code>\u3002</p> </li> <li> <p>\u6307\u9488\u53ef\u4ee5\u52a0\u5e38\u6570\uff0c\u51cf\u5e38\u6570\uff0c\u4f46\u6307\u9488\u4e4b\u95f4\u53ef\u4ee5\u76f8\u51cf\uff0c\u4f46\u4e0d\u80fd\u76f8\u52a0</p> </li> <li>\u4e24\u4e2a\u540c\u4e00\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u76f8\u51cf\uff0c\u610f\u4e49\u662f\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u76f8\u9694\u591a\u5c11\u4e2a\u5143\u7d20 \u6ce8\u610f\u662f\u5143\u7d20\u4e0d\u662f\u5b57\u8282\u6570\u3002</li> <li> <p>\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u5141\u8bb8\u76f8\u51cf</p> </li> <li> <p>\u6307\u9488\u53ea\u6709\u52a0\u51cf\u64cd\u4f5c\uff0c\u6ca1\u6709\u4e58\u9664\u64cd\u4f5c</p> </li> <li> <p>[ ]\u4f18\u5148\u7ea7\u9ad8\u4e8e *</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u9700\u8d4b\u503c\u4e00\u4e2a\u53ef\u7528\u7684\u5730\u5740\u4e4b\u540e\u624d\u53ef\u4ee5\u89e3\u5f15\u7528</p> </li> <li> <p>\u5047\u8bbe\u6709\u5b9a\u4e49\u5982\u4e0b\uff1a <code>int array[10];</code> \u5219\u8be5\u8bed\u53e5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4array\u3002\u5176\u4e2darray\u7684\u7c7b\u578b\u662f\u6574\u578b\u6307\u9488\u274c</p> </li> <li> <p>array \u662f\u6307\u5411int array[0]\u5730\u5740\u7684\u6307\u9488</p> </li> </ul> <p>&amp;a\u4ee3\u8868\u6570\u7ec4\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint(*)[ ] </p> <p>a\u4ee3\u8868\u6570\u7ec40\u53f7\u5143\u7d20\u5730\u5740\uff0c\u7c7b\u578b\u4e3a\uff1aint*</p> <p>\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff1aint (*pName)[ ] = &amp;a;</p> <p>\u6307\u5411\u6570\u7ec40\u53f7\u5143\u7d20\u7684\u6307\u9488\uff1aint* pName = a; </p> <p>\u5f53\u6307\u9488\u6307\u5411\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u6307\u9488\u79fb\u52a8\u3002</p> <p>\u5373 \u6307\u9488\u548c\u6570\u7ec4\u540d\u5728\u6548\u679c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u533a\u522b\u5728\u4e8e\uff1a\u6307\u9488\u662f\u53d8\u91cf \u6307\u9488\u53ef\u4ee5\u53c2\u4e0e\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u800c\u6570\u7ec4\u540d\u4e0d\u884c</p> <p>\u5b9e\u9645\u4e0a \u6570\u7ec4\u7d22\u5f15\u4e0b\u6807\u8fd0\u7b97\u5c31\u662f\u5148\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u6307\u9488\uff0c\u518d\u901a\u8fc7\u6307\u9488\u53bb\u53d6\u5f97\u5bf9\u5e94\u5143\u7d20\u7684</p> <ul> <li> <p>\u6570\u7ec4\u7684\u57fa\u5730\u5740\u662f\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6570\u7ec4\u540d\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5730\u5740\u5373\u6307\u9488\u503c\u3002</p> </li> <li> <p>\u6709\u6548\u7684\u6307\u9488\u8fd0\u7b97</p> </li> <li> <p>\u76f8\u540c\u7c7b\u578b\u6307\u9488\u7684\u76f8\u4e92\u8d4b\u503c\u8fd0\u7b97</p> </li> <li>\u6307\u9488\u4e0e\u6574\u6570\u4e4b\u95f4\u7684\u52a0\u51cf\u6cd5\u8fd0\u7b97</li> <li> <p>\u6307\u5411\u76f8\u540c\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u526a\u53d1\u8fd0\u7b97\u6216\u6bd4\u8f83\u8fd0\u7b97</p> </li> <li> <p>*p++\u8868\u793a\u53d6\u5f97p\u5f53\u524d\u6307\u5411\u7684\u5143\u7d20\uff0c\u4f46\u662fp\u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e86</p> </li> <li> <p>\u95ee\u4e00\u4e2achar\u578b\u53d8\u91cf\u7684\u503c\u662f\u591a\u5c11\uff0c\u8981\u4e48\u8bb0\u5f97\u5f15\u53f7\uff0c\u8981\u4e48\u8bb0\u5f97\u7528ASCII</p> </li> <li> <p>\u53ef\u4ee5\u76f4\u63a5\u7528[]\u8bbf\u95ee\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u67d0\u4e2a\u5b57\u7b26</p> </li> <li> <p><code>c   \"ABC\" [1]='B'</code></p> </li> <li> <p><code>sizeof()</code>\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u800c\u4e14\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5b8c\u6210\u66ff\u6362\u3002</p> <ul> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> </ul> </li> <li> <ul> <li><code>sizeof(1) = 4</code></li> </ul> </li> <li><code>sizeof(1ll) = 8</code></li> <li><code>sizeof(1.0) = 8</code></li> <li><code>sizeof(1.0f) = 4</code></li> </ul> <p></p> <ul> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u662fC\u8bed\u8a00\u7f16\u8bd1\u7a0b\u5e8f\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u7528\u4e8e\u89e3\u91ca\u5904\u7406C\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u9884\u5904\u7406\u6307\u4ee4\uff08\u7279\u5f81\u662f\u4ee5<code>#</code>\u5f00\u5934\uff0c\u5b83\u4eec\u4e0d\u662f\u771f\u6b63\u7684C\u8bed\u53e5\uff09</p> </li> <li> <p>\u7f16\u8bd1\u9884\u5904\u7406\u5728\u6b63\u5f0f\u7f16\u8bd1\u4e4b\u524d</p> </li> <li> <p><code>#include</code></p> </li> <li>\u5982\u679c\u540e\u9762\u662f&lt;&gt;\uff0c\u5219\u5c06\u4f7f\u7528C\u7684\u6807\u51c6\u5934\u6587\u4ef6</li> <li> <p>\u5982\u679c\u540e\u9762\u662f\u201c\u201d\uff0c\u5c06\u5148\u5230\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u5bfb\u627e\u88ab\u5305\u542b\u7684\u6587\u4ef6\uff0c\u627e\u4e0d\u5230\u5219\u53bb\u7cfb\u7edfinclude\u76ee\u5f55\u5bfb\u627e</p> </li> <li> <p>\u5b8f</p> </li> <li> <p>\u5b8f\u53ea\u662f\u7eaf\u7cb9\u7684\u5bf9\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u66ff\u6362</p> </li> <li> <p>case \u540e\u8ddf\u7684\u5fc5\u987b\u662f\u4e0d\u91cd\u590d\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e0d\u53ef\u4ee5\u662f\u53d8\u91cf\u53c2\u4e0e\u7684\u8868\u8fbe\u5f0f</p> </li> <li> <p>\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u5b9a\u4e49\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f</p> </li> <li> <p>\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5b58\u5b58\u50a8\u5728\u9759\u6001\u5b58\u50a8\u533a\uff0c\u751f\u547d\u5468\u671f\u6301\u7eed\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e0d\u4f1a\u518d\u9000\u51fa\u51fd\u6570\u7684\u65f6\u5019\u88ab\u56de\u6536\uff0c\u4e0b\u4e00\u6b21\u4f7f\u7528\u540e\u4f1a\u88ab\u91cd\u65b0\u6fc0\u6d3b</p> </li> <li> <p>\u4e0e\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u76f8\u6bd4\uff0c\u9759\u6001\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u518d\u5f53\u524d\u6587\u4ef6\u5185\uff0c\u52a8\u6001\u5168\u5c40\u53d8\u91cf\u5728\u591a\u6587\u4ef6\u9879\u76ee\u4e2d\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u7528</p> </li> <li> <p>\u9759\u6001\u53d8\u91cf\u521d\u503c\u9ed8\u8ba4\u4e3a0</p> </li> <li> <p>\u4e8c\u7ef4\u6570\u7ec4\u7533\u8bf7\u65f6\u5982\u679c\u521d\u59cb\u5316\u53ef\u4ee5\u7701\u7565\u884c\u957f\u5ea6 <code>a[][3]={}</code></p> </li> <li> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4<code>a[x][y]</code></p> </li> <li><code>&amp;a</code>\u8868\u793a\u6570\u7ec4\u5730\u5740\uff0c<code>&amp;a+1</code>\u8868\u793a\u6570\u7ec4\u672b\u5c3e\u540e\u7684\u5730\u5740</li> <li><code>a</code>\u6216\u8005<code>&amp;a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u884c\u5730\u5740\uff0c<code>a+1</code>\u8868\u793a\u6570\u7ec4\u4e0b\u4e00\u884c\u5730\u5740<ul> <li><code>a</code>\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2ax\u7ef4\u6570\u7ec4\u7684\u6307\u9488\u3002</li> </ul> </li> <li><code>&amp;a[0][0]</code>\u6216\u8005<code>a[0]</code>\u8868\u793a\u6570\u7ec4\u9996\u5143\u7d20\u5730\u5740\uff0c\u4e5f\u53eb\u5217\u5730\u5740</li> <li> <p><code>a[i][j]</code>\u7b49\u6548\u4e8e<code>*(*(a+i)+j)</code></p> </li> <li> <p>\u53d6\u503c\u7b26\u53f7*\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6210\u5458\u8bbf\u95ee\u7b26.\u7684\u4f18\u5148\u7ea7</p> </li> <li> <p>\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6307\u9488\u7684\u65b9\u5f0f\u6765\u7ed9\u8be5\u5b57\u7b26\u4e32\u5206\u914d\u5730\u5740</p> </li> <li> <p><code>char *p;  p=\"awa\"</code></p> </li> <li> <p><code>*strcpy(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u590d\u5236\u5230<code>to[]</code>\u4e2d\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p><code>*strcat(char *to,char *from)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u628a\u5b57\u7b26\u6570\u7ec4<code>from[]</code>\u6dfb\u52a0\u5230<code>to[]</code>\u672b\u5c3e\u5e76\u8fd4\u56de<code>to[]</code></p> </li> <li> <p>\u6240\u8c13\u7684\u6dfb\u52a0\uff0c\u5c31\u662f\u7528<code>from[]</code>\u53bb\u66ff\u6362<code>to[]</code>\u7b2c\u4e00\u4e2a<code>\\0</code>\u4e4b\u540e\u7684\u5143\u7d20</p> </li> <li> <ul> <li><code>strcmp(char *a,char *b)</code>\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u6bd4\u8f83\u5b57\u7b26\u6570\u7ec4<code>a[]</code>\u548c<code>b[]</code>\u5728<code>\\0</code>\u524d\u7684\u5185\u5bb9\u662f\u5426\u7b49\u4ef7</li> </ul> </li> <li> <ul> <li> <ul> <li>\u5982\u679c\u7b49\u4ef7 \u8fd4\u56de0</li> </ul> </li> <li>\u5982\u679ca&lt;b \u8fd4\u56de-1</li> <li>\u5982\u679ca&gt;b \u8fd4\u56de1</li> </ul> </li> <li> <p>\u7ed3\u6784\u4f53\u7c7b\u578b\u672c\u8eab\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u7ed3\u6784\u4f53\u53d8\u91cf\u5360\u7528\u5185\u5b58\u7a7a\u95f4</p> </li> <li> <p>\u679a\u4e3e\u7c7b\u578b\u4e2d\u7684\u5143\u7d20\u90fd\u5177\u6709\u4e00\u4e2a\u6574\u578b\u503c</p> </li> <li> <p>\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740</p> </li> <li> <p>\u4efb\u4f55\u8868\u8fbe\u5f0f\u8bed\u53e5\u90fd\u662f\u8868\u8fbe\u5f0f\u52a0\u5206\u53f7\u7ec4\u6210\u7684</p> </li> <li> <p>\u6587\u4ef6\u7684\u8bfb\u51fd\u6570\u662f\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5b58\u653e\u5728\u5185\u5b58\u4e2d</p> </li> <li> <p>\u6587\u4ef6\u662f\u5426\u6253\u5f00\u662f\u53ef\u4ee5\u5224\u65ad\u7684</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u548c\u4f4d\u7f6e\u6307\u9488\u90fd\u662f\u968f\u7740\u6587\u4ef6\u7684\u8bfb\u5199\u64cd\u4f5c\u5728\u4e0d\u65ad\u6539\u53d8\u274c</p> </li> <li> <p>\u6587\u4ef6\u6307\u9488\u7528\u4e8e\u6307\u5411\u6587\u4ef6\uff0c\u6587\u4ef6\u53ea\u6709\u88ab\u6253\u5f00\u540e\u624d\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u6307\u9488</p> </li> <li> <p>\u4e00\u4e2a\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\uff0c\u5b83\u5c06\u4fdd\u6301\u88ab\u5f3a\u5236\u8f6c\u6362\u540e\u7684\u6570\u636e\u7c7b\u578b\u274c</p> </li> <li> <p>switch\u8bed\u53e5\u4e2d\uff0c\u591a\u4e2acase\u53ef\u4ee5\u5171\u7528\u4e00\u7ec4\u6267\u884c\u8bed\u53e5</p> </li> <li> <p>\u6bcf\u4e2acase\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u53ef\u4ee5\u76f8\u540c</p> </li> <li> <p>\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf\uff0c\u5728\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u540c\u540d\u53d8\u91cf</p> </li> <li> <p>\u6307\u9488\u53d8\u91cf\u4e0d\u80fd\u5b58\u653e\u6570\u503c\u548c\u5b57\u7b26</p> </li> <li> <p>\u5b57\u7b26\u4e32\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u6307\u9488</p> </li> <li> <p></p> </li> <li> <p>\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u3002</p> </li> <li> <p>\\\u5f00\u5934\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u516b\u8fdb\u5236\u8f6c\u4e49\u5e8f\u5217\uff0cs\u8868\u793a\u4e00\u4e2a\u5b57\u7b26</p> </li> <li> <p>\u6807\u8bc6\u7b26\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4e0d\u80fd\u662fC\u8bed\u8a00\u7684\u5173\u952e\u5b57\u548c\u4fdd\u7559\u6807\u8bc6\u7b26</p> </li> <li> <p>\u6ce8\u610fif\u8bed\u53e5\u4e2d\u662f=\u53f7\u8fd8\u662f==</p> </li> <li>`int k=2;while(k=0){printf(\"%d\",k);k--;}</li> <li> <p>\u5faa\u73af\u4f53\u8bed\u53e5\u4e00\u6b21\u4e5f\u4e0d\u6267\u884c</p> </li> <li> <p>\u6ce8\u91ca\u4f53\u4f8b\uff1a<code>/**/</code></p> </li> <li> <p><code>x*=y+z</code>\u5373\u4e3a`x=x*(y+z)</p> </li> <li> <p>else \u603b\u662f\u548c\u4e4b\u524d\u4e0e\u5176\u6700\u8fd1\u7684\u4e14\u4e0d\u5e26else \u7684if\u914d\u5bf9</p> </li> <li> <p>\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5</p> </li> <li> <p>\u5728\u5d4c\u5957\u5faa\u73af\u4e2d\uff0c\u6bcf\u4e00\u5c42\u5faa\u73af\u4e2d\u90fd\u4e0d\u5e94\u8be5\u6539\u53d8\u5176\u4ed6\u5c42\u4f7f\u7528\u7684\u5faa\u73af\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u514d\u4e92\u76f8\u5e72\u6270</p> </li> <li> <p>break \u8bed\u53e5\u53ea\u80fd\u7528\u5728\u5faa\u73af\u4f53\u548cswitch\u8bed\u53e5\u4f53\u5185</p> </li> <li> <p>continue\u8bed\u53e5\u7684\u4f5c\u7528\u662f\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u4f53\u4e2d\u4f59\u4e0b\u5c1a\u672a\u6267\u884c\u7684\u8bed\u53e5\uff0c\u7acb\u5373\u8fdb\u884c\u4e0b\u4e00\u6b21\u7684\u5faa\u73af\u6761\u4ef6\u5224\u5b9a\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec5\u7ed3\u675f\u672c\u6b21\u5faa\u73af\u3002</p> </li> <li> <p>\u51fd\u6570\u4e0d\u53ef\u4ee5\u5d4c\u5957\u5b9a\u4e49\u4f46\u53ef\u4ee5\u5d4c\u5957\u8c03\u7528</p> </li> <li> <p>sizeof\u662f\u8fd0\u7b97\u7b26\uff0c\u4e0d\u662f\u51fd\u6570</p> </li> <li> <p>C\u8bed\u8a00\u4e2d\uff0c\u82e5\u6ca1\u6709\u5bf9\u51fd\u6570\u7c7b\u578b\u663e\u5f0f\u8bf4\u660e\uff0c\u5219\u51fd\u6570\u7684\u9690\u542b\u7c7b\u578b\u4e3aint</p> </li> <li> <p>\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u5206\u522b\u5360\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u5355\u5143</p> </li> <li> <p>\u4e0d\u4e00\u5b9a\u5305\u542bmain\u51fd\u6570\uff0c\u4e0d\u80fd\u5305\u542b\u4e24\u4e2a\u4ee5\u4e0amain\u51fd\u6570</p> </li> <li> <p>EOF\u5b9e\u9645\u4e0a\u5c31\u662f-1</p> </li> <li>\u5982\u679c<code>k</code>\u7684\u7c7b\u578b\u53608B\u5185\u5b58\uff0c\u5219<code>sizeof(++k)</code>\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u66ff\u6362\u4e3a8\uff0c\u800c<code>k</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8</li> <li>\u5206\u652f\u8bed\u53e5\u6d4b\u8bd5\u6570\u636e\u81f3\u5c11\u9700\u8981\u51e0\u7ec4\u95ee\u9898\uff1a\u8981\u6ce8\u610f\u6570\u636e\u8fb9\u754c\u4e5f\u8981\u7b97\u4e00\u7ec4:</li> <li>C\u8bed\u8a00\u7684\u903b\u8f91\u8fd0\u7b97\u5177\u6709\u7701\u7565\u7279\u6027\uff1a\u5f53\u524d\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u65f6\u5019\uff0c\u4e0d\u8ba1\u7b97\u540e\u9762\u90a3\u4e2a\u8868\u8fbe\u5f0f</li> <li>\u53d6\u4f59\u8fd0\u7b97\u4ec5\u5bf9\u6574\u578b\u6570\u636e\u4f7f\u7528</li> <li><code>+ -</code>\u53ef\u4f5c\u5355\u76ee\u8fd0\u7b97\u7b26\u8868\u793a\u6b63\u8d1f</li> <li>\u53cc\u76ee\u8fd0\u7b97\u7b26\u4f1a\u4fdd\u8bc1\u4e24\u4fa7\u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\uff08\u5bf9\u4e8e\u4e0d\u540c\u7684\u8f93\u5165\u6570\u636e\u4f1a\u8fdb\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff09</li> <li>1.\u7b26\u53f7\u4f18\u5148\u7ea7\uff1a\u8d4b\u503c\u8fd0\u7b97\u4f18\u5148\u4e8e\u9017\u53f7\u8fd0\u7b97\uff0c2.\u9017\u53f7\u8fd0\u7b97\uff1a\u7b26\u9017\u53f7\u8868\u8fbe\u5f0f\u4e2d\u7528\u9017\u53f7\u5206\u5f00\u7684\u8868\u8fbe\u5f0f\u5206\u522b\u6c42\u503c\uff0c\u4ee5\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4f5c\u4e3a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li> <li>x\u4e3a\u6d6e\u70b9\u578b\uff0c\u5219\u8868\u8fbe\u5f0f<code>x=10/4</code>\u7684\u503c\u4e3a2.0</li> <li>%\u8fd0\u7b97\u6570\u5fc5\u987b\u662f\u6574\u578b</li> <li><code>a[2]+3</code>\u8868\u793aa\u6570\u7ec4\u884c\u4e0b\u6807\u4e3a2\uff0c\u5217\u4e0b\u6807\u4e3a3\u7684\u5143\u7d20\u7684\u5730\u5740</li> <li>\u8fde\u63a5\u7b26\u4e0d\u80fd\u7ec4\u6210\u6807\u8bc6\u7b26</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e</li> <li>C\u8bed\u8a00\u4e2d\u6240\u6709\u5173\u952e\u5b57\u5fc5\u987b\u5c0f\u5199</li> <li>int long float \u6df7\u5408\u8fd0\u7b97\uff0c\u7ed3\u679c\u7684\u6570\u636e\u7c7b\u578b\u662fdouble</li> <li>\u518dswitch\u8bed\u53e5\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u4f7f\u7528break\u8bed\u53e5</li> <li>\u5b9e\u53c2\u4e0e\u5176\u5bf9\u5e94\u7684\u5f62\u53c2\u5206\u522b\u5360\u7528\u72ec\u7acb\u7684\u5b58\u50a8\u5355\u5143</li> <li>continue\u53ea\u80fd\u8fd0\u7528\u4e8e\u5faa\u73af\u4f53\u4e2d</li> <li>C\u8bed\u8a00\u6e90\u7a0b\u5e8f\u7684\u6269\u5c55\u540d\u662fC</li> <li>C\u8bed\u8a00\u5168\u5c40\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u81ea\u52a8\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u5c40\u90e8\u53d8\u91cf\u4e0d\u4e00\u5b9a\uff0c\u5c40\u90e8\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u521d\u503c\uff0c\u5219\u5176\u521d\u503c\u4e0d\u786e\u5b9a</li> <li>double\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u6bd4int\u578b\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u5b57\u8282\u6570\u591a</li> <li>for\u5faa\u73af\u7684\u4e09\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u7701\u7565</li> <li>\u53d8\u91cf\u88ab\u5b9a\u4e49\u540e\uff0c\u5b83\u4f5c\u7528\u57df\u548c\u5bff\u547d\u5c31\u88ab\u786e\u5b9a\u4e86\uff0c\u5e76\u4e14\u4e0d\u53ef\u6539\u53d8</li> <li>\u6761\u4ef6\u8fd0\u7b97\u7b26?\u548c:\u662f\u4e00\u5bf9\u8fd0\u7b97\u7b26\uff0c\u4e0d\u80fd\u5206\u5f00\u5355\u72ec\u4f7f\u7528</li> <li>\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012\u5230\u5f62\u53c2\u6709\u4e24\u79cd\u65b9\u5f0f\u503c\u4f20\u9012\u548c\u5730\u5740\u4f20\u9012</li> <li>\u82e5\u53d8\u91cf\u5b9a\u4e49\u4e3aint x, y; \uff0c\u5219x + y = 22==\u4e0d\u662f==\u7b26\u5408C\u8bed\u8a00\u8bed\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002</li> <li>C\u7a0b\u5e8f\u4e2d\uff0c\u7528\u4e00\u5bf9\u5927\u62ec\u53f7{}\u62ec\u8d77\u6765\u7684\u591a\u6761\u8bed\u53e5\u79f0\u4e3a\u590d\u5408\u8bed\u53e5\uff0c\u590d\u5408\u8bed\u53e5\u5728\u8bed\u6cd5\u4e0a\u88ab\u8ba4\u4e3a\u662f\u4e00\u6761\u8bed\u53e5\u3002</li> <li>!!6\u7684\u503c\u662f1</li> <li>\u82e5\u8868\u8fbe\u5f0fsizeof(int)\u7684\u503c\u4e3a4\uff0c\u5219int\u7c7b\u578b\u6570\u636e\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u6574\u6570\u4e3a 2^31-1(4\u4e2a\u5b57\u8282\uff0c\u6bcf\u5b57\u82828\u4f4d\uff0c\u4e00\u517132\u4f4d\uff0c\u51cf\u53bb\u4e00\u4e2a\u7b26\u53f7\u4f4d)</li> <li>\u4e0efloat\u578b\u6570\u636e\u76f8\u6bd4\uff0cdouble\u578b\u6570\u636e\u7684\u7cbe\u5ea6\u9ad8\uff0c\u53d6\u503c\u8303\u56f4\u5927</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e24\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b</li> <li>int a=4, b=3, c=2, d=1, m=1, n=3;\uff0c\u6267\u884c ( m=a&gt;b&gt;c) &amp;&amp; (n=c&gt;d) \u540e n \u7684\u503c\u4e3a\uff08 \uff093</li> <li>\u5728switch\u8bed\u53e5\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7684case\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c==\u4e0d==\u53ef\u4ee5\u76f8\u540c</li> <li>case\u4e2d\u7684\u53d8\u91cf\u503c\u53ea\u80fd\u662f\u6574\u6570\u5e38\u91cf\u503c\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u7b26\u53f7</li> <li>while(i&lt;=10);i++ \u6b7b\u5faa\u73af</li> <li>\u5728\u5b9a\u4e49\u6570\u7ec4\u4e4b\u540e\uff0c\u6839\u636e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u7c7b\u578b\u53ca\u4e2a\u6570\uff0c\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u6bb5\u8fde\u7eed\u5b58\u50a8\u5355\u5143\u7528\u4e8e\u5b58\u653e\u6570\u7ec4\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\u3002</li> <li>\u6570\u7ec4\u5b9a\u4e49\u540e\uff0c\u6570\u7ec4\u540d\u8868\u793a\u8be5\u6570\u7ec4\u6240\u5206\u914d\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e2d\u7b2c\u4e00\u4e2a\u5355\u5143\u7684\u5730\u5740\uff0c\u5373\u9996\u5730\u5740</li> <li>\u5730\u5740\u4e00\u822c\u4e0d\u53ef\u88ab\u66f4\u6539</li> <li>\u51fd\u6570\u4e0d\u80fd\u6ca1\u6709\u5927\u62ec\u53f7</li> </ul>"},{"location":"cs/c/c/#_2","title":"\u94fe\u8868","text":""},{"location":"cs/c/c/#_3","title":"\u53cd\u8f6c\u94fe\u8868","text":""},{"location":"cs/c/c/#_4","title":"\u8fed\u4ee3","text":"<p>\u5728\u904d\u5386\u94fe\u8868\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6539\u4e3a\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u7531\u4e8e\u8282\u70b9\u6ca1\u6709\u5f15\u7528\u5176\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u5fc5\u987b\u4e8b\u5148\u5b58\u50a8\u5176\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u66f4\u6539\u5f15\u7528\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u5b58\u50a8\u540e\u4e00\u4e2a\u8282\u70b9\u3002\u6700\u540e\u8fd4\u56de\u65b0\u7684\u5934\u5f15\u7528\u3002</p> <pre><code>struct ListNode* reverseList(struct ListNode* head){\nstruct ListNode* prev = NULL;\nstruct ListNode* curr = head;\nwhile(curr){\nstruct ListNode* next = curr-&gt;next;\ncurr-&gt;next=prev;\nprev=curr;\ncurr=next;\n}\nreturn prev;\n}\n</code></pre>"},{"location":"cs/c/c/#_5","title":"\u9012\u5f52","text":"<pre><code>struct ListNode* reverseList(struct ListNode* head){\nif(head==NULL||head-&gt;next==NULL)\n{\nreturn head;\n}\nstruct ListNode* newHead = reverseList(head-&gt;next);\nhead-&gt;next-&gt;next=head;\nhead-&gt;next=NULL;\nreturn newHead;\n}\n</code></pre>"},{"location":"cs/c/c/#_6","title":"\u56de\u6587\u94fe\u8868","text":""},{"location":"cs/c/c/#_7","title":"\u5b58\u8fdb\u6570\u7ec4\u8fdb\u884c\u6bd4\u8f83","text":""},{"location":"cs/c/c/#_8","title":"\u9012\u5f52","text":"<p>\u7b97\u6cd5 <code>currentNode</code> \u6307\u9488\u662f\u5148\u5230\u5c3e\u8282\u70b9\uff0c\u7531\u4e8e\u9012\u5f52\u7684\u7279\u6027\u518d\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u6bd4\u8f83\u3002<code>frontPointer</code> \u662f\u9012\u5f52\u51fd\u6570\u5916\u7684\u6307\u9488\u3002\u82e5 <code>currentNode.val != frontPointer.val</code>\u5219\u8fd4\u56de false\u3002\u53cd\u4e4b\uff0c<code>frontPointer</code> \u5411\u524d\u79fb\u52a8\u5e76\u8fd4\u56de true\u3002</p> <p>\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5728\u4e8e\u9012\u5f52\u5904\u7406\u8282\u70b9\u7684\u987a\u5e8f\u662f\u76f8\u53cd\u7684\uff0c\u800c\u6211\u4eec\u5728\u51fd\u6570\u5916\u53c8\u8bb0\u5f55\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u56e0\u6b64\u4ece\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u540c\u65f6\u5728\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5339\u914d\u3002</p> <pre><code>struct ListNode* frontPointer;\nbool recursivelyCheck(struct ListNode* currentNode){\nif(currentNode != NULL)\n{\nif(!recursivelyCheck(currentNode-&gt;next))\n{\nreturn false;\n}\nif(currentNode-&gt;val != frontPointer-&gt;val)\n{\nreturn false;\n}\nfrontPointer = frontPointer-&gt;next;\n}\nreturn true;\n}\nbool isPalindrome(struct ListNode *head)\n{\nfrontPointer = head;\nreturn recursivelyCheck(head);\n}\n</code></pre>"},{"location":"cs/c/c/#_9","title":"\u73af\u5f62\u94fe\u8868","text":""},{"location":"cs/c/c/#_10","title":"\u5feb\u6162\u6307\u9488","text":"<p>\u5047\u60f3\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u5728\u94fe\u8868\u4e0a\u79fb\u52a8\uff0c\u300c\u5154\u5b50\u300d\u8dd1\u5f97\u5feb\uff0c\u300c\u4e4c\u9f9f\u300d\u8dd1\u5f97\u6162\u3002\u5f53\u300c\u4e4c\u9f9f\u300d\u548c\u300c\u5154\u5b50\u300d\u4ece\u94fe\u8868\u4e0a\u7684\u540c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u79fb\u52a8\u65f6\uff0c\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u5c06\u4e00\u76f4\u5904\u4e8e\u300c\u4e4c\u9f9f\u300d\u7684\u524d\u65b9\uff1b\u5982\u679c\u8be5\u94fe\u8868\u4e2d\u6709\u73af\uff0c\u90a3\u4e48\u300c\u5154\u5b50\u300d\u4f1a\u5148\u4e8e\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\uff0c\u5e76\u4e14\u4e00\u76f4\u5728\u73af\u5185\u79fb\u52a8\u3002\u7b49\u5230\u300c\u4e4c\u9f9f\u300d\u8fdb\u5165\u73af\u65f6\uff0c\u7531\u4e8e\u300c\u5154\u5b50\u300d\u7684\u901f\u5ea6\u5feb\uff0c\u5b83\u4e00\u5b9a\u4f1a\u5728\u67d0\u4e2a\u65f6\u523b\u4e0e\u4e4c\u9f9f\u76f8\u9047\uff0c\u5373\u5957\u4e86\u300c\u4e4c\u9f9f\u300d\u82e5\u5e72\u5708\u3002</p> <pre><code>bool hasCycle(struct ListNode *head) {\nstruct ListNode *p,*q;\np=head;\nq=head;\nwhile(q&amp;&amp;q-&gt;next)\n{\np=p-&gt;next;\nq=q-&gt;next-&gt;next;\nif(p==q)\n{\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/c/c/#_11","title":"\u76f8\u4ea4\u94fe\u8868","text":""},{"location":"cs/c/c/#_12","title":"\u53cc\u6307\u9488\u6cd5","text":"<pre><code>struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\nif (headA == NULL || headB == NULL) {\nreturn NULL;\n}\nstruct ListNode *pA = headA, *pB = headB;\nwhile (pA != pB) {\npA = pA == NULL ? headB : pA-&gt;next;\npB = pB == NULL ? headA : pB-&gt;next;\n}\nreturn pA;\n}\n</code></pre>"},{"location":"cs/c/c/#_13","title":"\u94fe\u8868\u6392\u5e8f","text":"<pre><code>struct ListNode *merge(struct ListNode *head1,struct ListNode *head2)//\u57fa\u672c\u7684\u94fe\u8868\u5408\u5e76\u64cd\u4f5c\n{\nstruct ListNode *dummyhead = (struct ListNode*)malloc(sizeof(struct ListNode));\nstruct ListNode *temp=dummyhead,*temp1=head1,*temp2=head2;\nwhile(temp1&amp;&amp;temp2)\n{\nif(temp1-&gt;val&lt;temp2-&gt;val)\n{\ntemp-&gt;next=temp1;\ntemp1=temp1-&gt;next;\n}else\n{\ntemp-&gt;next=temp2;\ntemp2=temp2-&gt;next;\n}\ntemp=temp-&gt;next;\n}\nif(temp1) temp-&gt;next=temp1;\nif(temp2) temp-&gt;next=temp2;\nreturn dummyhead-&gt;next;\n}\nstruct ListNode *sort(struct ListNode *head,struct ListNode *tail)\n{\nif(head==NULL)//\u7a7a\u94fe\u8868\nreturn head;\nif(head-&gt;next==tail)//\u5355\u8282\u70b9\u94fe\u8868\n{\nhead-&gt;next=NULL;\nreturn head;\n}\nstruct ListNode *fast=head,*slow=head;//\u5feb\u6162\u6307\u9488\u6cd5\u5bfb\u627e\u4e2d\u70b9\nwhile(fast!=tail)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next;\nif(fast!=tail)//\u91c7\u7528\u5206\u90e8\u79fb\u52a8\u5feb\u6307\u9488\u7684\u65b9\u6cd5\uff0c\u9632\u6b62fast\u79fb\u51fa\u94fe\u8868\n{\nfast=fast-&gt;next;\n}\n}\nstruct ListNode *mid=slow;\nreturn merge(sort(head,mid),sort(mid,fast));\n}\nstruct ListNode* sortList(struct ListNode* head){\nreturn sort(head,NULL);\n}\n</code></pre>"},{"location":"cs/c/c/#_14","title":"\u91cd\u6392\u94fe\u8868","text":""},{"location":"cs/c/c/#_15","title":"\u4e2d\u70b9\u53cd\u8f6c\u540e\u534a\u6bb5\u94fe\u8868+\u5408\u5e76","text":"<pre><code>void reorderList(struct ListNode* head){\nif(head==NULL)\nreturn;\nstruct ListNode *slow,*fast;\nslow=head,fast=head;\nwhile(fast&amp;&amp;fast-&gt;next)\n{\nslow=slow-&gt;next;\nfast=fast-&gt;next-&gt;next;\n}\nstruct ListNode *l2=reverse(slow-&gt;next);\nslow-&gt;next=NULL;\nstruct ListNode *l1=head;\nstruct ListNode* l1_tmp;\nstruct ListNode* l2_tmp;//\u5408\u5e76\u94fe\u8868\u7684\u65b9\u6cd5\uff0c\u53cc\u6307\u9488\nwhile (l1 &amp;&amp; l2) {\nl1_tmp = l1-&gt;next;\nl2_tmp = l2-&gt;next;\nl1-&gt;next = l2;\nl1 = l1_tmp;\nl2-&gt;next = l1;\nl2 = l2_tmp;\n}\n}\n</code></pre>"},{"location":"cs/c/c/#_16","title":"\u5b57\u7b26\u4e32","text":""},{"location":"cs/c/c/#_17","title":"\u5b57\u7b26\u4e32\u8f6e\u8f6c","text":"<p>\u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32<code>s1</code>\u548c<code>s2</code>\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5<code>s2</code>\u662f\u5426\u4e3a<code>s1</code>\u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c<code>waterbottle</code>\u662f<code>erbottlewat</code>\u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002</p>"},{"location":"cs/c/c/#sprintf","title":"<code>sprintf</code>\u51fd\u6570","text":"<ul> <li> <p>\u8be5\u51fd\u6570\u5305\u542b\u5728<code>stdio.h</code>\u5934\u6587\u4ef6</p> </li> <li> <p><code>sprintf</code>\u51fd\u6570\u6253\u5370\u5230\u5b57\u7b26\u4e32\u4e2d\uff08\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8981\u8db3\u591f\u5bb9\u7eb3\u6253\u5370\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5185\u5b58\u6ea2\u51fa\uff09\uff0c\u800c<code>printf</code>\u51fd\u6570\u6253\u5370\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\u3002</p> </li> <li> <p><code>c   char str[20];   double f=14.309948;   sprintf(str,\"%6.2f\",f);//\u53ef\u4ee5\u63a7\u5236\u7cbe\u5ea6\uff0c\u6570\u5b57\u6574\u4f53\u957f\u5ea6\u5305\u62ec\u5c0f\u6570\u70b9\u4e3a6\u4f4d\uff0c\u4fdd\u75592\u4f4d\u5c0f\u6570   int a=20984,b=48090;   sprintf(str,\"%3d%6d\",a,b)//\u5c06\u591a\u4e2a\u6570\u503c\u6570\u636e\u8fde\u63a5\u8d77\u6765</code></p> </li> <li> <p>\u8fd4\u56de\u503c\uff1a\u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5199\u5165\u7684\u5b57\u7b26\u603b\u6570\uff0c\u4e0d\u5305\u62ec\u5b57\u7b26\u4e32\u8ffd\u52a0\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u5931\u8d25\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6570</p> </li> </ul>"},{"location":"cs/c/c/#strstr","title":"<code>strstr</code>\u51fd\u6570","text":"<ul> <li><code>strstr(str1,str2)</code>\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32<code>str2</code>\u662f\u5426\u662f<code>str1</code>\u7684\u5b50\u4e32</li> <li>\u5982\u679c\u662f\u5219\u8be5\u51fd\u6570\u8fd4\u56destr2\u5728str1\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740\uff0c\u5426\u5219\u8fd4\u56deNULL</li> </ul>"},{"location":"cs/c/c/#_18","title":"\u65b9\u6cd5\u4e00\uff1a\u641c\u7d22\u5b50\u5b57\u7b26\u4e32","text":"<p><code>s+s</code>\u5305\u542b\u4e86\u6240\u6709<code>s1</code>\u53ef\u4ee5\u901a\u8fc7\u8f6e\u8f6c\u64cd\u4f5c\u5f97\u5230\u7684\u5b57\u7b26\u4e32</p> <pre><code>bool isFlipedString(char* s1, char* s2) {\nint m = strlen(s1), n = strlen(s2);\nif (m != n) {\nreturn false;\n}\nchar * str = (char *)malloc(sizeof(char) * (m + n + 1));//\u6ce8\u610fmalloc\uff0c\u786e\u4fddsprintf\u51fd\u6570\u7684\u5b9e\u73b0\nsprintf(str, \"%s%s\", s2, s2);\nreturn strstr(str, s1) != NULL;\n}\n</code></pre>"},{"location":"cs/c/c/#_19","title":"\u65b9\u6cd5\u4e8c\uff1a\u6a21\u62df","text":"<pre><code>bool isFlipedString(char* s1, char* s2){\nint m=strlen(s1);\nint n=strlen(s2);\nif(m!=n)\nreturn false;\nif(n==0)\nreturn true;\nfor(int i=0;i&lt;n;i++)\n{\nint flag=1;\nfor(int j=0;j&lt;n;j++)\n{\nif(s2[j]!=s1[(j+i)%n])\n{\nflag=0;\n}\n}\nif(flag) return true;\n}\nreturn false;\n}\n</code></pre>"},{"location":"cs/c/c/#_20","title":"\u5b57\u7b26\u4e32\u538b\u7f29","text":"<p>\u5b57\u7b26\u4e32\u538b\u7f29\u3002\u5229\u7528\u5b57\u7b26\u91cd\u590d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7f16\u5199\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b9e\u73b0\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u538b\u7f29\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u5b57\u7b26\u4e32<code>aabcccccaaa</code>\u4f1a\u53d8\u4e3a<code>a2b1c5a3</code>\u3002\u82e5\u201c\u538b\u7f29\u201d\u540e\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u53d8\u77ed\uff0c\u5219\u8fd4\u56de\u539f\u5148\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>char* compressString(char* S){//\u5178\u578b\u53cc\u6307\u9488\u6cd5\nint len=strlen(S);\nif(len&lt;=2)\nreturn S;\nchar *str=(char*)malloc(sizeof(char)*(len*3));\nint cnt=1;\nint p=0;\nfor(int i=1;i&lt;=len;i++)\n{\nif(S[i-1]==S[i])\n{\ncnt++;\n}\nelse{\nstr[p++]=S[i-1];\nint wlen = sprintf(&amp;str[p],\"%d\",cnt);//sprintf\u51fd\u6570\u8fd0\u7528\np+=wlen;//\u6b64\u5904\u6709\u6613\u9519\u70b9\uff0ccnt\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u5728\u5b57\u7b26\u6570\u7ec4\u4e2d\u5360\u7684\u4f4d\u4e0d\u540c\uff0c\u7528\u5230sprintf\u51fd\u6570\u4e0e\u6307\u9488\ncnt=1;\n}\n}\nstr[p]='\\0';\nif(strlen(str)&gt;=len)\nreturn S;\nreturn str;\n}\n</code></pre>"},{"location":"cs/c/c/#_21","title":"\u5b57\u7b26\u4e32\u76f8\u52a0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 <code>num1</code> \u548c<code>num2</code> \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u5e76\u540c\u6837\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u3002</p>"},{"location":"cs/c/c/#_22","title":"\u6a21\u62df\u7684\u601d\u60f3 \u6a21\u62df\u52a0\u6cd5\u7ad6\u5f0f","text":"<pre><code>char *addStrings(char *num1,char*num2)\n{\nint i=strlen(num1)-1,j=strlen(num2)-1;\nchar *ans = (char*)malloc(sizeof(char)*(10000));\nint len=0,add=0;\nwhile(i&gt;=0||j&gt;=0||add!=0)\n{\nint x=i&gt;=0?num1[i]-'0':0;\nint y=j&gt;=0?num2[j]-'0':0;\nint result=x+y+add;\nans[len++]='0'+result%10;\nint add=result/10;\ni--,j--;\n}\nfor(int i=0;i*2&lt;len;i++)\n{\nint t=ans[i];\nans[i]=ans[len-1-i];\nans[len-1-i]=t;\n}\nans[len]='\\0';\nreturn ans;\n}\n</code></pre>"},{"location":"cs/c/c/#_23","title":"\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6df7\u5408\u4e86\u6570\u5b57\u548c\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u5176\u4e2d\u7684\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u5c06\u8be5\u5b57\u7b26\u4e32\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u7684\u7c7b\u578b\u90fd\u4e0d\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b57\u6bcd\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u6570\u5b57\uff0c\u800c\u6570\u5b57\u540e\u9762\u5e94\u8be5\u8ddf\u7740\u5b57\u6bcd\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de \u91cd\u65b0\u683c\u5f0f\u5316\u540e \u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u65e0\u6cd5\u6309\u8981\u6c42\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5b57\u7b26\u4e32 \u3002</p>"},{"location":"cs/c/c/#isdigit","title":"<code>isdigit</code>\u51fd\u6570","text":"<ul> <li>\u5934\u6587\u4ef6 <code>#include&lt;ctype.h&gt;</code></li> <li>\u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u963f\u62c9\u4f2f\u6570\u5b570~9\uff0c\u5982\u679c\u662f\uff0c\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6</li> </ul>"},{"location":"cs/c/c/#_24","title":"\u53cc\u6307\u9488\u6cd5\uff08\u53d8\u5f0f\uff09","text":"<p>\u6211\u4eec\u628a\u6570\u5b57\u548c\u5b57\u6bcd\u4e2d\u4e2a\u6570\u591a\u7684\u653e\u5728\u5076\u6570\u4f4d\u4e0a\uff08\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 000 \u5f00\u59cb\uff09\uff0c\u4e2a\u6570\u5c11\u7684\u653e\u5728\u5947\u6570\u4f4d\u4e0a\uff0c\u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u51fa\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u3002\u90a3\u4e48\u6211\u4eec\u7528 i \u548c j \u6765\u5206\u522b\u8868\u793a\u4e2a\u6570\u591a\u7684\u548c\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u653e\u7f6e\u7684\u4e0b\u6807\uff0c\u521d\u59cb\u4e3a i=0,j=1\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\u79fb\u52a8 iii\uff0c\u5f53 s[i] \u4e3a\u4e2a\u6570\u5c11\u7684\u5b57\u7b26\u7c7b\u578b\u65f6\uff0c\u90a3\u4e48\u5411\u53f3\u79fb\u52a8 j \u627e\u5230\u5f80\u540e\u7684\u7b2c\u4e00\u4e2a s[j]\u4e3a\u4e2a\u6570\u591a\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u7136\u540e\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u5373\u53ef\uff0c\u4e0d\u65ad\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u81f3 i\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5373\u53ef\u3002</p> <pre><code>char * reformat(char * s){\nint sum_digit = 0;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; i++) {\nchar c = s[i];\nif (isdigit(c)) {\nsum_digit++;\n}\n}\nint sum_alpha = len - sum_digit;\nif (abs(sum_digit - sum_alpha) &gt; 1) {\nreturn \"\";\n}\nbool flag = sum_digit &gt; sum_alpha;\nfor (int i = 0, j = 1; i &lt; len; i += 2) {\nif ((isdigit(s[i]) != 0) != flag) {\nwhile ((isdigit(s[j]) != 0) != flag) {\nj += 2;\n}\nchar c = s[i];\ns[i] = s[j];\ns[j] = c;\n}\n}\nreturn s;\n}\n</code></pre>"},{"location":"cs/c/c/#_25","title":"\u540c\u6784\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p> <p>\u5982\u679c <code>s</code> \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u6309\u67d0\u79cd\u6620\u5c04\u5173\u7cfb\u66ff\u6362\u5f97\u5230 <code>t</code> \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p> <p>\u6bcf\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5e94\u5f53\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\uff0c\u540c\u65f6\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e0d\u540c\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u76f8\u540c\u5b57\u7b26\u53ea\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u5230\u81ea\u5df1\u672c\u8eab\u3002</p>"},{"location":"cs/c/c/#uthash","title":"<code>uthash</code>","text":"<ul> <li>\u5934\u6587\u4ef6<code>#include&lt;uthash.h&gt;</code></li> </ul>"},{"location":"cs/c/c/#_26","title":"\u521b\u5efa\u952e\u2014\u503c\u5bf9\u7ed3\u6784","text":"<ul> <li> <p>\u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u7ed3\u6784\u4f53</p> </li> <li> <p><code>C   struct  HashTable{       int id;                    // key\uff0c\u53ef\u4ee5\u662f\u6574\u578b\uff0c\u5b57\u7b26\uff0c\u6307\u9488        char name[10];             // value \u4e0d\u4e00\u5b9a\u5b58\u5728       UT_hash_handle hh;         /* makes this structure hashable */   };   struct HashTable *users =NULL;//\u521d\u59cb\u5316\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4e00\u5b9a\u8981\u521d\u59cb\u5316\u4e3aNULL</code></p> </li> </ul>"},{"location":"cs/c/c/#hash_find_int","title":"HASH_FIND_INT","text":"<pre><code>HASH_FIND_INT( users, &amp;user_id, s ); /* s: output pointer */\n//users:\u5f85\u67e5\u8be2\u7684hash\u8868\n//&amp;nuser_id\uff1a\u6307\u5411\u60f3\u67e5\u8be2\u7684key\u7684\u5730\u5740\n//s\uff1a\u8868\u793a\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u54c8\u5e0c\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u6307\u9488\uff0c\u9700\u8981\u4e8b\u5148\u5b9a\u4e49\n</code></pre> <pre><code>struct my_struct *find_user(int user_id) {   /* \u83b7\u5f97key=user_id\u7684\u952e\u503c\u5bf9 */\nstruct my_struct *s;   /* \u5b9a\u4e49s */\ns=(struct my_struct*)malloc(sizeof(struct my_struct));\nHASH_FIND_INT( users, &amp;user_id, s );  /* s: output pointer */\nreturn s;\n}\n</code></pre>"},{"location":"cs/c/c/#hash_add_int","title":"HASH_ADD_INT","text":"<p>\u7531\u4e8e\u8981\u4fdd\u6301\u54c8\u5e0c\u8868\u4e2d\u7684\u552f\u4e00\u6027\uff0c\u5728\u63d2\u5165\u952e\u503c\u5bf9\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5224\u65ad\u8868\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8981\u63d2\u5165\u7684\u952e\uff0c\u5982\u679c\u5df2\u5b58\u5728\uff0c\u5c31\u76f4\u63a5\u4fee\u6539\u952e\u5bf9\u5e94\u7684value\uff1b\u5982\u679c\u6ca1\u6709\u5b58\u5728\uff0c\u63d2\u5165\u952e\u503c\u5bf9\u3002</p> <pre><code>HASH_ADD_INT( users, id, s );  /* id: \u81ea\u5b9a\u4e49\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\u4e2dkey\u57df\u7684\u53d8\u91cf\u540d ,s\u662f\u5f85\u63d2\u5165\u7684\u952e\u503c\u5bf9\u7ed3\u6784\u4f53\uff0c\u6307\u9488\u5f62\u5f0f\uff0ckey\u548cvalue\u90fd\u8981\u7ed9\u5b9a\n</code></pre> <pre><code>void add_user(int user_id, char *name) {\nstruct my_struct *s;\nHASH_FIND_INT(users, &amp;user_id, s);  /* id already in the hash? */\nif (s==NULL) {     /* \u5982\u679cs\u7684key\u4e0d\u5b58\u5728 */\ns = (struct my_struct *)malloc(sizeof *s);\ns-&gt;id = user_id;\nHASH_ADD_INT( users, id, s );  /* id: name of key field */\n}\nstrcpy(s-&gt;name, name);   /* s\u7684key\u5b58\u5728\uff0c\u76f4\u63a5\u66f4\u65b0value\u503c */\n}\n</code></pre>"},{"location":"cs/c/c/#_27","title":"\u7edf\u8ba1\u5143\u7d20\u4e2a\u6570","text":"<pre><code>num_numbers = HASH_COUNT(users);\n</code></pre>"},{"location":"cs/c/c/#_28","title":"\u5faa\u73af\u54c8\u5e0c\u8868","text":""},{"location":"cs/c/c/#for","title":"\u65b9\u6cd5\u4e00 \u81ea\u5df1\u5199for\u5faa\u73af","text":"<p>\u5728<code>uthash</code>\u4e2d\uff0c\u54c8\u5e0c\u8868\u4e2d\u6bcf\u4e2a\u952e\u503c\u5bf9\u4e4b\u95f4\u6709\u6307\u9488\u76f8\u8fde\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u53e5\u67c4<code>hh</code>\u6765\u5b9e\u73b0\u6307\u9488\u8c03\u7528\u3002 \u6bcf\u4e2a\u952e\u503c\u5bf9\u90fd\u4f1a\u6709\u4e00\u4e2a\u524d\u5411\u6307\u9488<code>hh.prev</code>\u4e0e\u540e\u5411\u6307\u9488<code>hh.next</code>\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u53cc\u5411\u94fe\u8868\u4f7f\u7528\u3002</p> <pre><code>void print_users() {\nstruct my_struct *s;\nfor(s=users; s != NULL; s=s-&gt;hh.next) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n}\n</code></pre>"},{"location":"cs/c/c/#hash_iter","title":"\u65b9\u6cd5\u4e8c\uff1aHASH_ITER","text":"<pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp)\n//hh\u662f\u53e5\u67c4\uff0cs\u8868\u793a\u6bcf\u6b21\u5faa\u73af\u65f6\u83b7\u5f97\u7684\u90a3\u4e2a\u952e\u503c\u5bf9\uff0c\u5728\u51fd\u6570\u524d\u76f4\u63a5\u5b9a\u4e49\uff0c\u4e0d\u7528\u8d4b\u521d\u503c\uff0ctmp,\u4e34\u65f6\u53d8\u91cf\uff0c\u7ed3\u6784\u4f53\u6307\u9488\uff08\u4e0d\u7528\u8d4b\u503c\uff09\n</code></pre> <pre><code>struct my_struct *s, *tmp;\nHASH_ITER(hh, users, s, tmp) {\nprintf(\"user id %d: name %s\\n\", s-&gt;id, s-&gt;name);\n}\n</code></pre>"},{"location":"cs/c/c/#_29","title":"\u540c\u6784\u5b57\u7b26\u4e32\u89e3\u6cd5","text":"<ul> <li>\u53cc\u5c04\u5173\u7cfb</li> <li>\u7ef4\u62a4\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u7b2c\u4e00\u5f20\u54c8\u5e0c\u8868s2t\u4ee5s\u4e2d\u5b57\u7b26\u4e3a\u952e\uff0c\u6620\u5c04\u5230t\u7684\u5b57\u7b26\u4e3a\u503c\uff0c\u7b2c\u4e8c\u5f20\u5219\u76f8\u53cd\u3002\u4ece\u5de6\u81f3\u53f3\u904d\u5386\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\uff0c\u4e0d\u65ad\u66f4\u65b0\u4e24\u5f20\u54c8\u5e0c\u8868\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u8fd4\u56defalse</li> </ul> <pre><code>struct HashTable {\nchar key;\nchar val;\nUT_hash_handle hh;\n};\nbool isIsomorphic(char* s, char* t) {\nstruct HashTable* s2t = NULL;\nstruct HashTable* t2s = NULL;\nint len = strlen(s);\nfor (int i = 0; i &lt; len; ++i) {\nchar x = s[i], y = t[i];\nstruct HashTable *tmp1, *tmp2;\nHASH_FIND(hh, s2t, &amp;x, sizeof(char), tmp1);\nHASH_FIND(hh, t2s, &amp;y, sizeof(char), tmp2);\nif (tmp1 != NULL) {\nif (tmp1-&gt;val != y) {\nreturn false;\n}\n} else {\ntmp1 = malloc(sizeof(struct HashTable));\ntmp1-&gt;key = x;\ntmp1-&gt;val = y;\nHASH_ADD(hh, s2t, key, sizeof(char), tmp1);\n}\nif (tmp2 != NULL) {\nif (tmp2-&gt;val != x) {\nreturn false;\n}\n} else {\ntmp2 = malloc(sizeof(struct HashTable));\ntmp2-&gt;key = y;\ntmp2-&gt;val = x;\nHASH_ADD(hh, t2s, key, sizeof(char), tmp2);\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"cs/c/c/#_30","title":"\u6392\u5e8f","text":""},{"location":"cs/c/c/#_31","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void qsort(int l,int r){\nint mid=a[(l+r)/2];\nint i=l,j=r;\nwhile(i&lt;=j){\nwhile(a[i]&lt;mid) i++;\nwhile(a[j]&gt;mid) j--;\nif(i&lt;=j){\nswap(&amp;a[i],&amp;a[j]);\ni++;\nj--;\n}\n}\nif(l&lt;j) qsort(l,j);\nif(i&lt;r) qsort(i,r);\n}\n</code></pre> <pre><code>void qsort(int a[],int x,int y)\n{\nif(x&gt;=y)\nreturn;\nint left=x;\nint right=y;\nint mid=a[left];\nwhile(left&lt;=right)\n{\nwhile(a[right]&gt;=mid&amp;&amp;left&lt;right)\n{\nright--;\n}\na[left]=a[right];\nwhile(a[left]&lt;=mid&amp;&amp;left&lt;right)\n{\nleft++;\n}\na[right]=a[left];\n}\na[left]=mid;\nqsort(a,x,left-1);\nqsort(a,left+1,y);\n}\n</code></pre>"},{"location":"cs/c/c/#_32","title":"\u63d2\u5165\u6392\u5e8f","text":"<pre><code>void insertion_sort(int a[],int len){\nint key;int i,j;\nfor(i=1;i&lt;len;i++){\nkey=a[i];\nj=i-1;\nwhile(j&gt;=0&amp;&amp;a[j]&gt;key){\na[j+1]=a[j];\nj--;\n}\na[j+1]=key;\n}\n}\n</code></pre>"},{"location":"cs/c/c/#_33","title":"\u5192\u6ce1\u6392\u5e8f","text":"<pre><code>void bubble_sort(int a[],int len)\n{\nfor(int i=len-1;i&gt;0;i--)\n{\nint loc=0;\nfor(int j=0;j&lt;i;j++)\n{\nif(a[j]&gt;a[j+1])\n{\nswap(&amp;a[j],&amp;a[j+1]);\nloc=j;\n}\n}\ni=loc+1;\n}\n}\n</code></pre>"},{"location":"cs/c/c/#_34","title":"\u5f52\u5e76\u6392\u5e8f","text":"<pre><code>void merge_sort(int a[],int start,int end)\n{\nif(start&gt;=end)\nreturn;\nint b[100001];\nint mid=(end+start)/2;\nint start1 = start,end1 = mid;\nint start2 = mid+1,end2 = end;\nmerge_sort(a , start1 , end1);\nmerge_sort(a ,  start2 , end2);\nint k=start;\nwhile(start1 &lt;= end1&amp;&amp;start2 &lt;= end2)\n{\nb[k++]=a[start1]&lt;a[start2]?a[start1++]:a[start2++];\n}\nwhile(start1&lt;=end1)\n{\nb[k++]=a[start1++];\n}\nwhile(start2&lt;=end2)\n{\nb[k++]=a[start2++];\n}\nfor(k=start;k&lt;=end;k++)\n{\na[k]=b[k];\n}\n}\n</code></pre>"},{"location":"cs/c/c/#_35","title":"\u9009\u62e9\u6392\u5e8f","text":"<pre><code>void selection_sort(int a[],int len)\n{\nfor(int i=0;i&lt;n-1;i++)\n{\nint min=i;\nfor(int j=i+1;j&lt;n;j++)\n{\nif(a[j]&lt;a[min])\n{\nmin=j;\n}\n}\nswap(&amp;a[min],&amp;a[i]);\n}\n}\n</code></pre>"},{"location":"cs/c/c/#_36","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"cs/c/c/#_37","title":"\u4e0e\u8fd0\u7b97<code>&amp;</code>","text":"<ul> <li>\u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1</li> </ul> <p>3&amp;5 \u5373 0000 0011&amp; 0000 0101 = 0000 0001\uff0c\u56e0\u6b64 3&amp;5 \u7684\u503c\u5f971\u3002</p>"},{"location":"cs/c/c/#_38","title":"\u7528\u9014","text":"<p>1.\u6e05\u96f6\uff1a\u5982\u679c\u60f3\u5c06\u4e00\u4e2a\u5355\u5143\u6e05\u96f6\uff0c\u53ea\u8981\u4e0e\u4e00\u4e2a\u5404\u4f4d\u90fd\u4e3a\u96f6\u7684\u6570\u503c\u76f8\u4e0e\uff0c\u7ed3\u679c\u4e3a\u96f6</p> <p>2.\u53d6\u4e00\u4e2a\u6570\u7684\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u53d6\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff08X&amp;Y=0000 1110\uff09\u5373\u53ef\u5f97\u5230X\u7684\u6307\u5b9a\u4f4d\u3002</p> <p>3.\u5224\u65ad\u5947\u5076\uff1a\u53ea\u8981\u6839\u636e\u6700\u672b\u4f4d\u662f0\u8fd8\u662f1\u6765\u51b3\u5b9a\uff0c\u4e3a0\u5c31\u662f\u5076\u6570\uff0c\u4e3a1\u5c31\u662f\u5947\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u7528if ((a &amp; 1) == 0)\u4ee3\u66ffif (a % 2 == 0)\u6765\u5224\u65ada\u662f\u4e0d\u662f\u5076\u6570\u3002</p>"},{"location":"cs/c/c/#_39","title":"\u6216\u8fd0\u7b97|","text":"<p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\u53ea\u8981\u6709\u4e00\u4e2a\u4e3a1\uff0c\u5176\u503c\u4e3a1</p>"},{"location":"cs/c/c/#_40","title":"\u7528\u9014","text":"<ul> <li>\u5e38\u7528\u6765\u5bf9\u4e00\u4e2a\u6570\u636e\u7684\u67d0\u4e9b\u4f4d\u8bbe\u7f6e\u4e3a1</li> </ul>"},{"location":"cs/c/c/#_41","title":"\u5f02\u6216\u8fd0\u7b97^","text":"<pre><code>0^0=0 0^1=1 1^0=1 1^1=0\n</code></pre> <p>\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u76f8\u540c\u4e3a0\uff0c\u5426\u5219\u4e3a1</p> <p>\u5f02\u6216\u7684\u51e0\u6761\u6027\u8d28:</p> <ul> <li>1\u3001\u4ea4\u6362\u5f8b</li> <li>2\u3001\u7ed3\u5408\u5f8b (a^b)^c == a^(b^c)</li> <li>3\u3001\u5bf9\u4e8e\u4efb\u4f55\u6570x\uff0c\u90fd\u6709 x^x=0\uff0cx^0=x</li> <li>4\u3001\u81ea\u53cd\u6027: a^b^b=a^0=a;</li> </ul>"},{"location":"cs/c/c/#_42","title":"\u7528\u9014","text":"<ul> <li>\u7ffb\u8f6c\u6307\u5b9a\u4f4d\uff1a\u6bd4\u5982\u5c06\u6570 X=1010 1110 \u7684\u4f4e4\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u53ea\u9700\u8981\u53e6\u627e\u4e00\u4e2a\u6570Y\uff0c\u4ee4Y\u7684\u4f4e4\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u4e3a0\uff0c\u5373Y=0000 1111\uff0c\u7136\u540e\u5c06X\u4e0eY\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff08X^Y=1010 0001\uff09\u5373\u53ef\u5f97\u5230\u3002</li> <li>\u4e0e0\u76f8\u5f02\u6216\u503c\u4e0d\u53d8</li> <li>\u4ea4\u6362\u4e24\u4e2a\u6570</li> </ul>"},{"location":"cs/c/c/#_43","title":"\u5de6\u79fb\u8fd0\u7b97\u7b26&lt;&lt;","text":"<p>\u5c06\u4e00\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff08\u5de6\u8fb9\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e22\u5f03\uff0c\u53f3\u8fb9\u88650\uff09\u3002</p> <p>\u8bbe a=1010 1110\uff0ca = a&lt;&lt; 2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u5de6\u79fb2\u4f4d\u3001\u53f3\u88650\uff0c\u5373\u5f97a=1011 1000\u3002</p> <p>\u82e5\u5de6\u79fb\u65f6\u820d\u5f03\u7684\u9ad8\u4f4d\u4e0d\u5305\u542b1\uff0c\u5219\u6bcf\u5de6\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u4e58\u4ee52\u3002</p>"},{"location":"cs/c/c/#_44","title":"\u53f3\u79fb\u8fd0\u7b97\u7b26&gt;&gt;","text":"<p>\u5b9a\u4e49\uff1a\u5c06\u4e00\u4e2a\u6570\u7684\u5404\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u6b63\u6570\u5de6\u88650\uff0c\u8d1f\u6570\u5de6\u88651\uff0c\u53f3\u8fb9\u4e22\u5f03\u3002</p> <p>\u4f8b\u5982\uff1aa=a&gt;&gt;2 \u5c06a\u7684\u4e8c\u8fdb\u5236\u4f4d\u53f3\u79fb2\u4f4d\uff0c\u5de6\u88650 \u6216\u8005 \u5de6\u88651\u5f97\u770b\u88ab\u79fb\u6570\u662f\u6b63\u8fd8\u662f\u8d1f\u3002</p> <p>\u64cd\u4f5c\u6570\u6bcf\u53f3\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e\u8be5\u6570\u9664\u4ee52\u3002</p>"},{"location":"cs/c/c/#_45","title":"\u5e94\u7528","text":""},{"location":"cs/c/c/#_46","title":"\u5feb\u901f\u5e42","text":"<pre><code>int quickpower(int a,int b)\n{\nint ans=1;\nint base=a;\nwhile(b&gt;0)\n{\nif(b&amp;1)//b\u5728\u4e8c\u8fdb\u5236\u4e0b\u6700\u540e\u4e00\u4f4d\u662f\u4e0d\u662f1\n{\nans*=base;\n}\nbase*=base;\nb&gt;&gt;=1;//b\u53f3\u79fb\u4e00\u4f4d\n}\nreturn ans;\n}\n</code></pre>"},{"location":"cs/c/c/#_47","title":"\u53d6\u4f59\u8fd0\u7b97","text":"\\[ (A+B)mod\\,b=(A\\,mod\\,b+B\\,mod\\,b)mod\\,b\\\\ (A\\times B)\\,mod\\,b=((A\\,mod\\,b)\\times (B\\,mod\\,b))\\,mod\\,b \\] <pre><code>while(b &gt; 0)\n{\nif(b &amp; 1)\n{\nans *= base;\nans %= m;\n}\nbase *= base;\nbase %= m;\nb &gt;&gt;= 1;\n}\n</code></pre>"},{"location":"cs/c/c/#1","title":"\u4f4d1\u7684\u4e2a\u6570","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff08\u4ee5\u4e8c\u8fdb\u5236\u4e32\u7684\u5f62\u5f0f\uff09\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a '1' \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a\u6c49\u660e\u91cd\u91cf\uff09</p>"},{"location":"cs/c/c/#_48","title":"\u6cd5\u4e00 \u76f4\u63a5\u8ba1\u7b97","text":"<pre><code>int hammingweight(int x)\n{\nint cnt=0;\nfor(int i=0;i&lt;32;i++)\n{\ncnt+=(n&gt;&gt;i)&amp;1;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/c/c/#_49","title":"\u6cd5\u4e8c\uff1a\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28","text":"\\[ n\\,\\&amp;\\,(n-1) \\] <p>\u7ed3\u679c\u4e3a\u5c06n\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d1\u53d8\u62100</p> <p>\u91cd\u590d\u8be5\u64cd\u4f5c\uff0c\u76f4\u5230 n \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u5168\u90e8\u6570\u4f4d\u90fd\u53d8\u6210 00\uff0c\u5219\u64cd\u4f5c\u6b21\u6570\u5373\u4e3a n\u7684\u4f4d 11 \u7684\u4e2a\u6570\u3002</p> <pre><code>int hammingweight(int x)\n{\nint cnt=0;\nwhile(x!=0)\n{\nx=x&amp;(x-1);\ncnt++;\n}\nreturn cnt;\n}\n</code></pre>"},{"location":"cs/c/c/#2","title":"\u5224\u65ad\u662f\u4e0d\u662f2\u7684\u6574\u6570\u6b21\u65b9","text":"<pre><code>if(n&amp;(n-1)==0)//2\u7684\u6574\u6570\u6b21\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ea\u67091\u4e2a1\n</code></pre>"},{"location":"math/","title":"Index","text":"<p>Abstract</p> <p>\u8bb0\u5f55\u5206\u6790\uff0c\u4ee3\u6570\uff0c\u6982\u7387\uff0c\u4f18\u5316\u7684\u5173\u952e\u77e5\u8bc6</p>"},{"location":"math/#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u6570\u5b66\u5206\u6790</li> <li>\u7ebf\u6027\u4ee3\u6570</li> <li>\u6982\u7387\u8bba</li> <li>\u4f18\u5316</li> </ul>"},{"location":"math/algebra/","title":"\u7ebf\u6027\u4ee3\u6570","text":"<p>Abstract</p> <p>\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\u4f53\u7cfb\u68b3\u7406</p> <p>\u53c2\u8003\u4e66\u76ee\uff1a\u300a\u5927\u5b66\u6570\u5b66\u2014\u2014\u4ee3\u6570\u4e0e\u51e0\u4f55\u300b         \u300aLinear Algebra Done Right\u300b</p> <p>\u672c\u9875\u7684\u6700\u540e\u662f\u6211\u7684\u7ebf\u4ee3II(H)\u671f\u672b\u68b3\u7406\u7b14\u8bb0\uff0c\u662f\u6211\u9488\u5bf9\u81ea\u5df1\u638c\u63e1\u7a0b\u5ea6\u7684\u987a\u5e8f\u6574\u7406\u7684\uff0c\u5e76\u6ca1\u6709\u6309\u7167\u77e5\u8bc6\u4f53\u7cfb\u7684\u987a\u5e8f\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> <p>\u7ebf\u4ee3\u7684\u6838\u5fc3\u95ee\u9898\uff1a\u627e\u5230\u7a7a\u95f4\u4e0a\u7684\u4e00\u4e2a\u7b97\u5b50\u4f7f\u5176\u77e9\u9635\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u77e5\u8bc6\u4e3b\u7ebf\u5c31\u6309\u7167\u8fd9\u4e2a\u6838\u5fc3\u76ee\u6807\u5c55\u5f00</p>"},{"location":"math/algebra/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":""},{"location":"math/algebra/#_2","title":"\u7ebf\u6027\u7a7a\u95f4","text":"<ul> <li>\u7ebf\u6027\u7a7a\u95f4\u7684\u5b9a\u4e49\uff1a\u516b\u6761\u89c4\u5219</li> <li>\u5b50\u7a7a\u95f4\uff0c\u5f20\u6210\u7a7a\u95f4\uff1a\u8bc1\u660e\u67d0\u4e2a\u7a7a\u95f4\u662f\u5b50\u7a7a\u95f4</li> <li>\u7ebf\u6027\u76f8\u5173\u548c\u7ebf\u6027\u65e0\u5173\uff1a\u8bf8\u591a\u6027\u8d28</li> <li>\u57fa\u548c\u7ef4\u6570</li> </ul>"},{"location":"math/algebra/#_3","title":"\u7ebf\u6027\u6620\u5c04","text":"<ul> <li>\u7ebf\u6027\u6620\u5c04\u7684\u5b9a\u4e49\u53ca\u4ee3\u6570\u6027\u8d28</li> <li>\u96f6\u7a7a\u95f4\u548c\u503c\u57df\uff0c\u5355\u6027\uff0c\u6ee1\u6027</li> <li>\u7ebf\u6027\u6620\u5c04\u57fa\u672c\u5b9a\u7406</li> <li>\u7ebf\u6027\u6620\u5c04\u7684\u77e9\u9635\u8868\u793a</li> <li>\u53ef\u9006\u6027\u4e0e\u540c\u6784</li> <li>*\u5411\u91cf\u7a7a\u95f4\u7684\u79ef\u548c\u5546\uff0c\u5bf9\u5076\u7a7a\u95f4\u4e0e\u5bf9\u5076\u6620\u5c04\uff08\u8fd9\u5757\u77e5\u8bc6\u5b58\u5728\u4e0e\u5426\u5bf9\u4e3b\u7ebf\u5f71\u54cd\u4e0d\u5927\uff09</li> </ul> <p> \u7ebf\u6027\u4ee3\u6570II(H)\u7b14\u8bb0</p>"},{"location":"math/analysis/","title":"\u6570\u5b66\u5206\u6790","text":"<p>Abstract</p> <p>\u6570\u5b66\u5206\u6790(\u9648\u7eaa\u4fee)</p> <p>\u53c2\u8003\u6559\u6750\uff1a\u300a\u6570\u5b66\u5206\u6790\uff08\u9648\u7eaa\u4fee\uff09\u7b2c\u4e09\u7248\u300b \u300a\u6570\u5b66\u5206\u6790\u4e2d\u7684\u5178\u578b\u95ee\u9898\u4e0e\u65b9\u6cd5\u300b \u88f4\u793c\u6587</p>"}]}